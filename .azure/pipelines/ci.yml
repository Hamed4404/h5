#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details on this file.
#

# Configure which branches trigger builds
trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*

# Run PR validation on all branches
pr:
  autoCancel: true
  branches:
    include:
    - '*'

parameters:
# Choose whether to skip tests when running pipeline manually.
- name: skipTests
  default: false
  displayName: Skip tests?
  type: boolean
# Choose whether to enable binlogs when running pipeline manually.
- name: produceBinlogs
  default: false
  displayName: Produce binlogs?
  type: boolean
# Choose whether to test source indexing. Ignored in public builds.
# Will cause inaccessible links on https://source.dot.net/ unless commits are also available in GitHub.
- name: testSourceIndexing
  default: false
  displayName: Test source indexing? !Danger! see comments in YAML.
  type: boolean

variables:
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: _TeamName
  value:  AspNetCore
- name: _PublishUsingPipelines
  value: true
- ${{ if or(startswith(variables['Build.SourceBranch'], 'refs/heads/release/'), startswith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), eq(variables['Build.Reason'], 'Manual')) }}:
  - name: PostBuildSign
    value: false
- ${{ else }}:
  - name: PostBuildSign
    value: true
- name: _UseHelixOpenQueues
  value: ${{ ne(variables['System.TeamProject'], 'internal') }}
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _BuildArgs
    value: /p:TeamName=$(_TeamName)
           /p:OfficialBuildId=$(Build.BuildNumber)
           /p:SkipTestBuild=true
           /p:PostBuildSign=$(PostBuildSign)
  # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
  # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
  - group: Publish-Build-Assets
  # The following extra properties are not set when testing. Use with final build.[cmd,sh] of asset-producing jobs.
  - name: _PublishArgs
    value: /p:Publish=true
           /p:GenerateChecksums=true
           /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
  # Variables for source indexing afterBuild step and job.
  - name: sourceIndexPackageVersion
    value: 1.0.1-20210614.1
  - name: sourceIndexPackageSource
    value: https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json
  - group: source-dot-net stage1 variables
  - ${{ if ne(parameters.produceBinlogs, 'true') }}:
    # Do not log most Windows steps in official builds; this is the slowest job. Site extensions step always logs.
    - name: WindowsArm64LogArgs
      value: -ExcludeCIBinaryLog
    - name: Windows64LogArgs
      value: -ExcludeCIBinaryLog
    - name: Windows86LogArgs
      value: -ExcludeCIBinaryLog
    - name: WindowsSignLogArgs
      value: -ExcludeCIBinaryLog
    - name: WindowsInstallersLogArgs
      value: -ExcludeCIBinaryLog
    - name: WindowsArm64InstallersLogArgs
      value: -ExcludeCIBinaryLog
- ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _BuildArgs
    value: '/p:SkipTestBuild=true /p:PostBuildSign=$(PostBuildSign)'
  - name: _PublishArgs
    value: ''
- ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), eq(parameters.produceBinlogs, 'true')) }}:
  # Write binary logs for all main Windows build steps except the x86 one in public and PR builds.
  - name: WindowsArm64LogArgs
    value: /bl:artifacts/log/Release/Build.arm64.binlog
  - name: Windows64LogArgs
    value: /bl:artifacts/log/Release/Build.x64.binlog
  - name: Windows86LogArgs
    value: -ExcludeCIBinaryLog
  - name: WindowsSignLogArgs
    value: /bl:artifacts/log/Release/Build.CodeSign.binlog
  - name: WindowsInstallersLogArgs
    value: /bl:artifacts/log/Release/Build.Installers.binlog
  - name: WindowsArm64InstallersLogArgs
    value: /bl:artifacts/log/Release/Build.Installers.Arm64.binlog
- ${{ if ne(variables['System.TeamProject'], 'internal') }}:
  - name: _SignType
    value: ''
  - name: _InternalRuntimeDownloadArgs
    value: ''
  - name: _InternalRuntimeDownloadCodeSignArgs
    value: ''
- ${{ if eq(variables['System.TeamProject'], 'internal') }}:
  - group: DotNet-MSRC-Storage
  - name: _InternalRuntimeDownloadArgs
    value: -RuntimeSourceFeed https://dotnetclimsrc.blob.core.windows.net/dotnet
           -RuntimeSourceFeedKey $(dotnetclimsrc-read-sas-token-base64)
           /p:DotNetAssetRootAccessTokenSuffix='$(dotnetclimsrc-read-sas-token-base64)'
  # The code signing doesn't use the aspnet build scripts, so the msbuild parameters have to be passed directly. This
  # is awkward but necessary because the eng/common/ build scripts don't add the msbuild properties automatically.
  - name: _InternalRuntimeDownloadCodeSignArgs
    value: $(_InternalRuntimeDownloadArgs)
           /p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet
           /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64)
  - group: DotNet-HelixApi-Access
  - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
    - name: _SignType
      value: real
  - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
    - name: _SignType
      value: test

stages:
- stage: build
  displayName: Build
  jobs:
  # Build Windows (x64/x86/arm64)
  - template: jobs/default-build.yml
    parameters:
      codeSign: true
      jobName: Windows_build
      jobDisplayName: "Build: Windows x64"
      agentOs: Windows
      steps:
      - ${{ if notIn(variables['Build.Reason'], 'PullRequest') }}:
        - script: "echo ##vso[build.addbuildtag]daily-build"
          displayName: 'Set CI daily-build tag'

      # !!! NOTE !!! Some of these steps have disabled code signing.
      # This is intentional to workaround https://github.com/dotnet/arcade/issues/1957 which always re-submits for code-signing, even
      # if they have already been signed. This results in slower builds due to re-submitting the same .nupkg many times for signing.
      # The sign settings have been configured to
      - script: ./eng/build.cmd
                -ci
                -arch x64
                -pack
                -all
                $(_BuildArgs)
                $(_InternalRuntimeDownloadArgs)
                $(Windows64LogArgs)
        displayName: Build x64

      # This runs code-signing on all packages, zips, and jar files as defined in build/CodeSign.targets. If
      # https://github.com/dotnet/arcade/issues/1957 is resolved, consider running code-signing inline with the other
      # previous steps. Sign check is disabled because it is run in a separate step below, after installers are built.
      - script: ./eng/build.cmd
                -ci
                -noBuildRepoTasks
                -noBuildNative
                -noBuild
                -sign
                /p:DotNetSignType=$(_SignType)
                /p:AssetManifestFileName=aspnetcore-win.xml
                $(_BuildArgs)
                $(_PublishArgs)
                $(WindowsSignLogArgs)
        displayName: Code sign packages

      artifacts:
      - name: Windows_Logs
        path: artifacts/log/
        publishOnError: true
        includeForks: true
      - name: Windows_Packages
        path: artifacts/packages/

  # Publish to the BAR and perform source indexing. Wait until everything else is done.
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - template: /eng/common/templates/job/publish-build-assets.yml
      parameters:
        dependsOn:
          - Windows_build
        pool:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals 1es-windows-2019
        publishUsingPipelines: ${{ variables._PublishUsingPipelines }}
        enablePublishBuildArtifacts: true # publish artifacts/log files
        publishAssetsImmediately: true # Don't use a separate stage for darc publishing.
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), or(eq(parameters.testSourceIndexing, 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))) }}:
      - job: SourceIndexUpload
        displayName: Upload indexable solution
        dependsOn:
          - Windows_arm_build
          # In addition to the dependency above that provides assets, ensure the build was successful overall.
          - Windows_build
          - ${{ if ne(variables.PostBuildSign, 'true') }}:
            - CodeSign_Xplat_MacOS_arm64
            - CodeSign_Xplat_MacOS_x64
            - CodeSign_Xplat_Linux_x64
            - CodeSign_Xplat_Linux_arm
            - CodeSign_Xplat_Linux_arm64
            - CodeSign_Xplat_Linux_musl_x64
            - CodeSign_Xplat_Linux_musl_arm
            - CodeSign_Xplat_Linux_musl_arm64
          - ${{ if eq(variables.PostBuildSign, 'true') }}:
            - MacOs_arm64_build
            - MacOs_x64_build
            - Linux_x64_build
            - Linux_arm_build
            - Linux_arm64_build
            - Linux_musl_x64_build
            - Linux_musl_arm_build
            - Linux_musl_arm64_build
          - ${{ if in(variables['Build.Reason'], 'Manual') }}:
            - Code_check
            - ${{ if ne(parameters.skipTests, 'true') }}:
              - Windows_Test
              - MacOS_Test
              - Linux_Test
              - Helix_x64
          - Source_Build_Managed
        pool:
          name: NetCore1ESPool-Internal
          # Visual Studio Enterprise - no BuildTools agents exist internally and job must run on Windows
          demands: ImageOverride -equals 1es-windows-2019
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: Windows_arm_SourceIndex
              cleanDestinationFolder: true
          # Ignore repository's global.json and any existing .NET SDK.
          - task: UseDotNet@2
            displayName: Use .NET Core sdk 3.1
            inputs:
              packageType: sdk
              version: 3.1.x
              installationPath: $(Agent.TempDirectory)/.dotnet
              workingDirectory: $(Agent.TempDirectory)
          - script: $(Agent.TempDirectory)/.dotnet/dotnet tool install UploadIndexStage1
              --version $(SourceIndexPackageVersion)
              --add-source $(SourceIndexPackageSource)
              --tool-path $(Agent.TempDirectory)/.tools &&
              $(Agent.TempDirectory)/.tools/UploadIndexStage1
              -i $(System.ArtifactsDirectory)/Windows_arm_SourceIndex/
              -n $(Build.Repository.Name)
            displayName: Upload indexable solution
            workingDirectory: $(Agent.TempDirectory)
            env:
              BLOB_CONTAINER_URL: $(source-dot-net-stage1-blob-container-url)

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      publishingInfraVersion: 3
      enableSymbolValidation: false
      enableSigningValidation: false
      enableNugetValidation: false
      publishInstallersAndChecksums: true
      publishAssetsImmediately: true
