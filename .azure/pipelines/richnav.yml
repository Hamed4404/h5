#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details on this file.
#

# Configure which branches trigger builds
trigger:
  branches:
    include:
    - blazor-wasm
    - master
    - release/*
    - internal/release/*

variables:
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: _TeamName
  value:  AspNetCore
- name: _BuildArgs
  value: '/p:SkipTestBuild=true'
- name: _PublishArgs
  value: ''
# Write binary logs for all main Windows build steps except the x86 one in public and PR builds.
- name: WindowsArm64LogArgs
  value: /bl:artifacts/log/Release/Build.arm64.binlog
- name: Windows64LogArgs
  value: /bl:artifacts/log/Release/Build.x64.binlog
- name: Windows86LogArgs
  value: -ExcludeCIBinaryLog
- name: WindowsInstallersLogArgs
  value: /bl:artifacts/log/Release/Build.Installers.binlog
- name: WindowsArm64InstallersLogArgs
  value: /bl:artifacts/log/Release/Build.Installers.Arm64.binlog
- name: _UseHelixOpenQueues
  value: 'true'
- name: _SignType
  value: ''
- name: _InternalRuntimeDownloadArgs
  value: ''
- name: _InternalRuntimeDownloadCodeSignArgs
  value: ''

stages:
- stage: build
  displayName: Build
  jobs:
  # Build Windows (x64/x86)
  - template: jobs/default-build.yml
    parameters:
      codeSign: false
      jobName: Windows_build
      jobDisplayName: "Build: Windows x64/x86"
      enableRichCodeNavigation: true
      agentOs: Windows
      steps:
      # !!! NOTE !!! Some of these steps have disabled code signing.
      # This is intentional to workaround https://github.com/dotnet/arcade/issues/1957 which always re-submits for code-signing, even
      # if they have already been signed. This results in slower builds due to re-submitting the same .nupkg many times for signing.
      # The sign settings have been configured to
      - script: ./build.cmd
                -ci
                -build
                -restore
                -arch x64
                $(_BuildArgs)
                $(_InternalRuntimeDownloadArgs)
                $(Windows64LogArgs)
        displayName: Build x64

      # Build the x86 shared framework
      # This is going to actually build x86 native assets.
      - script: ./build.cmd
                -ci
                -noBuildRepoTasks
                -arch x86
                -build
                -restore
                -noBuildJava
                -noBuildNative
                $(_BuildArgs)
                $(_InternalRuntimeDownloadArgs)
                $(Windows86LogArgs)
        displayName: Build x86

      - script: .\src\SiteExtensions\build.cmd
                -ci
                -noBuildRepoTasks
                -build
                -restore
                -noBuildDeps
                -noBuildNative
                $(_BuildArgs)
                $(_InternalRuntimeDownloadArgs)
        condition: ne(variables['Build.Reason'], 'PullRequest')
        displayName: Build SiteExtension

      # Windows installers bundle both x86 and x64 assets
      - script: ./build.cmd
                -ci
                -noBuildRepoTasks
                -buildInstallers
                -noBuildNative
                /p:AssetManifestFileName=aspnetcore-win-x64-x86.xml
                $(_BuildArgs)
                $(_InternalRuntimeDownloadArgs)
                $(WindowsInstallersLogArgs)
        displayName: Build Installers

