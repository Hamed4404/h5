<!--
This file defines targets for building a shared framework.
This targets file should only be imported by .shfxproj files.
-->
<Project>

  <Import Project="..\..\build\tasks\RepoTasks.tasks" />

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>

    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      GenerateSharedFxVersionsFile;
      PrepareForPublish;
      ComputeAndCopyFilesToPublishDirectory;
      GeneratePublishDependencyFile;
      GenerateSharedFxDependencyFile;
      GeneratePublishRuntimeConfigurationFile;
      OptimizeOutput;
      PostBuildEvent;
      GetTargetPath;
    </CoreBuildDependsOn>

    <OptimizeOutputDependsOn Condition=" '$(CrossGenOutput)' != 'false' ">
      PrepareForCrossGen;
      CrossGenAssemblies;
    </OptimizeOutputDependsOn>

    <OptimizeOutputDependsOn Condition=" '$(CrossgenSymbolsOutput)' != 'false' ">
      $(OptimizeOutputDependsOn);
      CrossGenSymbols;
    </OptimizeOutputDependsOn>

    <PrepareForBuildDependsOn></PrepareForBuildDependsOn>

    <ResolveReferencesDependsOn>
      BeforeResolveReferences;
      AssignProjectConfiguration;
      ResolveProjectReferences;
      FindInvalidProjectReferences;
      AfterResolveReferences
    </ResolveReferencesDependsOn>

    <!-- The name of the shared framework. -->
    <SharedFxName Condition=" '$(SharedFxName)' == '' ">$(MSBuildProjectName)</SharedFxName>

    <!--
      Defines the base RID for a vertical of related runtimes, e.g. Windows, macOS, Linux.
      This is used during runtime graph generation to determine which RIDs to include in the .deps.json file.
    -->
    <BaseRuntimeIdentifier Condition="$(RuntimeIdentifier.StartsWith('win'))">win</BaseRuntimeIdentifier>
    <BaseRuntimeIdentifier Condition="$(RuntimeIdentifier.StartsWith('osx'))">osx</BaseRuntimeIdentifier>
    <BaseRuntimeIdentifier Condition="$(RuntimeIdentifier.StartsWith('linux')) AND ! $(RuntimeIdentifier.StartsWith('linux-musl')) ">linux</BaseRuntimeIdentifier>
    <BaseRuntimeIdentifier Condition="$(RuntimeIdentifier.StartsWith('linux-musl'))">linux-musl</BaseRuntimeIdentifier>
    <BaseRuntimeIdentifier Condition="'$(BaseRuntimeIdentifier)' == '' ">unix</BaseRuntimeIdentifier>

    <LibPrefix Condition=" '$(BaseRuntimeIdentifier)' != 'win' ">lib</LibPrefix>
    <LibExtension>.so</LibExtension>
    <LibExtension Condition=" '$(BaseRuntimeIdentifier)' == 'win' ">.dll</LibExtension>
    <LibExtension Condition=" '$(BaseRuntimeIdentifier)' == 'osx' ">.dylib</LibExtension>
    <ExeExtension Condition=" '$(BaseRuntimeIdentifier)' == 'win' ">.exe</ExeExtension>
    <!-- 3B = semicolon in ASCII -->
    <PathSeparator Condition="'$(PathSeparator)' == ''">:</PathSeparator>
    <PathSeparator Condition=" '$(BaseRuntimeIdentifier)' == 'win' ">%3B</PathSeparator>

    <IntermediateOutputPath>$(IntermediateOutputPath)$(RuntimeIdentifier)\</IntermediateOutputPath>

    <!-- Override the SDK Default for this location based on whether crossgen happens or not. -->
    <PublishDir Condition=" '$(CrossGenOutput)' != 'true' ">$(OutputPath)</PublishDir>
    <PublishDir Condition=" '$(CrossGenOutput)' == 'true' ">$(IntermediateOutputPath)u\</PublishDir>

    <CrossGenToolDir>$(IntermediateOutputPath)crossgen\</CrossGenToolDir>

    <!-- Map BaseSharedFrameworkName into properties used by the SDK to determine publish output trimming and deps.json generation -->
    <MicrosoftNETPlatformLibrary>$(BaseSharedFrameworkName)</MicrosoftNETPlatformLibrary>
    <!-- Prevents runtimeconfig.dev.json from ending up in publish output. -->
    <ProjectRuntimeConfigDevFilePath>$(IntermediateOutputPath)$(SharedFxName).runtimeconfig.dev.json</ProjectRuntimeConfigDevFilePath>
    <!-- Redirects the output of GeneratePublishDependencyFile into obj/ because we need to do post-processing on the .deps.json file -->
    <PublishDepsFilePath>$(IntermediateOutputPath)$(SharedFxName).publish.deps.json</PublishDepsFilePath>
    <SharedFxDepsFilePath>$(OutputPath)$(SharedFxName).deps.json</SharedFxDepsFilePath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETCore.App" Version="$(RuntimeFrameworkVersion)">
      <IsImplicitlyDefined>true</IsImplicitlyDefined>
      <Publish>true</Publish>
      <PrivateAssets>All</PrivateAssets>
      <ExcludeAssets>Native</ExcludeAssets>
      <AllowExplicitVersion>true</AllowExplicitVersion>
    </PackageReference>

    <PackageReference Include="@(Dependency)">
      <IncludeAssets>Runtime;Native</IncludeAssets>
    </PackageReference>

    <ProjectReference Include="@(FrameworkProjectReference)" />
  </ItemGroup>

  <!-- Check some required properties before building a shared framework/ -->
  <Target Name="_CheckForRequiredFxProperties" BeforeTargets="_CheckForInvalidConfigurationAndPlatform">
    <Error Condition=" '$(BaseSharedFrameworkName)' == '' "
           Text="Missing required property: BaseSharedFrameworkName. Shared frameworks must specify which framework is used at the base." />

    <Error Condition=" '$(RuntimeIdentifier)' == '' "
           Text="Missing required property: RuntimeIdentifier. Shared frameworks are rid-specific, so this must be set." />

    <ItemGroup>
      <_UnknownRid Remove="@(_UnknownRid)" />
      <_UnknownRid Include="$(RuntimeIdentifier)" Exclude="$(SupportedRuntimeIdentifiers)" />
    </ItemGroup>

    <Error Condition=" '@(_UnknownRid)' != '' "
           Text="&quot;$(RuntimeIdentifier)&quot; not acceptable runtime identifier. Please specify an acceptable value: {$(SupportedRuntimeIdentifiers)}." />
  </Target>

  <!-- Generates the .version file in the shared framework -->
  <Target Name="GenerateSharedFxVersionsFile">
    <ItemGroup>
      <VersionLines Include="$(RepositoryCommit)" />
      <VersionLines Include="$(PackageVersion)" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(OutputPath).version"
      Lines="@(VersionLines)"
      Overwrite="true" />
  </Target>

  <!-- Generates the .deps.json file for a shared framework. -->
  <Target Name="GenerateSharedFxDependencyFile"
          Inputs="$(PublishDepsFilePath);$(ProjectAssetsFile);$(MSBuildAllProjects)"
          Outputs="$(SharedFxDepsFilePath)">
    <ProcessSharedFrameworkDeps
      FrameworkName="$(SharedFxName)"
      AssetsFilePath="$(ProjectAssetsFile)"
      DepsFilePath="$(PublishDepsFilePath)"
      OutputPath="$(SharedFxDepsFilePath)"
      Runtime="$(BaseRuntimeIdentifier)" />
  </Target>

  <!-- Optimizes shared framework output -->
  <Target Name="OptimizeOutput" DependsOnTargets="$(OptimizeOutputDependsOn)">
    <Message Importance="High" Text="$(SharedFxName) (fx: $(RuntimeIdentifier)) -> $(OutputPath)" />
  </Target>

  <!-- Prepare the project to run crossgen. -->
  <Target Name="PrepareForCrossGen" DependsOnTargets="RunResolvePackageDependencies;RunResolvePublishAssemblies">

    <MakeDir Directories="$(CrossGenToolDir)" />
    <PropertyGroup>
      <RuntimePackageName>Microsoft.NETCore.App</RuntimePackageName>
      <CrossGenTool>crossgen</CrossGenTool>
      <CrossGenTool Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(CrossGenTool).exe</CrossGenTool>
    </PropertyGroup>

    <ItemGroup>
      <RuntimePackage Include="@(PackageDefinitions)" Condition="$([System.String]::new('%(PackageDefinitions.Name)').Contains('runtime')) AND $([System.String]::new('%(PackageDefinitions.Name)').Contains('$(RuntimePackageName)'))" />
    </ItemGroup>

    <Error Text="Could not identify the crossgen package for $(RuntimeIdentifier)" Condition="@(RuntimePackage->Count()) == 0" />

    <ItemGroup>
      <RuntimePackageFiles Include="%(RuntimePackage.ResolvedPath)\runtimes\**\*" />
      <CrossGenToolFile Include="%(RuntimePackage.ResolvedPath)\**\$(CrossGenTool)" />
    </ItemGroup>

    <!-- Create tool directory with crossgen executable and runtime assemblies -->
    <Copy SourceFiles="@(RuntimePackageFiles);@(CrossGenToolFile)" DestinationFolder="$(CrossGenToolDir)"/>

    <ItemGroup>
      <ClrJitAssembly Include="$(CrossGenToolDir)\**\$(LibPrefix)clrjit$(LibExtension)" />
    </ItemGroup>

    <Error Text="Expected to resolve a single runtime package but instead resolved @(RuntimePackage->Count()) with identities %(RuntimePackage.Identity)" Condition="'@(RuntimePackage->Count())' != 1" />
    <Error Text="Could not find crossgen in %(RuntimePackage.ResolvedPath)" Condition="@(CrossGenToolFile->Count()) == 0" />
    <Error Text="Expected to resolve a single clr jit assembly but instead resolved @(ClrJitAssembly->Count()) with identities %(ClrJitAssembly.Identity)" Condition="'@(ClrJitAssembly->Count())' != 1" />

    <ItemGroup>
      <IgnoredAssemblies Include="@(ResolvedAssembliesToPublish)" Condition="'%(AssetType)' == 'native' OR '%(AssetType)' == 'resources'" />
      <_AppRuntimeAssemblies Include="@(ResolvedAssembliesToPublish)" Condition="'%(AssetType)' == 'runtime'">
        <SymbolsPackageFilename>%(PackageName).%(PackageVersion).symbols.nupkg</SymbolsPackageFilename>
        <PortablePDB>%(RootDir)%(Directory)%(Filename).pdb</PortablePDB>
      </_AppRuntimeAssemblies>
      <OtherAssemblies Include="@(ResolvedAssembliesToPublish)" Exclude="@(IgnoredAssemblies);@(ResolvedAssembliesToPublish)" />
      <_AssembliesToCrossgen Include="$(PublishDir)**\*.dll" />
    </ItemGroup>

    <RepoTasks.ResolveSymbolsRecursivePath Symbols="@(_AppRuntimeAssemblies)">
      <Output TaskParameter="Symbols" ItemName="AppRuntimeAssemblies" />
    </RepoTasks.ResolveSymbolsRecursivePath>

    <Error Text="Unaccounted shared framework assemblies found: @(OtherAssemblies). Assemblies must be included as runtime assemblies or marked as ignored." Condition="'@(OtherAssemblies)' != ''" />

    <!-- Compute the intersection of crossgen candidates and native/resources assemblies as the set of assemblies to skip crossgen -->
    <CreateItem Include="@(_AssembliesToCrossgen)" Condition="'%(Filename)' != ''and '@(IgnoredAssemblies)' != ''">
      <Output TaskParameter="Include" ItemName="AssembliesToRemove"/>
    </CreateItem>

    <!-- Resolve list of assemblies to crossgen -->
    <ItemGroup>
      <AssembliesToCrossgen Include="@(_AssembliesToCrossgen)">
        <Source>%(FullPath)</Source>
        <Rsp>$(IntermediateOutputPath)%(RecursiveDir)%(Filename).rsp</Rsp>
        <SymbolsRsp>$(IntermediateOutputPath)%(RecursiveDir)%(Filename).symbols.rsp</SymbolsRsp>
        <SymbolsOutputPath>$(IntermediateOutputPath)%(RecursiveDir)%(Filename).ni.pdb</SymbolsOutputPath>
        <Destination>$(OutputPath)%(RecursiveDir)%(Filename)%(Extension)</Destination>
        <Symbols>$(OutputPath)%(RecursiveDir)</Symbols>
      </AssembliesToCrossgen>
      <AssembliesToCrossgen Remove="@(AssembliesToRemove)" />
    </ItemGroup>

    <Copy SourceFiles="@(IgnoredAssemblies)" DestinationFiles="@(IgnoredAssemblies->'$(OutputPath)%(DestinationSubPath)')" />

    <!-- Compute the intersection of runtime assemblies and assemblies to crossgen to resolve the set of portablePDBs to publish -->
    <CreateItem Include="@(AppRuntimeAssemblies)" Condition="'%(Filename)' != ''and '@(AssembliesToCrossgen)' != ''">
      <Output TaskParameter="Include" ItemName="AppPortablePDBsToPublish"/>
    </CreateItem>
  </Target>

  <!--
    Run the crossgen tool.
    This uses .rsp files to get around OS limitations in the maximum number of characters that can be passed in on command-line.
  -->
  <Target Name="CrossGenAssemblies"
    DependsOnTargets="PrepareForCrossGen;ResolveReferences"
    Inputs="@(AssembliesToCrossgen)"
    Outputs="%(AssembliesToCrossgen.Destination)">

    <ItemGroup>
      <!-- These are the paths used by crossgen to find assemblies that are expected to exist at runtime in the shared frameworks. -->
      <_PlatformAssemblyPaths Remove="@(_PlatformAssemblyPaths)" />
      <_PlatformAssemblyPaths Include="$(CrossGenToolDir)" />
      <_PlatformAssemblyPaths Include="$(PublishDir)" />
      <_PlatformAssemblyPaths Include="$([System.IO.Path]::GetDirectoryName(%(_ResolvedFrameworkProjectReferencePaths.Identity)))" Condition="'%(_ResolvedFrameworkProjectReferencePaths.Identity)' != ''" />
    </ItemGroup>

    <PropertyGroup>
      <PlatformAssemblyPaths>@(_PlatformAssemblyPaths->Distinct(), '$(PathSeparator)')</PlatformAssemblyPaths>
    </PropertyGroup>

    <ItemGroup>
      <CrossGenArgs Include="-nologo" />
      <CrossGenArgs Include="-readytorun" />
      <CrossGenArgs Include="-in %(AssembliesToCrossgen.Source)" />
      <CrossGenArgs Include="-out %(AssembliesToCrossgen.Destination)" />
      <CrossGenArgs Include="-platform_assemblies_paths $(PlatformAssemblyPaths)" />
      <CrossGenArgs Include="-JITPath %(ClrJitAssembly.FullPath)" />
    </ItemGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(AssembliesToCrossgen.Rsp)'))" />
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(AssembliesToCrossgen.Destination)'))" />
    <WriteLinesToFile File="%(AssembliesToCrossgen.Rsp)" Lines="@(CrossGenArgs)" Overwrite="true" />

    <Copy Condition="'$(CrossGenSharedFx)' == 'false'"
          SourceFiles="%(AssembliesToCrossgen.Source)"
          DestinationFiles="%(AssembliesToCrossgen.Destination)" />
    <Exec Condition="'$(CrossGenSharedFx)' != 'false'"
          Command="$(CrossGenToolDir)$(CrossGenTool) @%(AssembliesToCrossgen.Rsp)"
          EnvironmentVariables="COMPlus_PartialNGen=0"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Normal" />
  </Target>

  <Target Name="CrossGenSymbols"
    DependsOnTargets="CrossGenAssemblies"
    Inputs="@(AssembliesToCrossgen)"
    Outputs="%(AssembliesToCrossgen.SymbolsOutputPath)">
    <PropertyGroup>
      <CrossGenSymbolsType>CreatePerfMap</CrossGenSymbolsType>
      <CrossGenSymbolsType Condition="'$(OS)' == 'Windows_NT'">CreatePDB</CrossGenSymbolsType>
    </PropertyGroup>

    <ItemGroup>
      <CrossGenSymbolsArgs Include="-nologo" />
      <CrossGenSymbolsArgs Include="-readytorun" />
      <CrossGenSymbolsArgs Include="-platform_assemblies_paths $(PlatformAssemblyPaths)" />
      <CrossGenSymbolsArgs Include="-$(CrossGenSymbolsType)" />
      <CrossGenSymbolsArgs Include="%(AssembliesToCrossgen.Symbols)" />
      <CrossGenSymbolsArgs Include="%(AssembliesToCrossgen.Destination)" />
    </ItemGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(AssembliesToCrossgen.Symbols)'))" />
    <WriteLinesToFile File="%(AssembliesToCrossgen.SymbolsRsp)" Lines="@(CrossGenSymbolsArgs)" Overwrite="true" />

    <Exec Command="$(CrossGenToolDir)$(CrossGenTool) @%(AssembliesToCrossgen.SymbolsRsp)"
          EnvironmentVariables="COMPlus_PartialNGen=0"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="Normal" />
  </Target>
</Project>
