<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <UsingTask AssemblyFile="tools\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.SubmitCodeSignJob" />
    <UsingTask AssemblyFile="tools\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.WaitForCodeSignJobs" />
    <UsingTask AssemblyFile="tools\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.PoliCheck" />
    <UsingTask AssemblyFile="tools\Microsoft.Web.MsBuildTasks.dll" TaskName="Microsoft.Web.MsBuildTasks.RegexReplace" />

    <Import Project="tools\dnx.settings.targets" />
    <Import Project="tools\QERM.targets" />

    <Target Name="Build" DependsOnTargets="CopyUnsignedPackages;BinScope;VerifySignatures" />

    <Target Name="Clean">
        <RemoveDir Directories="$(KBinPath);$(IntermediateOutputPath);$(UnsignedBinariesPath)" />
    </Target>

    <Target Name="Rebuild" DependsOnTargets="Clean;Build">

    </Target>

    <Target Name="FindLatestDropShare">
        <FindLatestDrop RootPath="$(RootDrop)" SubFolder="build">
            <Output TaskParameter="LatestPath" PropertyName="DropSource"/>
        </FindLatestDrop>

        <FindLatestDrop RootPath="$(dnvmRootDrop)" SubFolder="">
            <Output TaskParameter="LatestPath" PropertyName="dnvmDropSource"/>
        </FindLatestDrop>

        <PropertyGroup>
            <SymbolPackagePath>$(DropSource)..\symbols\</SymbolPackagePath>
        </PropertyGroup>

        <Message Text="$(DropSource)" />
    </Target>

    <Target Name="CopyAndExtractUnsignedPackages" DependsOnTargets="FindLatestDropShare;$(Clean)">
        <MakeDir Directories="$(OutputPath)" />
        <Copy SourceFiles="$(DropSource)..\commit" DestinationFolder="$(OutputPath)" />

        <!-- dnvm doesn't have a package so copy all the scripts and then replace the dnvm.ps1 file with the signed copy. -->
        <ItemGroup>
            <dnvmFiles Include="$(dnvmDropSource)\*.*" />
        </ItemGroup>
        <Copy SourceFiles="@(dnvmFiles)" DestinationFolder="$(OutputPath)dnvm" />

        <ItemGroup>
            <UnsignedPackages
                Include="$(DropSource)**\CultureInfoGenerator*.nupkg;
                         $(DropSource)**\EntityFramework*.nupkg;
                         $(DropSource)**\Microsoft.Data.Sqlite*.nupkg;
                         $(DropSource)**\Kestrel*.nupkg;
                         $(DropSource)**\dnx*.nupkg;
                         $(DropSource)**\KoreBuild*.nupkg;
                         $(DropSource)**\Microsoft.AspNet*.nupkg;
                         $(DropSource)**\Microsoft.Framework*.nupkg;
                         $(DropSource)**\Microsoft.Net*.nupkg;
                         $(DropSource)**\NuGet.*.nupkg;
                         $(DropSourcE)**\SecretManager.*.nupkg;
                         $(DropSource)**\StyleCop.KRules*.nupkg"
            />
            <SymbolPackages
                Include="$(SymbolPackagePath)**\CultureInfoGenerator*.nupkg;
                         $(SymbolPackagePath)**\EntityFramework*.nupkg;
                         $(SymbolPackagePath)**\Microsoft.Data.Sqlite*.nupkg;
                         $(SymbolPackagePath)**\Kestrel*.nupkg;
                         $(SymbolPackagePath)**\KoreBuild*.nupkg;
                         $(SymbolPackagePath)**\dnx*.nupkg;
                         $(SymbolPackagePath)**\Microsoft.AspNet*.nupkg;
                         $(SymbolPackagePath)**\Microsoft.Framework*.nupkg;
                         $(SymbolPackagePath)**\Microsoft.Net*.nupkg;
                         $(SymbolPackagePath)**\SecretManager.*.nupkg;
                         $(DropSource)**\NuGet.*.nupkg"
            />
        </ItemGroup>

        <Message Text="%(UnsignedPackages.Identity)" Importance="low" />

        <Exec Command="$(DNXToolsPath)7za.exe x -y -scsUTF-8 -o@(UnsignedPackages->'$(UnsignedPackagesPath)%(Filename)') %(UnsignedPackages.Identity)" />
        <Exec Command="$(DNXToolsPath)7za.exe x -y -scsUTF-8 -o@(SymbolPackages->'$(UnsignedSymbolPackagesPath)%(Filename)') %(SymbolPackages.Identity)" />

        <RenameEncodedFolders RootDirectory="$(UnsignedPackagesPath)" />

        <!-- Delete metadata -->
        <RemoveDir Directories="@(UnsignedPackages->'%(UnsignedPackagesPath)%(Filename)\_rels')" />
        <Delete Files="@(UnsignedPackages->'%(UnsignedPackagesPath)%(Filename)\[Content_Types].xml')" />
    </Target>

    <Target Name="PrepareFilesForSigning" DependsOnTargets="CopyAndExtractUnsignedPackages">
        <!-- Flatten the file names -->
        <ItemGroup>
            <_UnsignedPackageBinaries
                Include="$(UnsignedPackagesPath)**\AspNet.Loader*.dll;
                         $(UnsignedPackagesPath)**\CultureInfoGenerator*.dll;
                         $(UnsignedPackagesPath)**\EntityFramework*.dll;
                         $(UnsignedPackagesPath)**\EntityFramework.psd1;
                         $(UnsignedPackagesPath)**\EntityFramework.psm1;
                         $(UnsignedPackagesPath)**\EntityFramework*\**\init.ps1;
                         $(UnsignedPackagesPath)**\EntityFramework*\**\install.ps1;
                         $(UnsignedPackagesPath)**\Microsoft.Data.Sqlite*.dll;
                         $(UnsignedPackagesPath)**\Kestrel*.dll;
                         $(UnsignedPackagesPath)**\dnx*.dll;
                         $(UnsignedPackagesPath)**\Microsoft.AspNet*.dll;
                         $(UnsignedPackagesPath)**\Microsoft.Framework*.dll;                         
                         $(UnsignedPackagesPath)**\Microsoft.Net*.dll;
                         $(UnsignedPackagesPath)**\NuGet.*.dll;
                         $(UnsignedPackagesPath)**\SecretManager.dll;
                         $(UnsignedPackagesPath)**\signalrclient.dll;
                         $(UnsignedPackagesPath)**\StyleCop.KRules*.dll;
                         $(UnsignedPackagesPath)**\dnx*.exe"
            />

            <UnsignedPackageBinaries Include="@(_UnsignedPackageBinaries)">
                <!-- Flattened file for signing -->
                <UnsignedFlatFileName>$(UnsignedBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '__'))</UnsignedFlatFileName>
                <SignedFlatFileName>$(SignedBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '__'))</SignedFlatFileName>
            </UnsignedPackageBinaries>

            <PackageBinariesToSign Include="%(UnsignedPackageBinaries.UnsignedFlatFileName)" />

            <dnvmBinariesToSign Include="$(OutputPath)dnvm\dnvm.ps1" />
        </ItemGroup>

        <Copy SourceFiles="@(UnsignedPackageBinaries)" DestinationFiles="@(UnsignedPackageBinaries->'%(UnsignedFlatFileName)')" SkipUnchangedFiles="true" />
    </Target>

    <Target Name="SignFiles" DependsOnTargets="PrepareFilesForSigning">
        <RemoveDir Directories="$(CodeSignScriptsPath)" />
        <MakeDir Directories="$(CodeSignScriptsPath)" />

        <ItemGroup>
            <BinariesToSign Include="@(PackageBinariesToSign)">
                <CopyScript>ProjectKBinariesAuthentiCode400.bat</CopyScript>
                <CopyScriptTargetPath>$(SignedOutputPath)</CopyScriptTargetPath>
            </BinariesToSign>
        </ItemGroup>

        <ItemGroup>
            <BinariesToSign Include="@(dnvmBinariesToSign)">
                <CopyScript>dnvmAuthentiCode400.bat</CopyScript>
                <CopyScriptTargetPath>$(SignedOutputPath)dnvm</CopyScriptTargetPath>
            </BinariesToSign>
        </ItemGroup>

        <SubmitCodeSignJob
            Approvers="$(CodeSignApprovers)"
            Certificates="%(Certificates)"
            CopyScript="$(CodeSignScriptsPath)\%(CopyScript)"
            CopyScriptRemoveTargetFolder="false"
            CopyScriptTargetPath="%(CopyScriptTargetPath)"
            Description="%(Description)"
            DisplayName="%(DisplayName)"
            DisplayUrl="%(Url)"
            Files="@(BinariesToSign)"
            GenerateCopyScript="true"
            Poll="false"
            SSL="true"
            Test="$(TestCodeSign)">
            <Output TaskParameter="JobNumber" ItemName="CodeSignJobNumbers" />
        </SubmitCodeSignJob>

        <WaitForCodeSignJobs JobNumbers="@(CodeSignJobNumbers)" Test="$(TestCodeSign)" />

        <Exec Command="$(CodeSignScriptsPath)\%(BinariesToSign.CopyScript)" />
    </Target>

    <Target Name="ReplaceUnsignedFiles" DependsOnTargets="SignFiles">
        <Copy SourceFiles="@(UnsignedPackageBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(UnsignedPackageBinaries->'%(FullPath)')" />
    </Target>

    <Target Name="UpdateLicenseURLs" DependsOnTargets="SignFiles">
        <ItemGroup>
            <NuSpecEULA Include="$(UnsignedPackagesPath)**\CultureInfoGenerator*.nuspec;
                                 $(UnsignedPackagesPath)**\EntityFramework*.nuspec;
                                 $(UnsignedPackagesPath)**\Microsoft.Data.Sqlite*.nuspec;
                                 $(UnsignedPackagesPath)**\Kestrel*.nuspec;
                                 $(UnsignedPackagesPath)**\dnvm.*.nuspec;
                                 $(UnsignedPackagesPath)**\KoreBuild*.nuspec;
                                 $(UnsignedPackagesPath)**\dnx*.nuspec;
                                 $(UnsignedPackagesPath)**\Microsoft.AspNet*.nuspec;
                                 $(UnsignedPackagesPath)**\Microsoft.Framework.*.nuspec;
                                 $(UnsignedPackagesPath)**\Microsoft.Net.*.nuspec;
                                 $(UnsignedPackagesPath)**\NuGet.*.nuspec;
                                 $(UnsignedPackagesPath)**\SecretManager.*.nuspec;
                                 $(UnsignedPackagesPath)**\StyleCop.KRules*.nuspec"/>
        </ItemGroup>

        <MSBuild Projects="dnx.msbuild" Properties="NuSpecFileToUpdate=%(NuSpecEULA.Identity);Sign=$(Sign);TestCodeSign=$(TestCodeSign);Configuration=$(Configuration)"
                 Targets="AddOrUpdateRequiredNuspecFields"/>
    </Target>

    <Target Name="AddOrUpdateRequiredNuspecFields">
        <Message Text="Checking required NUSPEC fields in $(NuSpecFileToUpdate)..." />

        <FixRequiredNuSpecInfo
            NuSpec="$(NuSpecFileToUpdate)"
        />

    </Target>

    <Target Name="RebuildPackages" DependsOnTargets="ReplaceUnsignedFiles;UpdateLicenseURLs">
        <MakeDir Directories="$(PackagesOutputPath)" />

        <ItemGroup>
            <NuSpec Include="$(UnsignedPackagesPath)**\*.nuspec" />
        </ItemGroup>

        <MSBuild Projects="dnx.msbuild"
                 Properties="Configuration=$(Configuration);Sign=$(Sign);TestCodeSign=$(TestCodeSign);NuSpecFile=%(NuSpec.Identity);"
                 Targets="RebuildPackage"/>

        <!-- Capture packages that contain content we signed since that will become the list of items we will submit to BinScope -->
        <ItemGroup>
            <SignedPackages Include="$(PackagesOutputPath)**\*.nupkg" />
        </ItemGroup>
    </Target>

    <Target Name="RebuildPackage">
        <PropertyGroup>
            <WorkingDir>$([System.IO.Path]::GetDirectoryName($(NuSpecFile)))</WorkingDir>
            <PackageName>$([System.IO.Path]::GetFileName($(WorkingDir)))</PackageName>
        </PropertyGroup>

        <Exec Command="$(DNXToolsPath)7za.exe a -tzip -mx9 -r -y $(PackagesOutputPath)$(PackageName).nupkg *" WorkingDirectory="$(WorkingDir)" />
    </Target>

    <Target Name="CopyUnsignedPackages" DependsOnTargets="RebuildPackages">
        <ItemGroup>
            <AllPackages Include="$(DropSource)**\*.nupkg" />
        </ItemGroup>

        <Copy SourceFiles="@(AllPackages)" DestinationFolder="$(PackagesOutputPath)" Condition="!Exists('$(PackagesOutputPath)%(FileName)%(Extension)')" />
    </Target>

    <Target Name="VerifySignatures" DependsOnTargets="RebuildPackages" Condition="'$(VerifySignatures)' == 'true'">
        <RemoveDir Directories="$(CodeSignVerificationPath)" />
        <MakeDir Directories="$(CodeSignVerificationPath)" />

        <ItemGroup>
            <PackagesToVerify Include="$(PackagesOutputPath)**\*.nupkg" />
        </ItemGroup>

        <Exec Command="$(DNXToolsPath)SignVer.exe /z:$(DNXToolsPath) /s /m:$(DNXToolsPath)signver.manifest /i:%(PackagesToVerify.FullPath) /vl /l:$(CodeSignVerificationPath)%(PackagesToVerify.Filename).log "/>
    </Target>

    <Target Name="PoliCheck" DependsOnTargets="FindLatestDropShare">
        <ItemGroup>
            <PoliCheckPackages Include="$(SymbolPackagePath)CultureInfoGenerator.*.symbols.nupkg;
                                        $(SymbolPackagePath)EntityFramework.*.symbols.nupkg;
                                        $(SymbolPackagePath)Microsoft.Data.Sqlite.*.symbols.nupkg;
                                        $(SymbolPackagePath)Kestrel*.symbols.nupkg;
                                        $(SymbolPackagePath)dnx*.symbols.nupkg;
                                        $(SymbolPackagePath)Microsoft.AspNet*.symbols.nupkg;
                                        $(SymbolPackagePath)Microsoft.Framework*.symbols.nupkg;
                                        $(SymbolPackagePath)Microsoft.Net*.symbols.nupkg;
                                        $(SymbolPackagePath)NuGet.*.symbols.nupkg;
                                        $(SymbolPackagePath)SecretManager.*.symbols.nupkg;
                                        $(SymbolPackagePath)PageGenerator.*.symbols.nupkg;
                                        $(SymbolPackagePath)StyleCop.KRules*.symbols.nupkg"/>
        </ItemGroup>

        <Exec Command="$(DNXToolsPath)7za.exe x -y -scsUTF-8 -o@(PoliCheckPackages->'$(PoliCheckPath)%(Filename)') %(PoliCheckPackages.Identity)" />

        <RemoveDir Directories="@(PoliCheckPackages->'%(PoliCheckPath)%(Filename)\_rels')" />
        <Delete Files="@(PoliCheckPackages->'%(PoliCheckPath)%(Filename)\[Content_Types].xml')" />

        <!-- These are terms that originate in resource strings from some DLLs, as well as common terminology in the sources. -->
        <PropertyGroup>
            <Exclusions>
                component;components;countries;country;dans;execute;execution;foo;hang;hanging;invalid;patch;race
            </Exclusions>
        </PropertyGroup>

        <ItemGroup>
            <!-- List is sorted OridnalIgnoreCase -->
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.Net.Http.Server\WebListener.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Net.Http.Server\RequestProcessing\HttpReasonPhrase.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\MonsterContext`.cs">
                <term>420</term>
                <Justification>HTTP response code</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.Framework.WebEncoders\UnicodeEncoderBase.cs">
                <term>a hole</term>
                <Justification>valid context</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.Framework.WebEncoders.Core\UnicodeRanges.generated.cs;
								    $(PoliCheckPath)**\Microsoft.Framework.WebEncoders.Core.dll;
									$(PoliCheckPath)**\Microsoft.Framework.WebEncoders.Core.xml">
                <term>Bengali</term>
                <Justification>Font reference</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Localization\Internal\CultureInfoList.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.Globalization.CultureInfoCache\CultureInfoList.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>BS</term>
                <Justification>Culture info</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Diagnostics\Views\WelcomePage.cs">
                <term>butt</term>
                <Justification>not our code, jquery scripts embedded in .cs file</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>capital</term>
                <Justification>Data from Northwind database</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>cracker</term>
                <Justification>Data from Northwind database</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Authentication.Cookies\Infrastructure\ICookieManager.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Net.Http.Server\RequestProcessing\BoundaryType.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Net.Http.Server\RequestProcessing\Response.cs;
                                    $(PoliCheckPath)**\Microsoft.AspNet.Authentication.Cookies.dll;
                                    $(PoliCheckPath)**\Microsoft.AspNet.Authentication.Cookies.xml">
                <term>chunking</term>
                <Justification>Used to describe network chunks</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Identity\Rfc6238AuthenticationService.cs">
                <term>DT</term>
                <Justification>abbreviation for DateTime</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>DMZ</term>
                <Justification>base64 string</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Diagnostics\Views\WelcomePage.cs">
                <term>FE</term>
                <Justification>not our code, jquery scripts embedded in .cs file</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Diagnostics\Views\WelcomePage.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>FU</term>
                <Justification>not our code, jquery scripts embedded in .cs file; Base64 encoded strings</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\QueryTestBase.cs">
                <term>fubar</term>
                <Justification>Temporary exclusion to pass the build.</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Localization\Internal\CultureInfoList.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.Globalization.CultureInfoCache\CultureInfoList.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>FY</term>
                <Justification>Culture info</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\NuGet.Packaging\PackageExtraction\PackagePathHelper.cs">
                <term>hack</term>
                <Justification>Temporary to unblock build.</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\ConcurrencyModel\ConcurrencyModelInitializer.cs">
                <term>ho</term>
                <Justification>Part of a name</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Security.Windows\Legacy\GlobalLog.cs">
                <term>hung</term>
                <Justification>refers to a stuck process/thread</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>lez</term>
                <Justification>part of a name, false positive</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.Framework.WebEncoders.Core\UnicodeRanges.generated.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.WebEncoders\CodePointFilters.cs;
                                    $(PoliCheckPath)**\Microsoft.Framework.WebEncoders.Core.dll;
                                    $(PoliCheckPath)**\Microsoft.Framework.WebEncoders.Core.xml">
                <term>Oriya</term>
                <Justification>Font reference</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>pedro</term>
                <Justification>Data from Northwind database</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\MonsterFixupTestBase.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\MonsterContext`.cs">
                <term>pig</term>
                <Justification>Acceptable within context</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.StaticFiles\FileExtensionContentTypeProvider.cs">
                <term>pot</term>
                <Justification>file extension - powerpoint</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>queen</term>
                <Justification>Northwind database sample values</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.Net.WebSockets\WebSocketBuffer.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\ConcurrencyModel\ConcurrencyModelInitializer.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\ConcurrencyModel\Driver.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\ConcurrencyModel\Team.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\OptimisticConcurrencyTestBase.cs;
                                    $(PoliCheckPath)**\EntityFramework.Core.FunctionalTests.dll">
                <term>races</term>
                <Justification>refers to race condition; property name</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.AspNet.Diagnostics\Views\WelcomePage.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Colors.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Program.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Building\BuildContext.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Building\BuildManager.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\ConsoleCommands\ListConsoleCommand.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Commands\AddCommand.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Commands\InstallCommand.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Commands\WrapCommand.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Install\InstallBuilder.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Install\InstallGlobalCommand.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Install\UninstallCommand.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\List\LibraryDependencyFlatRenderer.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Publish\PublishManager.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Restore\RestoreCommand.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Restore\NuGet\KpmPackageFolder.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Restore\NuGet\NuGetv2Feed.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Restore\NuGet\NuGetv3Feed.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Restore\NuGet\PackageFeed.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Restore\NuGet\PackageUtilities.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.PackageManager\Shims\ConsoleColor.cs;
                                    $(PoliCheckPath)**\Microsoft.Framework.PackageManager.dll">
                <term>Red</term>
                <Justification>Color constant name</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.Framework.Runtime\DependencyManagement\ProjectReferenceDependencyProvider.cs">
                <term>sucks</term>
                <Justification>expression of sadness</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\Microsoft.Framework.WebEncoders.Core\UnicodeRanges.generated.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.WebEncoders\CodePointFilters.cs;
                                    $(PoliCheckPath)**\Microsoft.Framework.WebEncoders.Core.dll;
                                    $(PoliCheckPath)**\Microsoft.Framework.WebEncoders.Core.xml">
                <term>Tibetan</term>
                <Justification>Font reference</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\ConcurrencyModel\ConcurrencyModelInitializer.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\ConcurrencyModel\Team.cs;
                                    $(PoliCheckPath)**\EntityFramework.Core.FunctionalTests.dll">
                <term>virgin</term>
                <Justification>Test data</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\AsyncQueryTestBase.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\QueryTestBase.cs;
                                    $(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs;
                                    $(PoliCheckPath)**\src\Microsoft.AspNet.Diagnostics\Views\WelcomePage.cs;
                                    $(PoliCheckPath)**\src\Microsoft.AspNet.Localization\Internal\CultureInfoList.cs;
                                    $(PoliCheckPath)**\src\Microsoft.Framework.Globalization.CultureInfoCache\CultureInfoList.cs">
                <term>UK</term>
                <Justification>text appears in base64 encoded string of an image; Culture info;Northwind Database</Justification>
            </SrcExclusions>
            <SrcExclusions Include="$(PoliCheckPath)**\src\EntityFramework.Core.FunctionalTests\TestModels\Northwind\NorthwindData.cs">
                <term>wang</term>
                <Justification>Data from Northwind database</Justification>
            </SrcExclusions>
        </ItemGroup>

        <PoliCheck
            FolderToScan="$(PoliCheckPath.TrimEnd('\'))"
            Severity="2"
            FailSeverity="2"
            ExcludeTerms="$(Exclusions)"
            ExcludeFiles=""
            DetailedExclusions="@(SrcExclusions)" />
    </Target>

    <Target Name="CopyNativePackageSymbols">
        <!-- Special cases for Native code that don't have symbol packages -->
        <ItemGroup>
            <NativePackages Include="$(PackagesOutputPath)**\Microsoft.AspNet.Loader.IIS.Interop.*.nupkg">
                <BasePath>$(DNXDropRoot)Helios\$(BUILD_BRANCH)\</BasePath>
                <RelativeBinPath>build\Microsoft.AspNet.Loader.IIS.Interop\bin</RelativeBinPath>
            </NativePackages>
        </ItemGroup>

        <Message Text="%(NativePackages.Identity)" />

        <MSBuild Projects="dnx.msbuild"
                 Properties="Configuration=$(Configuration);Sign=$(Sign);TestCodeSign=$(TestCodeSign);NativePackageSymbolsBasePath=%(NativePackages.BasePath);
                             NativePackageSymbolsRelativeBinPath=%(NativePackages.RelativeBinPath);NativePackage=%(NativePackages.Identity)"
                 Targets="LocateAndCopyNativeSymbolsUsingBuildNumber" />
    </Target>

    <Target Name="LocateAndCopyNativeSymbolsUsingBuildNumber">
        <GetBuildNumberFromPackageName PackagePath="$(NativePackage)">
            <Output TaskParameter="BuildNumber" PropertyName="NativePackageBuildNumber" />
        </GetBuildNumberFromPackageName>

        <PropertyGroup>
            <AdditionalNativeSymbolsPath>$(NativePackageSymbolsBasePath)$(NativePackageBuildNumber)\$(NativePackageSymbolsRelativeBinPath)\</AdditionalNativeSymbolsPath>
        </PropertyGroup>

        <Message Text="$(AdditionalNativeSymbolsPath)" />

        <ItemGroup>
            <NativeAssembliesAndSymbols Include="$(AdditionalNativeSymbolsPath)\**\*.pdb" />
            <NativeAssembliesAndSymbols Include="$(AdditionalNativeSymbolsPath)\**\*.dll" />
        </ItemGroup>

        <Message Text="$(UnsignedSymbolPackagesPath)%(NativeSymbols.Directory)" />

        <Copy SourceFiles="@(NativeAssembliesAndSymbols)" DestinationFiles="@(NativeAssembliesAndSymbols->'$(UnsignedSymbolPackagesPath)native\%(Directory)%(FileName)%(Extension)')" />
    </Target>

    <Target Name="BeforeBinScope" DependsOnTargets="RebuildPackages;CopyNativePackageSymbols" Condition="'$(Sign)' == 'Sign'">
        <ItemGroup>
            <SignedPackagesForBinScope Include="$(PackagesOutputPath)**\*.nupkg"
                                       Exclude="$(PackagesOutputPath)**\CoreCLR*.nupkg;
                                                $(PackagesOutputPath)**\dnx*.nupkg;
                                                $(PackagesOutputPath)**\Microsoft.CSharp*.nupkg;
                                                $(PackagesOutputPath)**\Microsoft.AspNet.Loader.IIS.Interop*.nupkg" />
        </ItemGroup>

        <Exec Command="$(DNXToolsPath)7za.exe x -y -scsUTF-8 -o@(SignedPackagesForBinScope->'$(BinScopePackagesPath)%(Filename)') %(SignedPackagesForBinScope.Identity)" />

        <ItemGroup>
            <BinScopeTargetFiles Include="$(BinScopePackagesPath)**\Microsoft*.dll" />
            <BinScopeTargetFiles Include="$(BinScopePackagesPath)**\Microsoft*.pdb" />
            <BinScopeTargetFiles Include="$(UnsignedSymbolPackagesPath)native\**\Microsoft*.dll" />
            <BinScopeTargetFiles Include="$(UnsignedSymbolPackagesPath)native\**\Microsoft*.pdb" />
        </ItemGroup>
    </Target>

    <Target Name="PushPackages">
        <MSBuild Projects="PushCoherence\PushCoherence.csproj" Properties="Configuration=$(Configuration)" />
        <Exec Command="PushCoherence\bin\$(Configuration)\PushCoherence.exe;NUGET_FEED=$(NUGET_FEED);APIKEY=$(APIKEY)" />
    </Target>

    <UsingTask TaskName="RenameEncodedFolders" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <RootDirectory ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Diagnostics" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Xml" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
            try
            {
                Log.LogMessage(MessageImportance.Normal, RootDirectory);
                
                foreach (var directory in Directory.EnumerateDirectories(RootDirectory, "*", SearchOption.AllDirectories))
                {
                    string unescapedDirectory = Uri.UnescapeDataString(directory);
                    Log.LogMessage(MessageImportance.Normal, unescapedDirectory);
                    if (!String.Equals(directory, unescapedDirectory))
                    {
                        Directory.Move(directory, unescapedDirectory);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
            }
            
            return !Log.HasLoggedErrors;
        ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="FixRequiredNuSpecInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <NuSpec ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Diagnostics" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Xml" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
            var LicenseUrl = "http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm";
            var IconUrl = "http://go.microsoft.com/fwlink/?LinkID=288859";
            var CopyrightText = "Copyright © Microsoft Corporation";
            var ProjectUrl = "http://www.asp.net/";

            try
            {
                var d = new XmlDocument();
                d.Load(NuSpec);

                // Grab the NuSpec namespace URI that's used in this NuSpec. We don't care which
                // schema it is, as long as we use whatever is there.
                var nuSpecNamespace = d.ChildNodes[1].NamespaceURI;

                // Find license URL tag
                var licenseUrlNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='licenseUrl']/text()");
                if (licenseUrlNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("licenseUrl", nuSpecNamespace);
                    var t = d.CreateTextNode(LicenseUrl);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing licenseUrl node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    licenseUrlNode.InnerText = LicenseUrl;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing licenseUrl node");
                }

                // Find requireLicenseAcceptance tag
                var requireLicenseAcceptanceNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='requireLicenseAcceptance']/text()");
                if (requireLicenseAcceptanceNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("requireLicenseAcceptance", nuSpecNamespace);
                    var t = d.CreateTextNode("true");
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing requireLicenseAcceptance node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    requireLicenseAcceptanceNode.InnerText = "true";
                    Log.LogMessage(MessageImportance.Normal, "Updating existing requireLicenseAcceptance node");
                }

                // Find iconUrl tag
                var iconUrlNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='iconUrl']/text()");
                if (iconUrlNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("iconUrl", nuSpecNamespace);
                    var t = d.CreateTextNode(IconUrl);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing iconUrl node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    iconUrlNode.InnerText = IconUrl;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing iconUrl node");
                }

                // Find copyright tag
                var copyrightNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='copyright']/text()");
                if (copyrightNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("copyright", nuSpecNamespace);
                    var t = d.CreateTextNode(CopyrightText);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing copyright node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    copyrightNode.InnerText = CopyrightText;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing copyright node");
                }

                // Find projectUrl tag
                var projectUrlNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='projectUrl']/text()");
                if (projectUrlNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("projectUrl", nuSpecNamespace);
                    var t = d.CreateTextNode(ProjectUrl);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing projectUrl node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    projectUrlNode.InnerText = ProjectUrl;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing projectUrl node");
                }

                d.Save(NuSpec);
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
            }

            return !Log.HasLoggedErrors;
        ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="FindLatestDrop" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <RootPath ParameterType="System.String" Required="true" />
            <SubFolder ParameterType="System.String" Required="false" />
            <LatestPath ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Diagnostics" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Xml" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
            try
            {
                var dirs = Directory.GetDirectories(RootPath);
                int i;
                var buildDirs = from d in dirs
                                where Int32.TryParse(Path.GetFileName(d), out i)
                                select Convert.ToInt32(Path.GetFileName(d));

                var latestDirValue = buildDirs.OrderByDescending(o => o).First();
                SubFolder = SubFolder ?? String.Empty;
                LatestPath = Path.Combine(RootPath, Convert.ToString(latestDirValue), SubFolder)+"\\";
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
            }
            
            return !Log.HasLoggedErrors;
        ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="GetBuildNumberFromPackageName" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <PackagePath ParameterType="System.String" Required="true" />
            <BuildNumber ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Diagnostics" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Xml" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
            try
            {
                string packageName = Path.GetFileNameWithoutExtension(PackagePath);
                string[] packageNameParts = packageName.Split('-');
                BuildNumber = (packageNameParts[packageNameParts.Length - 1]).TrimStart('0');
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
            }
            
            return !Log.HasLoggedErrors;
        ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
