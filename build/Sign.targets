<Project>
  <PropertyGroup>
    <SignDependsOn>
      PrepareFilesForSigning;
      SignFiles;
      RebuildOobArchives;
      RebuildPackages;
      SignNupkgs;
      RebuildVSIXes;
      RebuildSharedFxs;
      RepackMPacks;
    </SignDependsOn>
  </PropertyGroup>

  <Target Name="Sign" DependsOnTargets="$(SignDependsOn)" />

  <Target Name="PrepareFilesForSigning">
    <ItemGroup>
      <ThirdPartyBinaries Include="
        $(UnsignedPackagesPath)**\MsgPack.dll;
        $(UnsignedPackagesPath)**\MessagePack.dll;
        $(UnsignedPackagesPath)**\newtonsoft*.dll;
        $(UnsignedPackagesPath)**\remotion*.dll;
        $(UnsignedPackagesPath)**\sqlitepclraw*.dll;
        $(UnsignedPackagesPath)**\e_sqlite3.dll;
        $(UnsignedPackagesPath)**\stackexchange*.dll;
        $(UnsignedPackagesPath)**\System.Interactive.Async.dll" />

      <PackageBinaries Include="
        $(UnsignedPackagesPath)**\*.dll;
        $(UnsignedPackagesPath)**\*.exe;
        $(UnsignedPackagesPath)**\*.psd1;
        $(UnsignedPackagesPath)**\*.psm1;
        $(UnsignedPackagesPath)**\*.ps1;"
        Exclude="@(ThirdPartyBinaries)" />

      <VSIXBinaries Include="$(UnsignedVSIXPath)**\*.dll" />

      <OobArchiveBinaries Include="$(UnsignedOobArchivePath)**\*.dll" />

      <ThirdPartyBinaries Include="
        $(UnsignedSharedFxPath)**\MsgPack.dll;
        $(UnsignedSharedFxPath)**\MessagePack.dll;
        $(UnsignedSharedFxPath)**\newtonsoft*.dll;
        $(UnsignedSharedFxPath)**\remotion*.dll;
        $(UnsignedSharedFxPath)**\sqlitepclraw*.dll;
        $(UnsignedSharedFxPath)**\e_sqlite3.dll;
        $(UnsignedSharedFxPath)**\stackexchange*.dll;
        $(UnsignedSharedFxPath)**\System.Interactive.Async.dll" />

      <SharedFxBinaries Include="
        $(UnsignedSharedFxPath)**\microsoft.*.dll;
        $(UnsignedSharedFxPath)**\system.*.dll;
        $(UnsignedSharedFxPath)**\libuv.dll;
        $(UnsignedSharedFxPath)**\aspnetcorev2_inprocess.dll;
        $(UnsignedSharedFxPath)**\sni.dll"
        Exclude="@(ThirdPartyBinaries)"/>

      <UnaccountedSharedFxBinaries Include="$(UnsignedSharedFxPath)**\*.dll" Exclude="@(SharedFxBinaries);@(ThirdPartyBinaries)"/>

      <MPackBinaries Include="$(UnsignedMPacksPath)**\*.dll" />
    </ItemGroup>


    <Error Text="Additional binaries found in the aspnetcore shared framework which are not marked for signing: @(UnaccountedSharedFxBinaries)" Condition="'@(UnaccountedSharedFxBinaries)'!=''"/>
  </Target>

  <Target Name="SignFiles">
    <ItemGroup>
      <AspNetCoreBinaries Include="
        @(PackageBinaries);
        @(VSIXBinaries);
        @(OobArchiveBinaries);
        @(MPackBinaries);
        @(SharedFxBinaries);" />
    </ItemGroup>

    <ItemGroup>
      <_SignProject Remove="@(_SignProject)" />
      <_SignProject Include="$(MSBuildProjectFullPath)" Condition ="'@(AspNetCoreBinaries)' != ''">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(MicrosoftAuthentiCodeSha2);
          JobName=AspNetCoreBinaries;
          Files=@(AspNetCoreBinaries)
        </AdditionalProperties>
      </_SignProject>

      <_SignProject Include="$(MSBuildProjectFullPath)" Condition="'@(ThirdPartyBinaries)'!=''" >
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(Microsoft3rdPartyAppComponentDual);
          JobName=ThirdPartyBinaries;
          Files=@(ThirdPartyBinaries)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" BuildInParallel="true" Condition="'@(_SignProject)' != '' AND '$(SignType)'=='real' " />
  </Target>

  <Target Name="RebuildPackages">
    <MakeDir Directories="$(PackageOutputPath)" />

    <ItemGroup>
      <NuSpec Include="$(UnsignedPackagesPath)**\*.nuspec" />
    </ItemGroup>

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(NuSpec.RootDir)%(NuSpec.Directory);OutputDir=$(UnsignedPackagesWithSignedBinariesPath);Extension=.nupkg"
      Condition="'@(NuSpec)'!=''" />
  </Target>

  <Target Name="SignNupkgs">
    <PropertyGroup>
      <_ManifestOutputPath>$(IntermediateDir)esrp-package-sign.json</_ManifestOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <_UnsignedNupkgs Include="$(UnsignedPackagesWithSignedBinariesPath)**\*.nupkg" />
    </ItemGroup>

    <Microsoft.Build.OOB.ESRP.CreateSignManifests Condition="'@(_UnsignedNupkgs)'!=''"
       ApplicationId="$(ESRPApplicationId)"
       DestinationRootDirectory="$(PackagesOutputPath)"
       Files="@(_UnsignedNupkgs)"
       ManifestOutputPath="$(_ManifestOutputPath)"
       KeyCodes="$(MicrosoftNuGet)">
      <Output TaskParameter="AuthJson" PropertyName="AuthJson" />
      <Output TaskParameter="PolicyJson" PropertyName="PolicyJson" />
      <Output TaskParameter="InputJson" PropertyName="InputJson" />
      <Output TaskParameter="OutputJson" PropertyName="OutputJson" />
    </Microsoft.Build.OOB.ESRP.CreateSignManifests>

    <Exec
      Command="$(ESRPClientToolPath) sign -a $(AuthJson) -p $(PolicyJson) -i $(InputJson) -o $(OutputJson) -l progress -f $(LogOutputDir)sign-packages.log"
      Condition="'$(SignType)'=='real' AND '$(LocalBuild)'!='true'" />

    <Copy Condition="'$(SignType)'!='real' OR '$(LocalBuild)'=='true'"
      SourceFiles="@(_UnsignedNupkgs)"
      DestinationFolder="$(PackagesOutputPath)" />
  </Target>

  <!-- Repacks MPacks with their signed binaries -->
  <Target Name="RepackMPacks">
    <MakeDir Directories="$(SignedMPacksOutputPath)" />

    <ItemGroup>
      <MPackDirectories Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedMPacksPath)&quot;))" Condition="Exists($(UnsignedMPacksPath))" />
    </ItemGroup>

    <MSBuild Condition=" '@(MPackDirectories)' != '' "
      Projects="$(MSBuildProjectFullPath)"
      Properties="MPackDirectory=%(MPackDirectories.Identity);"
      Targets="_RepackMPack"/>
  </Target>

  <Target Name="_RepackMPack">
    <PropertyGroup>
      <MPackName>$([System.IO.Path]::GetFileName($(MPackDirectory)))</MPackName>
      <OutputFile>$(SignedMPacksOutputPath)$(MPackName).mpack</OutputFile>
    </PropertyGroup>

    <ItemGroup>
      <Files Include="$(MPackDirectory)\*" />
    </ItemGroup>

    <ZipArchive Condition="'@(Files)' != ''"
      File="$(OutputFile)"
      SourceFiles="@(Files)"
      WorkingDirectory="$(MPackDirectory)" />
  </Target>

  <!-- Repacks and signs VSIXes -->
  <Target Name="RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
    </ItemGroup>
    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Targets="_RebuildVSIXes"
        Condition="'@(_VSIXManifest)'!=''" />
  </Target>

  <Target Name="_RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
      <VSIXManifest Include="@(_VSIXManifest)">
        <VSIXName>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))))</VSIXName>
        <VSIXDir>$([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))\</VSIXDir>
      </VSIXManifest>
    </ItemGroup>

    <MSBuild Condition="'@(VSIXManifest)' != ''"
        Projects="$(MSBuildProjectFullPath)"
        Targets="ZipFile"
        Properties="ZipRoot=%(VSIXManifest.VSIXDir);OutputDir=$(UnsignedVSIXWithSignedBinariesPath);Extension=.vsix" />

    <ItemGroup>
      <VSIXToSign Include="$(UnsignedVSIXWithSignedBinariesPath)**\*.vsix" />

      <_SignProject Remove="@(_SignProject)" />
      <_SignProject Include="$(MSBuildProjectFullPath)" Condition="'@(VSIXToSign)' != ''">
        <AdditionalProperties>
          Certificate=$(MicrosoftOpc2);
          JobName=AspNetCoreVSIX;
          LocalBuild=$(LocalBuild);
          Files=@(VSIXToSign)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" Condition="'@(_SignProject)' != '' AND '$(SignType)'=='real' " />

    <MakeDir Directories="$(SignedVSIXPath)%(VSIXToSign.FileName)\" />

    <Copy Condition="'@(VSIXToSign)' != ''"
      SourceFiles="%(VSIXToSign.FullPath);$(DepsDirectory)build\%(VSIXToSign.FileName).json"
      DestinationFolder="$(SignedVSIXPath)%(VSIXToSign.FileName)\" />
  </Target>

  <Target Name="SubmitCodeSign">
    <PropertyGroup>
      <SigningStagingDir>$(IntermediateDir)u\$(JobName)\</SigningStagingDir>
      <SignOutputDir>$(IntermediateDir)s\$(JobName)\</SignOutputDir>
      <_ManifestOutputPath>$(IntermediateDir)esrpconfig\$(JobName)\</_ManifestOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <_FilesPath Include="$(Files)" />
    </ItemGroup>

    <RepoTasks.GetFileHash Files="@(_FilesPath)">
      <Output TaskParameter="Items" ItemName="_FilesWithHash"/>
    </RepoTasks.GetFileHash>

    <ItemGroup>
      <_FilesToSign Include="$(SigningStagingDir)%(_FilesWithHash.FileHash)%(_FilesWithHash.Extension)">
        <OriginalFilePath>%(_FilesWithHash.Identity)</OriginalFilePath>
      </_FilesToSign>
    </ItemGroup>

    <Message Text="Executing code sign job $(JobName).%0A  @(_FilesPath->Count()) files%0A  @(_FilesToSign->Distinct()->Count()) unique files" Importance="High" />
    <Message Text="Go grab a coffee. This is going to take a while..." Importance="High" Condition="@(_FilesToSign->Distinct()->Count()) > 300" />

    <Copy SourceFiles="@(_FilesToSign->Distinct()->'%(OriginalFilePath)')" DestinationFiles="%(_FilesToSign.Identity)" />

    <Microsoft.Build.OOB.ESRP.CreateSignManifests
       ApplicationId="$(ESRPApplicationId)"
       DestinationRootDirectory="$(SignOutputDir)"
       Files="@(_FilesToSign->Distinct())"
       ManifestOutputPath="$(_ManifestOutputPath)"
       KeyCodes="$(Certificate)">
      <Output TaskParameter="AuthJson" PropertyName="AuthJson" />
      <Output TaskParameter="PolicyJson" PropertyName="PolicyJson" />
      <Output TaskParameter="InputJson" PropertyName="InputJson" />
      <Output TaskParameter="OutputJson" PropertyName="OutputJson" />
    </Microsoft.Build.OOB.ESRP.CreateSignManifests>

    <Exec
      Command="$(ESRPClientToolPath) sign -a $(AuthJson) -p $(PolicyJson) -i $(InputJson) -o $(OutputJson) -l progress -f $(LogOutputDir)sign-$(JobName).log"
      Condition="'$(SignType)'=='real' AND '$(LocalBuild)'!='true'" />

    <Message Text="Finished code sign job $(JobName)" Importance="High" />

    <Copy SourceFiles="@(_FilesToSign)" DestinationFolder="$(SignOutputDir)" Condition="'$(LocalBuild)'=='true'" />

    <Copy SourceFiles="$(SignOutputDir)%(_FilesToSign.FileName)%(Extension)" DestinationFiles="%(OriginalFilePath)" />
  </Target>

  <!-- Repacks aspnetcore shared framework -->
  <Target Name="RebuildSharedFxs">
    <MakeDir Directories="$(SharedFxOutputPath)" />

    <ItemGroup>
      <SharedFxFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedSharedFxPath)&quot;))" Condition="Exists($(UnsignedSharedFxPath))" />
    </ItemGroup>

    <MSBuild Condition="'@(SharedFxFiles)' != ''"
      Projects="$(MSBuildProjectFullPath)"
      Properties="SharedFxFile=%(SharedFxFiles.Identity);OutDir=$(SharedFxOutputPath)"
      Targets="RebuildSharedFx"/>
  </Target>

  <Target Name="RebuildSharedFx">
    <PropertyGroup>
      <WorkingDir>$(SharedFxFile)</WorkingDir>
      <SharedFxName>$([System.IO.Path]::GetFileName($(SharedFxFile)))</SharedFxName>
      <CreateTarGzip Condition="$(SharedFxName.Contains('osx')) OR $(SharedFxName.Contains('linux')) OR $(SharedFxName.Contains('alpine'))">true</CreateTarGzip>
      <OutputFile>$(OutDir)$(SharedFxName)</OutputFile>

      <OutputFile Condition="'$(CreateTarGzip)'=='true'">$(OutputFile).tar.gz</OutputFile>
      <OutputFile Condition="'$(CreateTarGzip)'!='true'">$(OutputFile).zip</OutputFile>
    </PropertyGroup>
    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />

    <Delete Files="$(OutputFile)" Condition="Exists('$(OutputFile)')" />

    <!-- see https://sevenzip.osdn.jp/chm/cmdline/ -->
    <Exec Command="&quot;$(ZipExePath)&quot; a -tzip -mx9 -r -y &quot;$(OutputFile)&quot; * > nul"
      WorkingDirectory="$(WorkingDir)"
      Condition="'$(CreateTarGzip)' != 'true'" />

    <Exec Command="&quot;$(ZipExePath)&quot; a -ttar -r -y -so tmp.tar * | &quot;$(ZipExePath)&quot; a -y -si &quot;$(OutputFile)&quot;"
       WorkingDirectory="$(WorkingDir)"
       Condition="'$(CreateTarGzip)' == 'true'" />
  </Target>

  <Target Name="RebuildOobArchives">
    <MakeDir Directories="$(SignedOobArchivePath)" />

    <ItemGroup>
      <OobArchiveFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedOobArchivePath)&quot;))" Condition="Exists('$(UnsignedOobArchivePath)')" />
    </ItemGroup>

    <MSBuild Condition="'@(OobArchiveFiles)' != ''"
        Projects="$(MSBuildProjectFullPath)"
        Targets="ZipFile"
        Properties="ZipRoot=$([MSBuild]::NormalizeDirectory(%(OobArchiveFiles.FullPath)));OutputDir=$(SignedOobArchivePath);Extension=.zip" />
  </Target>

  <Target Name="ZipFile">
    <PropertyGroup>
      <FileName>$([System.IO.Path]::GetFileName($(ZipRoot.Trim('\'))))</FileName>
      <OutputFile>$(OutputDir)$(FileName)$(Extension)</OutputFile>
    </PropertyGroup>

    <ItemGroup>
      <Files Include="$(ZipRoot)**\*" />
    </ItemGroup>

    <ZipArchive
      File="$(OutputFile)"
      SourceFiles="@(Files)"
      WorkingDirectory="$(ZipRoot)" />
  </Target>

</Project>
