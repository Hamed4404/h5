<Project>
  <UsingTask AssemblyFile="$(RepositoryRoot)tools\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.SubmitCodeSignJob" />
  <UsingTask AssemblyFile="$(RepositoryRoot)tools\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.WaitForCodeSignJobs" />

  <Target Name="CopyAndExtractUnsignedPackages" DependsOnTargets="Clean">
    <MakeDir Directories="$(OutputPath)" />
    <MakeDir Directories="$(CoherenceDestinationDir)" />
    <MakeDir Directories="$(CoherencePackageCacheDestinationDir)" />
    <MakeDir Directories="$(CoherenceDestinationDir)vsix" />

    <ItemGroup>
      <VSIXPaths Include="$(COHERENCE_DROP_LOCATION)\build\*.vsix" />
      <PackageCaches Include="$(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.zip;$(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.tar.gz" />
      <PackageCachesArtifacts
        Include="$(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.nuspec;
                $(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.txt" />
    </ItemGroup>

    <Error Text="COHERENCE_DROP_LOCATION is not specified. This requires a path like \\aspnetci\drops\Coherence\{build-number}"
        Condition=" '$(COHERENCE_DROP_LOCATION)' == '' " />
    <Error Text="COHERENCE_PACKAGECACHE_DROP_LOCATION is not specified. This requires a path like \\aspnetci\drops\Coherence-PackageCache\{build-number}"
        Condition=" '$(COHERENCE_PACKAGECACHE_DROP_LOCATION)' == '' " />

    <Exec Command="(robocopy /NJH /NJS /NP /NS /NDL /NP /E /MIR /MT $(COHERENCE_DROP_LOCATION) $(CoherenceDestinationDir) /XD build packages-expanded) ^&amp; IF %ERRORLEVEL% LEQ 3 exit 0" />

    <Copy SourceFiles="@(VSIXPaths)" DestinationFolder="$(CoherenceDestinationDir)vsix" />
    <Copy
        SourceFiles="$([System.IO.Path]::ChangeExtension(%(VSIXPaths.FullPath), '.json'))"
        DestinationFolder="$(CoherenceDestinationDir)vsix" />
    <Copy SourceFiles="@(PackageCaches)" DestinationFolder="$(CoherencePackageCacheDestinationDir)" />
    <Copy SourceFiles="@(PackageCachesArtifacts)" DestinationFolder="$(CoherencePackageCacheDestinationDir)" />

    <ItemGroup>
      <UnsignedPackages Include="$(CoherenceDestinationDir)ship\*.nupkg" />
      <UnsignedOobPackages Include="$(CoherenceDestinationDir)shipoob\*.nupkg" />
      <UnsignedSymbolPackages Include="$(CoherenceDestinationDir)symbols\Microsoft.Data.Sqlite*.nupkg" />
      <UnsignedVSIX Include="$(CoherenceDestinationDir)vsix\*.vsix" />
      <UnsignedPackageCaches Include="$(CoherencePackageCacheDestinationDir)Build.RS.*.zip" />
    </ItemGroup>

    <Error Text="No packages found for signing." Condition="'@(UnsignedPackages)'==''" />
    <Error Text="No OOB packages found for signing." Condition="'@(UnsignedOobPackages)'==''" />
    <Error Text="No VSIX found for signing." Condition="'@(UnsignedVSIX)'==''" />
    <Error Text="No package cache found for signing." Condition="'@(UnsignedPackageCaches)'==''" />

    <PropertyGroup>
      <UnzipCommand>$(ToolsPath)7za.exe x -y -scsUTF-8</UnzipCommand>
    </PropertyGroup>

    <Exec Command="$(UnzipCommand) -o@(UnsignedPackages->'$(UnsignedPackagesPath)%(Filename)') %(UnsignedPackages.Identity) > nul" />
    <Exec Command="$(UnzipCommand) -o@(UnsignedOobPackages->'$(UnsignedOobPackagesPath)%(Filename)') %(UnsignedOobPackages.Identity) > nul" />
    <Exec Command="$(UnzipCommand) -o@(UnsignedSymbolPackages->'$(UnsignedSymbolPackagesPath)%(Filename)') %(UnsignedSymbolPackages.Identity) > nul"
        Condition=" '@(UnsignedSymbolPackages)' != '' " />
    <Exec Command="$(UnzipCommand) -o@(UnsignedVSIX->'$(UnsignedVSIXPath)%(Filename)') %(UnsignedVSIX.Identity) > nul" />
    <Exec Command="$(UnzipCommand) -o@(UnsignedPackageCaches->'$(UnsignedPackageCachePath)%(Filename)') %(UnsignedPackageCaches.Identity) > nul" />

    <Message Text="MSBuildPath:'$(MSBuildToolsPath)''" />

    <RenameEncodedFolders RootDirectory="$(UnsignedPackagesPath)" />
    <RenameEncodedFolders RootDirectory="$(UnsignedOobPackagesPath)" />
  </Target>

  <Target Name="PrepareFilesForSigning" DependsOnTargets="CopyAndExtractUnsignedPackages">
    <!-- Flatten the file names -->
    <ItemGroup>
      <_UnsignedBinaries
          Include="$(UnsignedPackagesPath)**\*.dll;
                    $(UnsignedPackagesPath)**\*.exe;
                    $(UnsignedPackagesPath)**\*.psd1;
                    $(UnsignedPackagesPath)**\*.psm1;
                    $(UnsignedPackagesPath)**\*.ps1;"
            />

      <_UnsignedOobBinaries
          Include="$(UnsignedOobPackagesPath)**\*.dll;
                    $(UnsignedOobPackagesPath)**\*.exe;
                    $(UnsignedOobPackagesPath)**\*.psd1;
                    $(UnsignedOobPackagesPath)**\*.psm1;
                    $(UnsignedOobPackagesPath)**\*.ps1;"
            />

      <_UnsignedVSIXBinaries Include="$(UnsignedVSIXPath)**\*.dll" />

      <_UnsignedPackageCacheBinaries
          Include="$(UnsignedPackageCachePath)**\netcoreapp2.0\microsoft.*\**\*.dll;
                    $(UnsignedPackageCachePath)**\netcoreapp2.0\system.*\**\*.dll;
                    $(UnsignedPackageCachePath)**\netcoreapp2.0\windowsazure.*\**\*.dll" />
      <_UnsignedPackageCacheThirdPartyBinaries
          Include="$(UnsignedPackageCachePath)**\netcoreapp2.0\newtonsoft*\**\*.dll;
                    $(UnsignedPackageCachePath)**\netcoreapp2.0\remotion*\**\*.dll;
                    $(UnsignedPackageCachePath)**\netcoreapp2.0\serilog*\**\*.dll;
                    $(UnsignedPackageCachePath)**\netcoreapp2.0\sqlitepclraw*\**\*.dll;
                    $(UnsignedPackageCachePath)**\netcoreapp2.0\stackexchange*\**\*.dll" />

      <UnsignedBinaries Include="@(_UnsignedBinaries)">
        <!-- Flattened file for signing -->
        <UnsignedFlatFileName>$(UnsignedBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</UnsignedFlatFileName>
        <SignedFlatFileName>$(SignedBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</SignedFlatFileName>
        <!-- Replaces "PackageName\lib\tfm" with "PackageName.symbols\lib\tfm" -->
        <SymbolsBinaryFullName>$(UnsignedSymbolPackagesPath)$([System.String]::new('%(RecursiveDir)').Substring(0, $([System.String]::new('%(RecursiveDir)').IndexOf('\')))).symbols$([System.String]::new('%(RecursiveDir)').Substring($([System.String]::new('%(RecursiveDir)').IndexOf('\'))))%(Filename)%(Extension)</SymbolsBinaryFullName>
      </UnsignedBinaries>

      <UnsignedOobBinaries Include="@(_UnsignedOobBinaries)">
        <!-- Flattened file for signing -->
        <UnsignedFlatFileName>$(UnsignedOobBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</UnsignedFlatFileName>
        <SignedFlatFileName>$(SignedOobBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</SignedFlatFileName>
        <!-- Replaces "PackageName\lib\tfm" with "PackageName.symbols\lib\tfm" -->
        <SymbolsBinaryFullName>$(UnsignedOobSymbolPackagesPath)$([System.String]::new('%(RecursiveDir)').Substring(0, $([System.String]::new('%(RecursiveDir)').IndexOf('\')))).symbols$([System.String]::new('%(RecursiveDir)').Substring($([System.String]::new('%(RecursiveDir)').IndexOf('\'))))%(Filename)%(Extension)</SymbolsBinaryFullName>
      </UnsignedOobBinaries>

      <UnsignedVSIXBinaries Include="@(_UnsignedVSIXBinaries)">
        <!-- Flattened file for signing -->
        <UnsignedFlatFileName>$(UnsignedVSIXPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</UnsignedFlatFileName>
        <SignedFlatFileName>$(SignedBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</SignedFlatFileName>
      </UnsignedVSIXBinaries>

      <UnsignedPackageCacheBinaries Include="@(_UnsignedPackageCacheBinaries)">
        <!-- Flattened file for signing -->
        <UnsignedFlatFileName>$(UnsignedPackageCachePath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</UnsignedFlatFileName>
        <SignedFlatFileName>$(SignedBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</SignedFlatFileName>
      </UnsignedPackageCacheBinaries>

      <UnsignedPackageCacheThirdPartyBinaries Include="@(_UnsignedPackageCacheThirdPartyBinaries)">
        <!-- Flattened file for signing -->
        <UnsignedFlatFileName>$(UnsignedPackageCachePath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</UnsignedFlatFileName>
        <SignedFlatFileName>$(SignedBinariesPath)$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '_'))</SignedFlatFileName>
      </UnsignedPackageCacheThirdPartyBinaries>

      <PackageBinariesToSign Include="%(UnsignedBinaries.UnsignedFlatFileName)" />
      <PackageOobBinariesToSign Include="%(UnsignedOobBinaries.UnsignedFlatFileName)" />
      <PackageCacheBinariesToSign Include="%(UnsignedPackageCacheBinaries.UnsignedFlatFileName)" />
      <PackageCacheThirdPartyBinariesToSign Include="%(UnsignedPackageCacheThirdPartyBinaries.UnsignedFlatFileName)" />
      <VSIXBinariesToSign Include="%(UnsignedVSIXBinaries.UnsignedFlatFileName)" />
    </ItemGroup>

    <Copy SourceFiles="@(UnsignedBinaries)" DestinationFiles="@(UnsignedBinaries->'%(UnsignedFlatFileName)')" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(UnsignedOobBinaries)" DestinationFiles="@(UnsignedOobBinaries->'%(UnsignedFlatFileName)')" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(UnsignedPackageCacheBinaries)" DestinationFiles="@(UnsignedPackageCacheBinaries->'%(UnsignedFlatFileName)')" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(UnsignedPackageCacheThirdPartyBinaries)" DestinationFiles="@(UnsignedPackageCacheThirdPartyBinaries->'%(UnsignedFlatFileName)')" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(UnsignedVSIXBinaries)" DestinationFiles="@(UnsignedVSIXBinaries->'%(UnsignedFlatFileName)')" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="SignFiles" DependsOnTargets="PrepareFilesForSigning">
    <RemoveDir Directories="$(CodeSignScriptsPath)" />
    <MakeDir Directories="$(CodeSignScriptsPath)" />

    <ItemGroup>
      <BinariesToSign Include="
                @(PackageBinariesToSign);
                @(PackageOobBinariesToSign);
                @(VSIXBinariesToSign)" />
    </ItemGroup>

    <SubmitCodeSignJob
        Approvers="$(CodeSignApprovers)"
        Certificates="%(Certificates)"
        Description="%(Description)"
        DisplayName="%(DisplayName)"
        DisplayUrl="%(Url)"
        Files="@(BinariesToSign)"
        GenerateCopyScript="false"
        Poll="false"
        SSL="true"
        CreateTestJob="$(CodeSignCreateTestJob)"
        Test="$(TestCodeSign)">
      <Output TaskParameter="JobNumber" ItemName="CodeSignJobNumbers" />
      <Output TaskParameter="CompletionPath" PropertyName="CodeSignCompletionPath" />
    </SubmitCodeSignJob>

    <WaitForCodeSignJobs JobNumbers="@(CodeSignJobNumbers)" Test="$(TestCodeSign)" />

    <Exec Command="robocopy /NJH /NJS /NP /NS /NDL /NP /E /MT $(CodeSignCompletionPath) $(SignedOutputPath)
            IF %ERRORLEVEL% LEQ 3 exit 0" />
  </Target>

  <Target Name="SignPackageCache" DependsOnTargets="PrepareFilesForSigning">
    <RemoveDir Directories="$(CodeSignScriptsPath)" />
    <MakeDir Directories="$(CodeSignScriptsPath)" />

    <SubmitCodeSignJob
        Approvers="$(CodeSignApprovers)"
        Certificates="%(Certificates)"
        Description="%(Description)"
        DisplayName="%(DisplayName)"
        DisplayUrl="%(Url)"
        Files="@(PackageCacheBinariesToSign)"
        GenerateCopyScript="false"
        Poll="false"
        SSL="true"
        CreateTestJob="$(CodeSignCreateTestJob)"
        Test="$(TestCodeSign)">
      <Output TaskParameter="JobNumber" ItemName="CodeSignJobNumbers" />
      <Output TaskParameter="CompletionPath" PropertyName="CodeSignCompletionPath" />
    </SubmitCodeSignJob>

    <WaitForCodeSignJobs JobNumbers="@(CodeSignJobNumbers)" Test="$(TestCodeSign)" />

    <Exec Command="robocopy /NJH /NJS /NP /NS /NDL /NP /E /MT $(CodeSignCompletionPath) $(SignedOutputPath)
            IF %ERRORLEVEL% LEQ 3 exit 0" />

    <SubmitCodeSignJob
        Approvers="$(CodeSignApprovers)"
        Certificates="%(Certificates)"
        Description="%(Description)"
        DisplayName="%(DisplayName)"
        DisplayUrl="%(Url)"
        Files="@(PackageCacheThirdPartyBinariesToSign)"
        GenerateCopyScript="false"
        Poll="false"
        SSL="true"
        CreateTestJob="$(CodeSignCreateTestJob)"
        Test="$(TestCodeSign)">
      <Output TaskParameter="JobNumber" ItemName="ThirdPartyCodeSignJobNumbers" />
      <Output TaskParameter="CompletionPath" PropertyName="ThirdPartyCodeSignCompletionPath" />
    </SubmitCodeSignJob>

    <WaitForCodeSignJobs JobNumbers="@(ThirdPartyCodeSignJobNumbers)" Test="$(TestCodeSign)" />

    <Exec Command="robocopy /NJH /NJS /NP /NS /NDL /NP /E /MT $(ThirdPartyCodeSignCompletionPath) $(SignedOutputPath)
            IF %ERRORLEVEL% LEQ 3 exit 0" />
  </Target>

  <Target Name="ReplaceUnsignedFiles" DependsOnTargets="SignFiles;SignPackageCache">
    <Copy SourceFiles="@(UnsignedBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(UnsignedBinaries->'%(FullPath)')" />
    <Copy SourceFiles="@(UnsignedOobBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(UnsignedOobBinaries->'%(FullPath)')" />
    <Copy SourceFiles="@(UnsignedVSIXBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(UnsignedVSIXBinaries->'%(FullPath)')" />
    <Copy SourceFiles="@(UnsignedPackageCacheBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(UnsignedPackageCacheBinaries->'%(FullPath)')" />
    <Copy SourceFiles="@(UnsignedPackageCacheThirdPartyBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(UnsignedPackageCacheThirdPartyBinaries->'%(FullPath)')" />
    <ItemGroup>
      <!-- only overwrite existing unsigned binaries in the symbols packages. We don't create symbols-packages for all packages. -->
      <_SignedSymbolsBinaries Include="@(UnsignedBinaries)" Condition="Exists('%(SymbolsBinaryFullName)')" />
    </ItemGroup>
    <Copy SourceFiles="@(_SignedSymbolsBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(_SignedSymbolsBinaries->'%(SymbolsBinaryFullName)')" />
  </Target>

  <PropertyGroup>
    <SignDependsOn>
      ReplaceUnsignedFiles;
      RebuildPackages;
      RebuildVSIXes;
      RebuildPackageCaches;
      RunVSDrop;
    </SignDependsOn>
  </PropertyGroup>

  <Target Name="TestSign" DependsOnTargets="SetupTestSign;Sign" />

  <Target Name="SetupTestSign">
    <PropertyGroup>
      <CodeSignCreateTestJob>false</CodeSignCreateTestJob>
      <TestCodeSign>true</TestCodeSign>
      <COHERENCE_DROP_LOCATION Condition="'$(COHERENCE_DROP_LOCATION)'==''">\\aspnetci\drops\Coherence\dev\Latest</COHERENCE_DROP_LOCATION>
      <COHERENCE_PACKAGECACHE_DROP_LOCATION Condition="'$(COHERENCE_PACKAGECACHE_DROP_LOCATION)'==''">\\aspnetci\drops\Coherence-PackageCache\dev\Latest</COHERENCE_PACKAGECACHE_DROP_LOCATION>
    </PropertyGroup>
  </Target>

  <Target Name="Sign" DependsOnTargets="$(SignDependsOn)" />

  <Target Name="RebuildPackages">
    <MakeDir Directories="$(PackageOutputPath)" />

    <ItemGroup>
      <NuSpec Include="$(UnsignedPackagesPath)**\*.nuspec" />
      <NuSpecOob Include="$(UnsignedOobPackagesPath)**\*.nuspec" />
      <SymbolsNuSpec Include="$(UnsignedSymbolPackagesPath)**\*.nuspec" />
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Properties="Configuration=$(Configuration);Sign=$(Sign);TestCodeSign=$(TestCodeSign);NuSpecFile=%(NuSpec.Identity);OutDir=$(PackagesOutputPath)"
        Targets="RebuildPackage"/>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Properties="Configuration=$(Configuration);Sign=$(Sign);TestCodeSign=$(TestCodeSign);NuSpecFile=%(NuSpecOob.Identity);OutDir=$(PackagesOobOutputPath)"
        Targets="RebuildPackage"/>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Properties="Configuration=$(Configuration);Sign=$(Sign);TestCodeSign=$(TestCodeSign);NuSpecFile=%(SymbolsNuSpec.Identity);OutDir=$(SymbolsOutputPath)"
        Targets="RebuildPackage"/>

    <!-- Capture packages that contain content we signed since that will become the list of items we will submit to BinScope -->
    <ItemGroup>
      <SignedPackages Include="$(PackagesOutputPath)**\*.nupkg" />
      <SignedSymbolsPackages Include="$(SymbolsOutputPath)**\*.nupkg" />
    </ItemGroup>
  </Target>

  <!-- Repacks and signs VSIXes -->
  <Target Name="RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
      <VSIXManifest Include="%(_VSIXManifest.FullPath)">
        <VSIXDirectory>$([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))</VSIXDirectory>
        <VSIXName>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))))</VSIXName>
      </VSIXManifest>
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Properties="
                Configuration=$(Configuration);
                Sign=$(Sign);
                TestCodeSign=$(TestCodeSign);
                VSIXManifest=%(VSIXManifest.Identity);
                VSIXDirectory=%(VSIXManifest.VSIXDirectory);
                OutDir=$(UnsignedVSIXWithSignedBinariesPath)"
        Targets="RepackVSIX"/>

    <ItemGroup>
      <VSIXToSign Include="$(UnsignedVSIXWithSignedBinariesPath)**\*.vsix" />
    </ItemGroup>

    <SubmitCodeSignJob
        Approvers="$(CodeSignApprovers)"
        Certificates="$(VSIXCodeSignCertificates)"
        Description="Signing AspNetCore VSIX"
        DisplayName="$(CodeSignDisplayName)"
        DisplayUrl="$(CodeSignUrl)"
        Files="@(VSIXToSign)"
        GenerateCopyScript="false"
        Poll="false"
        SSL="true"
        CreateTestJob="$(CodeSignCreateTestJob)"
        Test="$(TestCodeSign)">
      <Output TaskParameter="JobNumber" ItemName="CodeSignJobNumbers" />
      <Output TaskParameter="CompletionPath" PropertyName="CodeSignCompletionPath" />
    </SubmitCodeSignJob>

    <WaitForCodeSignJobs JobNumbers="@(CodeSignJobNumbers)" Test="$(TestCodeSign)" />

    <Exec Command="robocopy /NJH /NJS /NP /NS /NDL /NP /E /MIR /MT $(CodeSignCompletionPath) $(SignedVSIXPath)
            IF %ERRORLEVEL% LEQ 3 exit 0" />

    <Copy
        SourceFiles="$(CoherenceDestinationDir)vsix\%(VSIXManifest.VSIXName).json"
        DestinationFolder="$(SignedVSIXPath)" />
  </Target>

  <!-- Repacks PackageCache -->
  <Target Name="RebuildPackageCaches">
    <MakeDir Directories="$(PackageCacheOutputPath)" />

    <ItemGroup>
      <PackageCachesFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedPackageCachePath)&quot;))" />
      <PackageCacheNuspec Include="$(CoherencePackageCacheDestinationDir)*.nuspec" />
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Properties="Configuration=$(Configuration);Sign=$(Sign);TestCodeSign=$(TestCodeSign);PackageCacheFile=%(PackageCachesFiles.Identity);OutDir=$(PackageCacheOutputPath)"
        Targets="RebuildPackageCache"/>

    <!-- Create a Build.PackageStore-{version}.nupkg to push to internal feed -->
    <Copy SourceFiles="@(PackageCacheNuspec)" DestinationFolder="$(PackageCacheOutputPath)" />
    <ReadLinesFromFile File="$(CoherencePackageCacheDestinationDir)version.txt">
      <Output TaskParameter="Lines" PropertyName="VersionNumber" />
    </ReadLinesFromFile>

    <ItemGroup>
      <RuntimeStoreSymbols Include="$(CoherencePackageCacheDestinationDir)Build.Symbols.*" />
    </ItemGroup>

    <Copy SourceFiles="@(RuntimeStoreSymbols)" DestinationFolder="$(PackageCacheOutputPath)" />

    <Exec Command="&quot;$(ToolsPath)NuGet.exe&quot; pack &quot;@(PackageCacheNuspec)&quot; -Version $(VersionNumber) -OutputDirectory &quot;$(PackageCacheOutputPath) &quot; -BasePath &quot;$(PackageCacheOutputPath) &quot;"/>
  </Target>

  <Target Name="RebuildPackage">
    <PropertyGroup>
      <WorkingDir>$([System.IO.Path]::GetDirectoryName($(NuSpecFile)))</WorkingDir>
      <PackageName>$([System.IO.Path]::GetFileName($(WorkingDir)))</PackageName>
    </PropertyGroup>
    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />
    <Exec Command="&quot;$(ToolsPath)7za.exe&quot; a -tzip -mx9 -r -y &quot;$(OutDir)$(PackageName).nupkg&quot; * > nul" WorkingDirectory="$(WorkingDir)" />
  </Target>

  <Target Name="RepackVSIX">
    <PropertyGroup>
      <VSIXName>$([System.IO.Path]::GetFileName($(VSIXDirectory)))</VSIXName>
    </PropertyGroup>

    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />
    <Exec Command="&quot;$(ToolsPath)7za.exe&quot; a -tzip -mx9 -r -y &quot;$(OutDir)$(VSIXName).vsix&quot;" WorkingDirectory="$(VSIXDirectory)" />
  </Target>

  <Target Name="RebuildPackageCache">
    <PropertyGroup>
      <WorkingDir>$(PackageCacheFile)</WorkingDir>
      <PackageCacheName>$([System.IO.Path]::GetFileName($(PackageCacheFile)))</PackageCacheName>
      <CreateTarGzip Condition="$(PackageCacheName.Contains('osx')) or $(PackageCacheName.Contains('linux'))">true</CreateTarGzip>
    </PropertyGroup>
    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />

    <!-- see https://sevenzip.osdn.jp/chm/cmdline/ -->
    <Exec Command="&quot;$(ToolsPath)7za.exe&quot; a -tzip -mx9 -r -y &quot;$(OutDir)$(PackageCacheName).zip&quot; * > nul"
      WorkingDirectory="$(WorkingDir)"
      Condition="'$(CreateTarGzip)' != 'true'" />

    <Exec Command="&quot;$(ToolsPath)7za.exe&quot; a -ttar -r -y -so tmp.tar * | &quot;$(ToolsPath)7za.exe&quot; a -si &quot;$(OutDir)$(PackageCacheName).tar.gz&quot;"
       WorkingDirectory="$(WorkingDir)"
       Condition="'$(CreateTarGzip)' == 'true'" />
  </Target>
</Project>