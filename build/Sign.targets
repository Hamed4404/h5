<Project>
  <PropertyGroup>
    <SignDependsOn>
      PrepareFilesForSigning;
      SignFiles;
      RebuildPackages;
      RebuildVSIXes;
      RebuildPackageCaches;
      CreateTimestampFreePackages
    </SignDependsOn>
  </PropertyGroup>

  <Target Name="Sign" DependsOnTargets="$(SignDependsOn)" />

  <Target Name="PrepareFilesForSigning">
    <ItemGroup>
      <PackageBinaries Include="
        $(UnsignedPackagesPath)**\*.dll;
        $(UnsignedPackagesPath)**\*.exe;
        $(UnsignedPackagesPath)**\*.psd1;
        $(UnsignedPackagesPath)**\*.psm1;
        $(UnsignedPackagesPath)**\*.ps1;" />

      <OobPackageBinaries Include="
        $(UnsignedOobPackagesPath)**\*.dll;
        $(UnsignedOobPackagesPath)**\*.exe;
        $(UnsignedOobPackagesPath)**\*.psd1;
        $(UnsignedOobPackagesPath)**\*.psm1;
        $(UnsignedOobPackagesPath)**\*.ps1;" />

      <VSIXBinaries Include="$(UnsignedVSIXPath)**\*.dll" />

      <PackageCacheBinaries Include="
        $(UnsignedPackageCachePath)**\netcoreapp2.0\microsoft.*\**\*.dll;
        $(UnsignedPackageCachePath)**\netcoreapp2.0\system.*\**\*.dll;
        $(UnsignedPackageCachePath)**\netcoreapp2.0\windowsazure.*\**\*.dll" />

      <PackageCacheThirdPartyBinaries Include="
        $(UnsignedPackageCachePath)**\netcoreapp2.0\newtonsoft*\**\*.dll;
        $(UnsignedPackageCachePath)**\netcoreapp2.0\remotion*\**\*.dll;
        $(UnsignedPackageCachePath)**\netcoreapp2.0\serilog*\**\*.dll;
        $(UnsignedPackageCachePath)**\netcoreapp2.0\sqlitepclraw*\**\*.dll;
        $(UnsignedPackageCachePath)**\netcoreapp2.0\stackexchange*\**\*.dll" />
    </ItemGroup>
  </Target>

  <Target Name="SignFiles">
    <ItemGroup>
      <AspNetCoreBinaries Include="
        @(PackageBinaries);
        @(OobPackageBinaries);
        @(VSIXBinaries)" />

      <_SignProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(BinaryCodeSignCertificate);
          JobName=AspNetCoreBinaries;
          Description=Signing AspNetCore binaries;
          Files=@(AspNetCoreBinaries)
        </AdditionalProperties>
      </_SignProject>

      <_SignProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(BinaryCodeSignCertificate);
          JobName=PackageCacheBinaries;
          Description=Signing AspNetCore Package Cache binaries;
          Files=@(PackageCacheBinaries)
        </AdditionalProperties>
      </_SignProject>

      <_SignProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(ThirdParthCodeSignCertificate);
          JobName=ThirdPartyBinaries;
          Description=Signing third party binaries;
          Files=@(PackageCacheThirdPartyBinaries)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="RebuildPackages">
    <MakeDir Directories="$(PackageOutputPath)" />

    <ItemGroup>
      <NuSpec Include="$(UnsignedPackagesPath)**\*.nuspec" />
      <NuSpecOob Include="$(UnsignedOobPackagesPath)**\*.nuspec" />
      <SymbolsNuSpec Include="$(UnsignedSymbolPackagesPath)**\*.nuspec" />

      <_ZipProjects
        Include="$(MSBuildProjectFullPath)"
        AdditionalProperties="ZipRoot=%(NuSpec.RootDir)%(NuSpec.Directory);OutputDir=$(PackagesOutputPath)" />
      <_ZipProjects
        Include="$(MSBuildProjectFullPath)"
        AdditionalProperties="ZipRoot=%(NuSpecOob.RootDir)%(NuSpecOob.Directory);OutputDir=$(PackagesOobOutputPath)" />
      <_ZipProjects
        Include="$(MSBuildProjectFullPath)"
        AdditionalProperties="ZipRoot=%(SymbolsNuSpec.RootDir)%(SymbolsNuSpec.Directory);OutputDir=$(SymbolsOutputPath)" />
    </ItemGroup>

    <MSBuild
      Projects="@(_ZipProjects)"
      Targets="ZipFile"
      BuildInParallel="$(BuildInParallel)"
      Properties="Extension=.nupkg" />
  </Target>

  <!-- Repacks and signs VSIXes -->
  <Target Name="RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
      <VSIXManifest Include="@(_VSIXManifest)">
        <VSIXName>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))))</VSIXName>
        <VSIXDir>$([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))\</VSIXDir>
      </VSIXManifest>
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Targets="ZipFile"
        Properties="ZipRoot=%(VSIXManifest.VSIXDir);OutputDir=$(UnsignedVSIXWithSignedBinariesPath);Extension=.vsix" />

    <ItemGroup>
      <VSIXToSign Include="$(UnsignedVSIXWithSignedBinariesPath)**\*.vsix" />

      <_SignProject Project="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          Certificate=$(VSIXCodeSignCertificate);
          JobName=RazorVSIX;
          LocalBuild=$(LocalBuild);
          Description=Signing Razor VSIX;
          Files=@(VSIXToSign)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" />

    <Copy
      SourceFiles="@(VSIXToSign);$(CoherenceDestinationDir)vsix\%(VSIXManifest.VSIXName).json"
      DestinationFolder="$(SignedVSIXPath)" />
  </Target>

  <Target Name="SubmitCodeSign">
    <ItemGroup>
      <_Approvers Include="$(CodeSignApprovers)" />
      <_Files Include="$(Files)" />

      <_ResponseFileLines Include="--approver=%(_Approvers.Identity)" />
      <_ResponseFileLines Include="--cert=$(Certificate)" />
      <_ResponseFileLines Include="--local-build" Condition="'$(LocalBuild)'=='true'" />
      <_ResponseFileLines Include="--description=$(Description)" />
      <_ResponseFileLines Include="--display-name=$(CodeSignDisplayName)" />
      <_ResponseFileLines Include="--display-url=$(CodeSignUrl)" />
      <_ResponseFileLines Include="-f=%(_Files.Identity)" />
    </ItemGroup>

    <PropertyGroup>
      <ResponseFilePath>$(IntermediateOutputPath)$(JobName).rsp</ResponseFilePath>
      <CodeSignExeOutputPath>$(RepositoryRoot)src\CodeSign\bin\$(Configuration)\net461\CodeSign.exe</CodeSignExeOutputPath>
    </PropertyGroup>

    <Message Text="Executing code sign job $(JobName)..." Importance="High" />

    <WriteLinesToFile
      File="$(ResponseFilePath)"
      Lines="@(_ResponseFileLines)"
      Overwrite="true" />

    <Exec Command="&quot;$(CodeSignExeOutputPath)&quot; @$(ResponseFilePath)" />
  </Target>

  <!-- Repacks PackageCache -->
  <Target Name="RebuildPackageCaches">
    <MakeDir Directories="$(PackageCacheOutputPath)" />

    <ItemGroup>
      <PackageCachesFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedPackageCachePath)&quot;))" />
      <PackageCacheNuspec Include="$(CoherencePackageCacheDestinationDir)*.nuspec" />
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Properties="PackageCacheFile=%(PackageCachesFiles.Identity);OutDir=$(PackageCacheOutputPath)"
        Targets="RebuildPackageCache"/>

    <!-- Create a Build.PackageStore-{version}.nupkg to push to internal feed -->
    <Copy SourceFiles="@(PackageCacheNuspec)" DestinationFolder="$(PackageCacheOutputPath)" />
    <ReadLinesFromFile File="$(CoherencePackageCacheDestinationDir)version.txt">
      <Output TaskParameter="Lines" PropertyName="VersionNumber" />
    </ReadLinesFromFile>

    <ItemGroup>
      <RuntimeStoreSymbols Include="$(CoherencePackageCacheDestinationDir)Build.Symbols.*" />
    </ItemGroup>

    <Copy SourceFiles="@(RuntimeStoreSymbols)" DestinationFolder="$(PackageCacheOutputPath)" />

    <Exec Command="&quot;$(ToolsPath)NuGet.exe&quot; pack &quot;@(PackageCacheNuspec)&quot; -Version $(VersionNumber) -OutputDirectory &quot;$(PackageCacheOutputPath) &quot; -BasePath &quot;$(PackageCacheOutputPath) &quot;"/>
  </Target>

  <Target Name="RebuildPackageCache">
    <PropertyGroup>
      <WorkingDir>$(PackageCacheFile)</WorkingDir>
      <PackageCacheName>$([System.IO.Path]::GetFileName($(PackageCacheFile)))</PackageCacheName>
      <CreateTarGzip Condition="$(PackageCacheName.Contains('osx')) or $(PackageCacheName.Contains('linux'))">true</CreateTarGzip>
      <OutputFile>$(OutDir)$(PackageCacheName)</OutputFile>

      <OutputFile  Condition="'$(CreateTarGzip)'=='true'">$(OutputFile).tar.gz</OutputFile>
      <OutputFile Condition="'$(CreateTarGzip)'!='true'">$(OutputFile).zip</OutputFile>
    </PropertyGroup>
    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />

    <Delete Files="$(OutputFile)" Condition="Exists('$(OutputFile)')" />

    <!-- see https://sevenzip.osdn.jp/chm/cmdline/ -->
    <Exec Command="&quot;$(ZipExePath)&quot; a -tzip -mx9 -r -y &quot;$(OutputFile)&quot; * > nul"
      WorkingDirectory="$(WorkingDir)"
      Condition="'$(CreateTarGzip)' != 'true'" />

    <Exec Command="&quot;$(ZipExePath)&quot; a -ttar -r -y -so tmp.tar * | &quot;$(ZipExePath)&quot; a -y -si &quot;$(OutputFile)&quot;"
       WorkingDirectory="$(WorkingDir)"
       Condition="'$(CreateTarGzip)' == 'true'" />
  </Target>

  <Target Name="CreateTimestampFreePackages">
    <PropertyGroup>
      <PackagesDir>$(ArtifactsDir)Signed\Packages\</PackagesDir>
      <PackagesNoTimestampDir>$(ArtifactsDir)Signed\Packages-NoTimeStamp\</PackagesNoTimestampDir>

      <OOBPackagesDir>$(ArtifactsDir)Signed\OobPackages\</OOBPackagesDir>
      <OOBPackagesNoTimestampDir>$(ArtifactsDir)Signed\OobPackages-NoTimeStamp\</OOBPackagesNoTimestampDir>
    </PropertyGroup>

    <ItemGroup>
      <PackagesWithTimeStamp Include="$(PackagesDir)*.nupkg" />
      <OOBPackagesWithTimeStamp Include="$(OOBPackagesDir)*.nupkg" />
    </ItemGroup>

    <MakeDir Directories="$(PackagesNoTimestampDir);$(OOBPackagesNoTimestampDir)" />

    <RepoTasks.CreateTimestampFreePackages
      PackagesWithTimeStamp="@(PackagesWithTimeStamp)"
      OutputDirectory="$(PackagesNoTimestampDir)" />

    <RepoTasks.CreateTimestampFreePackages
      PackagesWithTimeStamp="@(OOBPackagesWithTimeStamp)"
      OutputDirectory="$(OOBPackagesNoTimestampDir)" />

    <ItemGroup>
      <TimeStampFreeMetaPackage Include="$(TimestampFreePackagesOutputPath)Microsoft.AspNetCore.All.*.nupkg" />
      <TimeStampMetaPackage Include="$(PackagesDir)Microsoft.AspNetCore.All.*.nupkg" />
    </ItemGroup>

    <UnzipArchive
      File="%(TimeStampFreeMetaPackage.FullPath)"
      Destination="$(SignedAllMetapackagePath)%(TimeStampFreeMetaPackage.FileName)" />

    <ItemGroup>
      <TimeStampedManifestFiles Include="$(SignedAllMetapackagePath)**\aspnetcore-store-*.xml" />
    </ItemGroup>

    <PropertyGroup>
      <VersionToReplace>-$(BuildNumber)</VersionToReplace>
      <VersionReplacement>-final</VersionReplacement>
      <VersionToReplace Condition="$([System.String]::new('%(TimeStampMetaPackage.FileName)').EndsWith('-rtm-$(BuildNumber)'))">-rtm-$(BuildNumber)</VersionToReplace>
      <VersionReplacement Condition="$([System.String]::new('%(TimeStampMetaPackage.FileName)').EndsWith('-rtm-$(BuildNumber)'))"></VersionReplacement>
    </PropertyGroup>

    <Exec Command="powershell.exe -command &quot;(Get-Content %(TimeStampedManifestFiles.FullPath)).replace('$(VersionToReplace)','$(VersionReplacement)') | Set-Content %(TimeStampedManifestFiles.FullPath)&quot;"/>
    <Move SourceFiles="%(TimeStampedManifestFiles.FullPath)" DestinationFiles="$([System.String]::new('%(TimeStampedManifestFiles.FullPath)').Replace('$(VersionToReplace)', '$(VersionReplacement)'))" />

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=$(SignedAllMetapackagePath)%(TimeStampFreeMetaPackage.FileName)\;OutputDir=$(TimestampFreePackagesOutputPath)" />
  </Target>

  <Target Name="ZipFile">
    <PropertyGroup>
      <FileName>$([System.IO.Path]::GetFileName($(ZipRoot.Trim('\'))))</FileName>
      <OutputFile>$(OutputDir)$(FileName)$(Extension)</OutputFile>
    </PropertyGroup>

    <ItemGroup>
      <Files Include="$(ZipRoot)**\*" />
    </ItemGroup>

    <ZipArchive
      File="$(OutputFile)"
      SourceFiles="@(Files)"
      WorkingDirectory="$(ZipRoot)" />
  </Target>

</Project>
