<Project>
  <PropertyGroup>
    <SignDependsOn>
      PrepareFilesForSigning;
      SignFiles;
      RebuildPackages;
      RebuildVSIXes;
      RebuildRuntimeStores;
      CreateTimestampFreePackages;
      CreateTimestampFreeRuntimeStores
    </SignDependsOn>
  </PropertyGroup>

  <Target Name="Sign" DependsOnTargets="$(SignDependsOn)" />

  <Target Name="PrepareFilesForSigning">
    <ItemGroup>
      <PackageBinaries Include="
        $(UnsignedPackagesPath)**\*.dll;
        $(UnsignedPackagesPath)**\*.exe;
        $(UnsignedPackagesPath)**\*.psd1;
        $(UnsignedPackagesPath)**\*.psm1;
        $(UnsignedPackagesPath)**\*.ps1;" />

      <NoTimestampPackageBinaries Include="
        $(UnsignedNoTimestampPackagesPath)**\*.dll;
        $(UnsignedNoTimestampPackagesPath)**\*.exe;
        $(UnsignedNoTimestampPackagesPath)**\*.psd1;
        $(UnsignedNoTimestampPackagesPath)**\*.psm1;
        $(UnsignedNoTimestampPackagesPath)**\*.ps1;" />

      <OobPackageBinaries Include="
        $(UnsignedOobPackagesPath)**\*.dll;
        $(UnsignedOobPackagesPath)**\*.exe;
        $(UnsignedOobPackagesPath)**\*.psd1;
        $(UnsignedOobPackagesPath)**\*.psm1;
        $(UnsignedOobPackagesPath)**\*.ps1;" />

      <VSIXBinaries Include="$(UnsignedVSIXPath)**\*.dll" />

      <RuntimeStoreBinaries Include="
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\microsoft.*\**\*.dll;
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\system.*\**\*.dll;
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\windowsazure.*\**\*.dll" />

      <RuntimeStoreThirdPartyBinaries Include="
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\newtonsoft*\**\*.dll;
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\remotion*\**\*.dll;
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\serilog*\**\*.dll;
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\sqlitepclraw*\**\*.dll;
        $(UnsignedRuntimeStorePath)**\netcoreapp2.0\stackexchange*\**\*.dll" />

      <UnaccountedRuntimeStoreBinaries Include="$(UnsignedRuntimeStorePath)**\*.dll" Exclude="@(RuntimeStoreBinaries);@(RuntimeStoreThirdPartyBinaries)"/>
    </ItemGroup>

    <Error Text="Additional binaries found in the runtime store which are not marked for signing: @(UnaccountedRuntimeStoreBinaries)" Condition="'@(UnaccountedRuntimeStoreBinaries)'!=''"/>
  </Target>

  <Target Name="SignFiles">
    <ItemGroup>
      <AspNetCoreBinaries Include="
        @(PackageBinaries);
        @(NoTimestampPackageBinaries);
        @(OobPackageBinaries);
        @(VSIXBinaries)" />

      <_SignProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(BinaryCodeSignCertificate);
          JobName=AspNetCoreBinaries;
          Description=Signing AspNetCore binaries;
          Files=@(AspNetCoreBinaries)
        </AdditionalProperties>
      </_SignProject>

      <_SignProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(BinaryCodeSignCertificate);
          JobName=RuntimeStoreBinaries;
          Description=Signing AspNetCore Package Cache binaries;
          Files=@(RuntimeStoreBinaries)
        </AdditionalProperties>
      </_SignProject>

      <_SignProject Include="$(MSBuildProjectFullPath)" Condition="'@(RuntimeStoreThirdPartyBinaries)'!=''" >
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(ThirdParthCodeSignCertificate);
          JobName=ThirdPartyBinaries;
          Description=Signing third party binaries;
          Files=@(RuntimeStoreThirdPartyBinaries)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="RebuildPackages">
    <MakeDir Directories="$(PackageOutputPath)" />

    <ItemGroup>
      <NuSpec Include="$(UnsignedPackagesPath)**\*.nuspec" />
      <NuSpecNoTimestamp Include="$(UnsignedNoTimestampPackagesPath)**\*.nuspec" />
      <NuSpecOob Include="$(UnsignedOobPackagesPath)**\*.nuspec" />
      <SymbolsNuSpec Include="$(UnsignedSymbolPackagesPath)**\*.nuspec" />
    </ItemGroup>

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(NuSpec.RootDir)%(NuSpec.Directory);OutputDir=$(PackagesOutputPath);Extension=.nupkg"
      Condition="'@(NuSpec)'!=''" />
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(NuSpecNoTimestamp.RootDir)%(NuSpecNoTimestamp.Directory);OutputDir=$(IntermediatePackagesNoTimestampOutputPath);Extension=.nupkg"
      Condition="'@(NuSpecNoTimestamp)'!=''" />
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(NuSpecOob.RootDir)%(NuSpecOob.Directory);OutputDir=$(PackagesOobOutputPath);Extension=.nupkg"
      Condition="'@(NuSpecOob)'!=''" />
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(SymbolsNuSpec.RootDir)%(SymbolsNuSpec.Directory);OutputDir=$(SymbolsOutputPath);Extension=.nupkg"
      Condition="'@(SymbolsNuSpec)'!=''" />
  </Target>

  <!-- Repacks and signs VSIXes -->
  <Target Name="RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
    </ItemGroup>
    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Targets="_RebuildVSIXes"
        Condition="'@(_VSIXManifest)'!=''" />
  </Target>

  <Target Name="_RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
      <VSIXManifest Include="@(_VSIXManifest)">
        <VSIXName>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))))</VSIXName>
        <VSIXDir>$([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))\</VSIXDir>
      </VSIXManifest>
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Targets="ZipFile"
        Properties="ZipRoot=%(VSIXManifest.VSIXDir);OutputDir=$(UnsignedVSIXWithSignedBinariesPath);Extension=.vsix" />

    <ItemGroup>
      <VSIXToSign Include="$(UnsignedVSIXWithSignedBinariesPath)**\*.vsix" />

      <_SignProject Project="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          Certificate=$(VSIXCodeSignCertificate);
          JobName=RazorVSIX;
          LocalBuild=$(LocalBuild);
          Description=Signing Razor VSIX;
          Files=@(VSIXToSign)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" />

    <Copy
      SourceFiles="@(VSIXToSign);$(CoherenceDestinationDir)vsix\%(VSIXManifest.VSIXName).json"
      DestinationFolder="$(SignedVSIXPath)" />
  </Target>

  <Target Name="SubmitCodeSign">
    <PropertyGroup>
      <SignType>$(PB_SignType)</SignType>
      <SignType Condition="'$(SignType)'=='' OR '$(LocalBuild)'=='true'">test</SignType>
      <LauncherTarget>$(MSBuildThisFileDirectory)Sign-MicroBuildLauncher.targets</LauncherTarget>
      <ResponseFilePath>$(IntermediateOutputPath)$(JobName).rsp</ResponseFilePath>
      <MapDirectory>$(IntermediateOutputPath)map\$(JobName)\</MapDirectory>
    </PropertyGroup>

    <ItemGroup>
      <_Files Remove="@(_Files)" />
      <_Files Include="$(Files)" />
    </ItemGroup>

    <RemoveDir Directories="$(MapDirectory)" Condition="Exists('$(MapDirectory)')" />
    <MakeDir Directories="$(MapDirectory)" />

    <!--
    Map the files to sign to an intermediate directory with fixed length file names.
    This avoids running in to long path issues when the signing job attempts to read \ write
    files in deeply nested directory structures such as the ones created in the runtime store.
    -->
    <MapToFixedLengthPath Files="@(_Files)" MapDirectory="$(MapDirectory)">
      <Output TaskParameter="Output" ItemName="_MappedFile" />
    </MapToFixedLengthPath>

    <PropertyGroup>
      <FilesToSign>@(_MappedFile -> '%(MappedPath)', '%3B')</FilesToSign>
    </PropertyGroup>

    <ItemGroup>
      <_Approvers Include="$(CodeSignApprovers)" />

      <_ResponseFileLines Include="$(LauncherTarget)" />
      <_ResponseFileLines Include="/p:MicroBuildPluginsSigningDirectory=$(OneESToolsPath)MicroBuild.Plugins.Signing.1.0.402\" />
      <_ResponseFileLines Include="/p:BinariesDirectory=$(IntermediateOutputPath)" />
      <_ResponseFileLines Include="/p:IntermediatesDirectory=$(IntermediateOutputPath)" />
      <_ResponseFileLines Include="/p:Certificate=$(Certificate)" />
      <_ResponseFileLines Include="/p:SignType=$(SignType)" />
      <_ResponseFileLines Include="/p:FilesToSign=&quot;$(FilesToSign)&quot;" />
    </ItemGroup>

    <Message Text="Executing code sign job $(JobName)..." Importance="High" />

    <WriteLinesToFile
      File="$(ResponseFilePath)"
      Lines="@(_ResponseFileLines)"
      Overwrite="true" />

    <Exec Command="msbuild @$(ResponseFilePath)" />

    <Move SourceFiles="%(_MappedFile.MappedPath)" DestinationFiles="%(_MappedFile.Identity)" OverwriteReadOnlyFiles="true" />
  </Target>

  <!-- Repacks RuntimeStore -->
  <Target Name="RebuildRuntimeStores">
    <MakeDir Directories="$(RuntimeStoreOutputPath)" />

    <ItemGroup>
      <RuntimeStoresFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedRuntimeStorePath)&quot;))" />
    </ItemGroup>

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Properties="RuntimeStoreFile=%(RuntimeStoresFiles.Identity);OutDir=$(RuntimeStoreOutputPath)"
      Targets="RebuildRuntimeStore"/>
  </Target>

  <Target Name="RebuildRuntimeStore">
    <PropertyGroup>
      <WorkingDir>$(RuntimeStoreFile)</WorkingDir>
      <RuntimeStoreName>$([System.IO.Path]::GetFileName($(RuntimeStoreFile)))</RuntimeStoreName>
      <CreateTarGzip Condition="$(RuntimeStoreName.Contains('osx')) or $(RuntimeStoreName.Contains('linux'))">true</CreateTarGzip>
      <OutputFile>$(OutDir)$(RuntimeStoreName)</OutputFile>

      <OutputFile Condition="'$(CreateTarGzip)'=='true'">$(OutputFile).tar.gz</OutputFile>
      <OutputFile Condition="'$(CreateTarGzip)'!='true'">$(OutputFile).zip</OutputFile>
    </PropertyGroup>
    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />

    <Delete Files="$(OutputFile)" Condition="Exists('$(OutputFile)')" />

    <!-- see https://sevenzip.osdn.jp/chm/cmdline/ -->
    <Exec Command="&quot;$(ZipExePath)&quot; a -tzip -mx9 -r -y &quot;$(OutputFile)&quot; * > nul"
      WorkingDirectory="$(WorkingDir)"
      Condition="'$(CreateTarGzip)' != 'true'" />

    <Exec Command="&quot;$(ZipExePath)&quot; a -ttar -r -y -so tmp.tar * | &quot;$(ZipExePath)&quot; a -y -si &quot;$(OutputFile)&quot;"
       WorkingDirectory="$(WorkingDir)"
       Condition="'$(CreateTarGzip)' == 'true'" />
  </Target>

  <Target Name="CreateTimestampFreePackages">
    <PropertyGroup>
      <PackagesDir>$(ArtifactsDir)Signed\Packages\</PackagesDir>
      <PackagesNoTimestampDir>$(ArtifactsDir)Signed\Packages-NoTimeStamp\</PackagesNoTimestampDir>

      <OOBPackagesDir>$(ArtifactsDir)Signed\OobPackages\</OOBPackagesDir>
      <OOBPackagesNoTimestampDir>$(ArtifactsDir)Signed\OobPackages-NoTimeStamp\</OOBPackagesNoTimestampDir>
    </PropertyGroup>

    <ItemGroup>
      <PackagesAlreadyTimestampFree Include="$(IntermediatePackagesNoTimestampOutputPath)*.nupkg" />
      <PackagesWithTimeStamp Include="$(PackagesDir)*.nupkg" />
      <OOBPackagesWithTimeStamp Include="$(OOBPackagesDir)*.nupkg" />
    </ItemGroup>

    <MakeDir Directories="$(PackagesNoTimestampDir);$(OOBPackagesNoTimestampDir)" />

    <RepoTasks.CreateTimestampFreePackages
      PackagesWithTimeStamp="@(PackagesWithTimeStamp)"
      PackagesAlreadyTimestampFree="@(PackagesAlreadyTimestampFree)"
      OutputDirectory="$(PackagesNoTimestampDir)" />

    <RepoTasks.CreateTimestampFreePackages
      PackagesWithTimeStamp="@(OOBPackagesWithTimeStamp)"
      PackagesAlreadyTimestampFree="@(PackagesAlreadyTimestampFree)"
      OutputDirectory="$(OOBPackagesNoTimestampDir)" />
  </Target>

  <Target Name="CreateTimestampFreeRuntimeStores">
    <ItemGroup>
      <MetapackageFile Include="$(DepsDirectory)store\Microsoft.AspNetCore.All.*.nupkg" />
    </ItemGroup>

    <PropertyGroup>
      <VersionNumber>@(MetapackageFile->Metadata('Filename'))</VersionNumber>
      <VersionNumber>$(VersionNumber.TrimStart('Microsoft.AspNetCore.All'))</VersionNumber>
    </PropertyGroup>

    <RepoTasks.CreateTimestampFreeRuntimeStoreFiles
      VersionNumber="$(VersionNumber)"
      RuntimeStoresDirectory="$(UnsignedRuntimeStorePath)"
      OutputDirectory="$(TimestampFreeUnsignedRuntimeStorePath)" />

    <ItemGroup>
      <TimestampFreeRuntimeStoresFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(TimestampFreeUnsignedRuntimeStorePath)&quot;))" />
    </ItemGroup>

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Properties="RuntimeStoreFile=%(TimestampFreeRuntimeStoresFiles.Identity);OutDir=$(TimestampFreeRuntimeStoreOutputPath)"
      Targets="RebuildRuntimeStore"/>
  </Target>

  <Target Name="ZipFile">
    <PropertyGroup>
      <FileName>$([System.IO.Path]::GetFileName($(ZipRoot.Trim('\'))))</FileName>
      <OutputFile>$(OutputDir)$(FileName)$(Extension)</OutputFile>
    </PropertyGroup>

    <ItemGroup>
      <Files Include="$(ZipRoot)**\*" />
    </ItemGroup>

    <ZipArchive
      File="$(OutputFile)"
      SourceFiles="@(Files)"
      WorkingDirectory="$(ZipRoot)" />
  </Target>

</Project>
