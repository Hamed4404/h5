<Project>
  <PropertyGroup>
    <SignDependsOn>
      PrepareFilesForSigning;
      SignFiles;
      RebuildOobArchives;
      RebuildPackages;
      RebuildVSIXes;
      RebuildSharedFxs;
      RepackMPacks;
    </SignDependsOn>
  </PropertyGroup>

  <Target Name="Sign" DependsOnTargets="$(SignDependsOn)" />

  <Target Name="PrepareFilesForSigning">
    <ItemGroup>
      <PackageBinaries Include="
        $(UnsignedPackagesPath)**\*.dll;
        $(UnsignedPackagesPath)**\*.exe;
        $(UnsignedPackagesPath)**\*.psd1;
        $(UnsignedPackagesPath)**\*.psm1;
        $(UnsignedPackagesPath)**\*.ps1;" />

      <OobPackageBinaries Include="
        $(UnsignedOobPackagesPath)**\*.dll;
        $(UnsignedOobPackagesPath)**\*.exe;
        $(UnsignedOobPackagesPath)**\*.psd1;
        $(UnsignedOobPackagesPath)**\*.psm1;
        $(UnsignedOobPackagesPath)**\*.ps1;" />

      <SymbolsPackageBinaries Include="
        $(UnsignedSymbolPackagesPath)**\*.dll;
        $(UnsignedSymbolPackagesPath)**\*.exe;
        $(UnsignedSymbolPackagesPath)**\*.psd1;
        $(UnsignedSymbolPackagesPath)**\*.psm1;
        $(UnsignedSymbolPackagesPath)**\*.ps1;" />

      <VSIXBinaries Include="$(UnsignedVSIXPath)**\*.dll" />

      <OobArchiveBinaries Include="$(UnsignedOobArchivePath)**\*.dll" />

      <SharedFxBinaries Include="
        $(UnsignedSharedFxPath)**\microsoft.*.dll;
        $(UnsignedSharedFxPath)**\system.*.dll;
        $(UnsignedSharedFxPath)**\libuv.dll;
        $(UnsignedSharedFxPath)**\sni.dll" />

      <SharedFxThirdPartyBinaries Include="
        $(UnsignedSharedFxPath)**\newtonsoft*.dll;
        $(UnsignedSharedFxPath)**\remotion*.dll;
        $(UnsignedSharedFxPath)**\sqlitepclraw*.dll;
        $(UnsignedSharedFxPath)**\e_sqlite3.dll;
        $(UnsignedSharedFxPath)**\stackexchange*.dll" />

      <UnaccountedSharedFxBinaries Include="$(UnsignedSharedFxPath)**\*.dll" Exclude="@(SharedFxBinaries);@(SharedFxThirdPartyBinaries)"/>

      <MPackBinaries Include="$(UnsignedMPacksPath)**\*.dll" />
    </ItemGroup>


    <Error Text="Additional binaries found in the aspnetcore shared framework which are not marked for signing: @(UnaccountedSharedFxBinaries)" Condition="'@(UnaccountedSharedFxBinaries)'!=''"/>
  </Target>

  <Target Name="SignFiles">
    <ItemGroup>
      <AspNetCoreBinaries Include="
        @(PackageBinaries);
        @(OobPackageBinaries);
        @(SymbolsPackageBinaries);
        @(VSIXBinaries);
        @(OobArchiveBinaries);
        @(MPackBinaries);" />

      <_SignProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(BinaryCodeSignCertificate);
          JobName=AspNetCoreBinaries;
          Description=Signing AspNetCore binaries;
          Files=@(AspNetCoreBinaries)
        </AdditionalProperties>
      </_SignProject>

      <_SignProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(BinaryCodeSignCertificate);
          JobName=SharedFxBinaries;
          Description=Signing AspNetCore Package Cache binaries;
          Files=@(SharedFxBinaries)
        </AdditionalProperties>
      </_SignProject>

      <_SignProject Include="$(MSBuildProjectFullPath)" Condition="'@(SharedFxThirdPartyBinaries)'!=''" >
        <AdditionalProperties>
          LocalBuild=$(LocalBuild);
          Certificate=$(ThirdParthCodeSignCertificate);
          JobName=ThirdPartyBinaries;
          Description=Signing third party binaries;
          Files=@(SharedFxThirdPartyBinaries)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="RebuildPackages">
    <MakeDir Directories="$(PackageOutputPath)" />

    <ItemGroup>
      <NuSpec Include="$(UnsignedPackagesPath)**\*.nuspec" />
      <NuSpecOob Include="$(UnsignedOobPackagesPath)**\*.nuspec" />
      <SymbolsNuSpec Include="$(UnsignedSymbolPackagesPath)**\*.nuspec" />
    </ItemGroup>

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(NuSpec.RootDir)%(NuSpec.Directory);OutputDir=$(PackagesOutputPath);Extension=.nupkg"
      Condition="'@(NuSpec)'!=''" />
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(NuSpecOob.RootDir)%(NuSpecOob.Directory);OutputDir=$(PackagesOobOutputPath);Extension=.nupkg"
      Condition="'@(NuSpecOob)'!=''" />
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="ZipFile"
      Properties="ZipRoot=%(SymbolsNuSpec.RootDir)%(SymbolsNuSpec.Directory);OutputDir=$(SymbolsOutputPath);Extension=.nupkg"
      Condition="'@(SymbolsNuSpec)'!=''" />
  </Target>

  <!-- Repacks MPacks with their signed binaries -->
  <Target Name="RepackMPacks">
    <MakeDir Directories="$(SignedMPacksOutputPath)" />

    <ItemGroup>
      <MPackDirectories Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedMPacksPath)&quot;))" />
    </ItemGroup>

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Properties="MPackDirectory=%(MPackDirectories.Identity);"
      Targets="_RepackMPack"/>
  </Target>

  <Target Name="_RepackMPack">
    <PropertyGroup>
      <MPackName>$([System.IO.Path]::GetFileName($(MPackDirectory)))</MPackName>
      <OutputFile>$(SignedMPacksOutputPath)$(MPackName).mpack</OutputFile>
    </PropertyGroup>

    <ItemGroup>
      <Files Include="$(MPackDirectory)\*" />
    </ItemGroup>

    <ZipArchive
      File="$(OutputFile)"
      SourceFiles="@(Files)"
      WorkingDirectory="$(MPackDirectory)" />
  </Target>

  <!-- Repacks and signs VSIXes -->
  <Target Name="RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
    </ItemGroup>
    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Targets="_RebuildVSIXes"
        Condition="'@(_VSIXManifest)'!=''" />
  </Target>

  <Target Name="_RebuildVSIXes">
    <ItemGroup>
      <_VSIXManifest Include="$(UnsignedVSIXPath)**\extension.vsixmanifest" />
      <VSIXManifest Include="@(_VSIXManifest)">
        <VSIXName>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))))</VSIXName>
        <VSIXDir>$([System.IO.Path]::GetDirectoryName(%(_VSIXManifest.FullPath)))\</VSIXDir>
      </VSIXManifest>
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Targets="ZipFile"
        Properties="ZipRoot=%(VSIXManifest.VSIXDir);OutputDir=$(UnsignedVSIXWithSignedBinariesPath);Extension=.vsix" />

    <ItemGroup>
      <VSIXToSign Include="$(UnsignedVSIXWithSignedBinariesPath)**\*.vsix" />

      <_SignProject Project="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          Certificate=$(VSIXCodeSignCertificate);
          JobName=RazorVSIX;
          LocalBuild=$(LocalBuild);
          Description=Signing Razor VSIX;
          Files=@(VSIXToSign)
        </AdditionalProperties>
      </_SignProject>
    </ItemGroup>

    <MSBuild Projects="@(_SignProject)" Targets="SubmitCodeSign" />

    <Copy
      SourceFiles="@(VSIXToSign);$(DepsDirectory)build\%(VSIXManifest.VSIXName).json"
      DestinationFolder="$(SignedVSIXPath)" />
  </Target>

  <Target Name="SubmitCodeSign">
    <ItemGroup>
      <_Approvers Include="$(CodeSignApprovers)" />
      <_Files Include="$(Files)" />

      <_ResponseFileLines Include="--approver=%(_Approvers.Identity)" />
      <_ResponseFileLines Include="--cert=$(Certificate)" />
      <_ResponseFileLines Include="--local-build" Condition="'$(SignType)'!='real' OR '$(LocalBuild)'=='true'" />
      <_ResponseFileLines Include="--description=$(Description)" />
      <_ResponseFileLines Include="--display-name=$(CodeSignDisplayName)" />
      <_ResponseFileLines Include="--display-url=$(CodeSignUrl)" />
      <_ResponseFileLines Include="-f=%(_Files.Identity)" />
    </ItemGroup>

    <PropertyGroup>
      <ResponseFilePath>$(IntermediateDir)$(JobName).rsp</ResponseFilePath>
      <CodeSignExeOutputPath>$(RepositoryRoot)src\CodeSign\bin\$(Configuration)\net462\CodeSign.exe</CodeSignExeOutputPath>
    </PropertyGroup>

    <Message Text="Executing code sign job $(JobName)..." Importance="High" />

    <WriteLinesToFile
      File="$(ResponseFilePath)"
      Lines="@(_ResponseFileLines)"
      Overwrite="true" />

    <Exec Command="&quot;$(CodeSignExeOutputPath)&quot; @$(ResponseFilePath)" />
  </Target>

  <!-- Repacks aspnetcore shared framework -->
  <Target Name="RebuildSharedFxs">
    <MakeDir Directories="$(SharedFxOutputPath)" />

    <ItemGroup>
      <SharedFxFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedSharedFxPath)&quot;))" />
    </ItemGroup>

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Properties="SharedFxFile=%(SharedFxFiles.Identity);OutDir=$(SharedFxOutputPath)"
      Targets="RebuildSharedFx"/>
  </Target>

  <Target Name="RebuildSharedFx">
    <PropertyGroup>
      <WorkingDir>$(SharedFxFile)</WorkingDir>
      <SharedFxName>$([System.IO.Path]::GetFileName($(SharedFxFile)))</SharedFxName>
      <CreateTarGzip Condition="$(SharedFxName.Contains('osx')) or $(SharedFxName.Contains('linux'))">true</CreateTarGzip>
      <OutputFile>$(OutDir)$(SharedFxName)</OutputFile>

      <OutputFile Condition="'$(CreateTarGzip)'=='true'">$(OutputFile).tar.gz</OutputFile>
      <OutputFile Condition="'$(CreateTarGzip)'!='true'">$(OutputFile).zip</OutputFile>
    </PropertyGroup>
    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />

    <Delete Files="$(OutputFile)" Condition="Exists('$(OutputFile)')" />

    <!-- see https://sevenzip.osdn.jp/chm/cmdline/ -->
    <Exec Command="&quot;$(ZipExePath)&quot; a -tzip -mx9 -r -y &quot;$(OutputFile)&quot; * > nul"
      WorkingDirectory="$(WorkingDir)"
      Condition="'$(CreateTarGzip)' != 'true'" />

    <Exec Command="&quot;$(ZipExePath)&quot; a -ttar -r -y -so tmp.tar * | &quot;$(ZipExePath)&quot; a -y -si &quot;$(OutputFile)&quot;"
       WorkingDirectory="$(WorkingDir)"
       Condition="'$(CreateTarGzip)' == 'true'" />
  </Target>

  <Target Name="RebuildOobArchives">
    <MakeDir Directories="$(SignedOobArchivePath)" />

    <ItemGroup>
      <OobArchiveFiles Include="$([System.IO.Directory]::GetDirectories(&quot;$(UnsignedOobArchivePath)&quot;))" />
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectFullPath)"
        Targets="ZipFile"
        Properties="ZipRoot=$([MSBuild]::NormalizeDirectory(%(OobArchiveFiles.FullPath)));OutputDir=$(SignedOobArchivePath);Extension=.zip" />
  </Target>

  <Target Name="ZipFile">
    <PropertyGroup>
      <FileName>$([System.IO.Path]::GetFileName($(ZipRoot.Trim('\'))))</FileName>
      <OutputFile>$(OutputDir)$(FileName)$(Extension)</OutputFile>
    </PropertyGroup>

    <ItemGroup>
      <Files Include="$(ZipRoot)**\*" />
    </ItemGroup>

    <ZipArchive
      File="$(OutputFile)"
      SourceFiles="@(Files)"
      WorkingDirectory="$(ZipRoot)" />
  </Target>

</Project>
