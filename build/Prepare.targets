<Project>
  <Target Name="Clean">
    <RemoveDir Directories="$(ArtifactsDir);$(IntermediateDir)" />
  </Target>

  <Target Name="PrepareArtifactDirectories">
    <!--
    Add an empty directory with a dummy file to workaround issues in TC artifact dependencies.
    https://youtrack.jetbrains.com/issue/TW-19132
    -->
    <ItemGroup>
      <_ArtifactDirectories Include="$(SignedMPacksOutputPath);$(SignedOobArchivePath);$(SharedFxOutputPath);$(PackagesOutputPath);$(SignedOobArchivePath)" />
    </ItemGroup>
    <MakeDir Directories="@(_ArtifactDirectories)" />
    <Touch Files="%(_ArtifactDirectories.Identity).teamcitykeep" AlwaysCreate="true" />
  </Target>

  <Target Name="ExtractInputs">
    <ItemGroup>
      <_InputPackages Include="$(UnsignedPackagesDir)*.nupkg" />
      <UnsignedSharedFx Include="$(DepsDirectory)runtime\*.zip" />
      <UnsignedOobArchive Include="$(DepsDirectory)build\AspNetCoreModule.zip" Condition="Exists('$(DepsDirectory)build\AspNetCoreModule.zip')" />
      <UnsignedOobArchive Include="$(DepsDirectory)build\runtime-site-extension-*.zip" />
      <PoliCheckPackages Include="@(UnsignedPackages)" />
      <UnsignedMPacks Include="$(DepsDirectory)build\**\*.mpack" />
    </ItemGroup>

    <!-- Filter already signed .nupkgs -->
    <FilterSignedPackagesFiles Files="@(_InputPackages)">
      <Output TaskParameter="Signed" ItemName="AlreadySignedPackages" />
      <Output TaskParameter="Unsigned" ItemName="UnsignedPackages" />
    </FilterSignedPackagesFiles>

    <StupidCopy Condition="'@(AlreadySignedPackages)' != ''"
      SourceFiles="@(AlreadySignedPackages)"
      DestinationFolder="$(PackagesOutputPath)" />

    <ItemGroup>
      <_UnzipFiles Include="@(UnsignedPackages)" Destination="$(UnsignedPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedSharedFx)" Destination="$(UnsignedSharedFxPath)" />
      <_UnzipFiles Include="@(UnsignedOobArchive)" Destination="$(UnsignedOobArchivePath)" />
      <_UnzipFiles Include="@(PoliCheckPackages)" Destination="$(PoliCheckPath)" />
      <_UnzipFiles Include="@(UnsignedMPacks)" Destination="$(UnsignedMPacksPath)" />
      <_UnzipProject Include="$(MSBuildProjectFullPath)" Condition="!Exists('%(_UnzipFiles.Destination)%(_UnzipFiles.FileName)')">
         <AdditionalProperties>
          ZipFile=%(_UnzipFiles.FullPath);
          ZipDestination=%(_UnzipFiles.Destination)%(_UnzipFiles.FileName)
         </AdditionalProperties>
      </_UnzipProject>
    </ItemGroup>

    <Warning Text="No archives for signing." Condition="'@(UnsignedOobArchive)'==''" />
    <Warning Text="No packages found for signing." Condition="'@(UnsignedPackages)'==''" />
    <Warning Text="No aspnetcore shared framework found for signing." Condition="'@(UnsignedSharedFx)'==''" />
    <Warning Text="No MPacks found for signing." Condition="'@(UnsignedMPacks)'==''" />

    <MSBuild Projects="@(_UnzipProject)" BuildInParallel="true" Targets="_ExtractZipFile" />

    <RemoveDir Directories="@(PoliCheckPackages->'$(PoliCheckPath)%(Filename)\_rels')" />
    <Delete Files="@(PoliCheckPackages->'$(PoliCheckPath)%(Filename)\[Content_Types].xml')" />
  </Target>

  <Target Name="_ExtractZipFile">
    <UnzipArchive File="$(ZipFile)" Destination="$(ZipDestination)" />
  </Target>

  <!--
  Runs the default composite rule on packages that we intend on shipping. This is meant to ensure we aren't missing verification
  due to a repository mis-configuration
  -->
  <Target Name="VerifyUnsignedPackages">
    <VerifyPackages
      ArtifactDirectory="$(UnsignedPackagesDir)"
      RuleFile="$(RepositoryRoot)NuGetPackageVerifier-Presign.json" />
  </Target>

</Project>
