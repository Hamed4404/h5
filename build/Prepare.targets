<Project>
  <Target Name="Clean">
    <RemoveDir Directories="$(ArtifactsDir);$(IntermediateOutputPath)" />
  </Target>

  <Target Name="AcquireTools">
    <MakeDir Directories="$(OneESTools)nuget" />
    <DownloadFile Source="https://devdiv.pkgs.visualstudio.com/_apis/public/nuget/client/CredentialProviderBundle.zip" Destination="$(OneESTools)\nuget\bundle.zip" />
    <UnzipArchive File="$(OneESTools)nuget\bundle.zip" Destination="$(OneESTools)nuget" Overwrite="true" />

    <Exec Command="$(OneESTools)nuget\nuget.exe
      restore $(MSBuildThisFileDirectory)packages.config
      -Output $(OneESToolsPath)
      -Source https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json" />
  </Target>

  <Target Name="ExtractInputs">
    <ItemGroup>
      <UnsignedPackages Include="$(DepsDirectory)ship\*.nupkg" />
      <!--
        Packages that were already produced in the no-timestamp configuration, such as aspnet/Templating packages.
        When present, they should prevent the CreateNotTimestamp target from producing a new nupkg.
        Instead, we just do simple signing and repackage.
       -->
      <UnsignedNoTimestampPackages Include="$(DepsDirectory)notimestamp\*.nupkg" />
      <UnsignedOobPackages Include="$(DepsDirectory)shipoob\*.nupkg" />
      <UnsignedSymbolPackages Include="$(DepsDirectory)symbols\Microsoft.Data.Sqlite*.nupkg" />
      <UnsignedVSIX Include="$(DepsDirectory)vsix\*.vsix" />
      <UnsignedRuntimeStores Include="$(DepsDirectory)store\*.zip" />
      <PoliCheckPackages Include="$(DepsDirectory)symbols\*.nupkg" />
      <UpdatedMetapackageNupkg Include="$(DepsDirectory)store\Microsoft.AspNetCore.All.*.nupkg" />

      <_UnzipFiles Include="@(UnsignedPackages)" Destination="$(UnsignedPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedNoTimestampPackages)" Destination="$(UnsignedNoTimestampPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedOobPackages)" Destination="$(UnsignedOobPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedSymbolPackages)" Destination="$(UnsignedSymbolPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedVSIX)" Destination="$(UnsignedVSIXPath)" />
      <_UnzipFiles Include="@(UnsignedRuntimeStores)" Destination="$(UnsignedRuntimeStorePath)" />
      <_UnzipFiles Include="@(PoliCheckPackages)" Destination="$(PoliCheckPath)" />
    </ItemGroup>

    <Error Text="No packages found for signing." Condition="'@(UnsignedPackages)'==''" />
    <Error Text="No OOB packages found for signing." Condition="'@(UnsignedOobPackages)'==''" />
    <Warning Text="No VSIX found for signing." Condition="'@(UnsignedVSIX)'==''" />
    <Error Text="No runtime store found for signing." Condition="'@(UnsignedRuntimeStores)'==''" />
    <Error Text="No metapackage found for signing." Condition="'@(UpdatedMetapackageNupkg)'==''" />

    <Copy SourceFiles="@(UpdatedMetapackageNupkg)" DestinationFolder="$(DepsDirectory)ship" />

    <UnzipArchive
      File="%(_UnzipFiles.FullPath)"
      Destination="%(_UnzipFiles.Destination)%(_UnzipFiles.FileName)"
      Condition="!Exists('%(_UnzipFiles.Destination)%(_UnzipFiles.FileName)')" />

    <RepoTasks.RenameEncodedFolders RootDirectory="$(UnsignedPackagesPath)" />
    <RepoTasks.RenameEncodedFolders RootDirectory="$(UnsignedOobPackagesPath)" />

    <RemoveDir Directories="@(PoliCheckPackages->'$(PoliCheckPath)%(Filename)\_rels')" />
    <Delete Files="@(PoliCheckPackages->'$(PoliCheckPath)%(Filename)\[Content_Types].xml')" />
  </Target>

  <!--
  Runs the default composite rule on packages that we intend on shipping. This is meant to ensure we aren't missing verification
  due to a repository mis-configuration
  -->
  <Target Name="VerifyUnsignedPackages">
    <PropertyGroup>
      <CoherencePackagesDir>$(ArtifactsDir)coherence\ship\</CoherencePackagesDir>
    </PropertyGroup>

    <VerifyPackages
      ArtifactDirectory="$(CoherencePackagesDir)"
      RuleFile="$(RepositoryRoot)NuGetPackageVerifier.json"
      Condition="Exists('$(CoherencePackagesDir)')" />
  </Target>

</Project>
