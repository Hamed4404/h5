<Project>
  <Target Name="Clean">
    <RemoveDir Directories="$(ArtifactsDir);$(IntermediateOutputPath)" />
  </Target>

  <Target Name="ExtractInputs">
    <ItemGroup>
      <UnsignedPackages Include="$(DepsDirectory)ship\*.nupkg" />
      <UnsignedOobPackages Include="$(DepsDirectory)shipoob\*.nupkg" />
      <UnsignedSymbolPackages Include="$(DepsDirectory)symbols\Microsoft.Data.Sqlite*.nupkg" />
      <UnsignedVSIX Include="$(DepsDirectory)vsix\*.vsix" />
      <UnsignedSharedFx Include="$(DepsDirectory)SharedFx\*.zip" />
      <PoliCheckPackages Include="$(DepsDirectory)symbols\*.nupkg" />

      <_UnzipFiles Include="@(UnsignedPackages)" Destination="$(UnsignedPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedOobPackages)" Destination="$(UnsignedOobPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedSymbolPackages)" Destination="$(UnsignedSymbolPackagesPath)" />
      <_UnzipFiles Include="@(UnsignedVSIX)" Destination="$(UnsignedVSIXPath)" />
      <_UnzipFiles Include="@(UnsignedSharedFx)" Destination="$(UnsignedSharedFxPath)" />
      <_UnzipFiles Include="@(PoliCheckPackages)" Destination="$(PoliCheckPath)" />
    </ItemGroup>

    <Error Text="No packages found for signing." Condition="'@(UnsignedPackages)'==''" />
    <Error Text="No OOB packages found for signing." Condition="'@(UnsignedOobPackages)'==''" />
    <Warning Text="No VSIX found for signing." Condition="'@(UnsignedVSIX)'==''" />
    <Error Text="No aspnetcore shared framework found for signing." Condition="'@(UnsignedSharedFx)'==''" />

    <UnzipArchive
      File="%(_UnzipFiles.FullPath)"
      Destination="%(_UnzipFiles.Destination)%(_UnzipFiles.FileName)"
      Condition="!Exists('%(_UnzipFiles.Destination)%(_UnzipFiles.FileName)')" />

    <RepoTasks.RenameEncodedFolders RootDirectory="$(UnsignedPackagesPath)" />
    <RepoTasks.RenameEncodedFolders RootDirectory="$(UnsignedOobPackagesPath)" />

    <RemoveDir Directories="@(PoliCheckPackages->'$(PoliCheckPath)%(Filename)\_rels')" />
    <Delete Files="@(PoliCheckPackages->'$(PoliCheckPath)%(Filename)\[Content_Types].xml')" />
  </Target>

  <!--
  Runs the default composite rule on packages that we intend on shipping. This is meant to ensure we aren't missing verification
  due to a repository mis-configuration
  -->
  <Target Name="VerifyUnsignedPackages">
    <PropertyGroup>
      <CoherencePackagesDir>$(ArtifactsDir)coherence\ship\</CoherencePackagesDir>
    </PropertyGroup>

    <VerifyPackages
      ArtifactDirectory="$(CoherencePackagesDir)"
      RuleFile="$(RepositoryRoot)NuGetPackageVerifier.json"
      Condition="Exists('$(CoherencePackagesDir)')" />
  </Target>

</Project>
