<Project DefaultTargets="Build">
  <Import Project="Legacy-MsBuild.props" />
  <Import Project="QERM.targets" />
  <Import Project="Sign.targets" />
  <Import Project="Policheck.targets" />

  <PropertyGroup>
    <PublishFeed>https://dotnet.myget.org/F/aspnetcore-dev/</PublishFeed>
    <NuGetV3Feed>https://api.nuget.org/v3/index.json</NuGetV3Feed>
    <BuildToolsFeed>https://dotnet.myget.org/F/aspnetcore-tools/api/v2</BuildToolsFeed>
    <CoherenceDestinationDir>$(ArtifactsPath)coherence\</CoherenceDestinationDir>
    <CoherencePackageCacheDestinationDir>$(ArtifactsPath)coherence-packageCache\</CoherencePackageCacheDestinationDir>
    <CoherenceSignedDestinationDir>$(ArtifactsPath)Signed\</CoherenceSignedDestinationDir>
    <CodeSignApprovers>elipton;joeloff</CodeSignApprovers>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="Sign;RunVSDrop;BinScope;" />

  <Target Name="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath);$(UnsignedBinariesPath)" />
    <RemoveDir Directories="$(IntermediateOutputPath);$(UnsignedOobBinariesPath)" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Target Name="RunVSDrop">
    <ItemGroup>
      <SignedRazorVSIX Include="$(SignedVSIXPath)*.vsix" />
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectDirectory)\vsdrop\drop.msbuild"
        Targets="BuildAndPublishManifest"
        Properties="
                SignedVsixPath=$([System.IO.Path]::GetDirectoryName(%(SignedRazorVSIX.FullPath)));
                RepositoryRoot=$(RepositoryRoot)\;
                ManifestRepositoryName=AspNetCore/%(SignedRazorVSIX.FileName);
                ManifestBuildBranch=$(BUILD_BRANCH);
                ManifestBuildNumber=$(BUILD_NUMBER)" />
  </Target>

<UsingTask TaskName="RenameEncodedFolders" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
  <ParameterGroup>
    <RootDirectory ParameterType="System.String" Required="true" />
  </ParameterGroup>
  <Task>
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Using Namespace="System" />
    <Using Namespace="System.Collections.Generic" />
    <Using Namespace="System.Diagnostics" />
    <Using Namespace="System.IO" />
    <Using Namespace="System.Xml" />
    <Using Namespace="Microsoft.Build.Framework" />
    <Using Namespace="Microsoft.Build.Utilities" />
    <Code Type="Fragment" Language="cs">
      <![CDATA[
          try
          {
              Log.LogMessage(MessageImportance.Normal, RootDirectory);

              foreach (var directory in Directory.EnumerateDirectories(RootDirectory, "*", SearchOption.AllDirectories))
              {
                  string unescapedDirectory = Uri.UnescapeDataString(directory);
                  Log.LogMessage(MessageImportance.Normal, unescapedDirectory);
                  if (!String.Equals(directory, unescapedDirectory))
                  {
                      Directory.Move(directory, unescapedDirectory);
                  }
              }
          }
          catch (Exception ex)
          {
              Log.LogErrorFromException(ex);
          }

          return !Log.HasLoggedErrors;
      ]]>
    </Code>
  </Task>
</UsingTask>
</Project>
