<Project DefaultTargets="Build">
  <Import Project="Legacy-MsBuild.props" />
  <Import Project="QERM.targets" />
  <Import Project="Sign.targets" />
  <Import Project="Policheck.targets" />

  <PropertyGroup>
    <PublishFeed>https://dotnet.myget.org/F/aspnetcore-dev/</PublishFeed>
    <NuGetV3Feed>https://api.nuget.org/v3/index.json</NuGetV3Feed>
    <BuildToolsFeed>https://dotnet.myget.org/F/aspnetcore-tools/api/v2</BuildToolsFeed>
    <CoherenceDestinationDir>$(ArtifactsPath)coherence\</CoherenceDestinationDir>
    <CoherencePackageCacheDestinationDir>$(ArtifactsPath)coherence-packageCache\</CoherencePackageCacheDestinationDir>
    <CoherenceSignedDestinationDir>$(ArtifactsPath)Signed\</CoherenceSignedDestinationDir>
    <CodeSignApprovers>elipton;joeloff</CodeSignApprovers>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="Sign;RunVSDrop;BinScope;" />

  <Target Name="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath);$(UnsignedBinariesPath)" />
    <RemoveDir Directories="$(IntermediateOutputPath);$(UnsignedOobBinariesPath)" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Target Name="RunVSDrop">
    <ItemGroup>
      <SignedRazorVSIX Include="$(SignedVSIXPath)*.vsix" />
    </ItemGroup>

    <MSBuild
        Projects="$(MSBuildProjectDirectory)\vsdrop\drop.msbuild"
        Targets="BuildAndPublishManifest"
        Properties="
                SignedVsixPath=$([System.IO.Path]::GetDirectoryName(%(SignedRazorVSIX.FullPath)));
                RepositoryRoot=$(RepositoryRoot)\;
                ManifestRepositoryName=AspNetCore/%(SignedRazorVSIX.FileName);
                ManifestBuildBranch=$(BUILD_BRANCH);
                ManifestBuildNumber=$(BUILD_NUMBER)" />
  </Target>

<UsingTask TaskName="RenameEncodedFolders" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
  <ParameterGroup>
    <RootDirectory ParameterType="System.String" Required="true" />
  </ParameterGroup>
  <Task>
    <Reference Include="System.Xml" />
    <Reference Include="System.Core" />
    <Using Namespace="System" />
    <Using Namespace="System.Collections.Generic" />
    <Using Namespace="System.Diagnostics" />
    <Using Namespace="System.IO" />
    <Using Namespace="System.Xml" />
    <Using Namespace="Microsoft.Build.Framework" />
    <Using Namespace="Microsoft.Build.Utilities" />
    <Code Type="Fragment" Language="cs">
      <![CDATA[
          try
          {
              Log.LogMessage(MessageImportance.Normal, RootDirectory);

              foreach (var directory in Directory.EnumerateDirectories(RootDirectory, "*", SearchOption.AllDirectories))
              {
                  string unescapedDirectory = Uri.UnescapeDataString(directory);
                  Log.LogMessage(MessageImportance.Normal, unescapedDirectory);
                  if (!String.Equals(directory, unescapedDirectory))
                  {
                      Directory.Move(directory, unescapedDirectory);
                  }
              }
          }
          catch (Exception ex)
          {
              Log.LogErrorFromException(ex);
          }

          return !Log.HasLoggedErrors;
      ]]>
    </Code>
  </Task>
</UsingTask>

  <UsingTask TaskName="FixRequiredNuSpecInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <NuSpec ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Xml" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var LicenseUrl = "https://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm";
            var IconUrl = "https://go.microsoft.com/fwlink/?LinkID=288859";
            var CopyrightText = "Copyright Â© Microsoft Corporation";
            var ProjectUrl = "https://www.asp.net/";

            try
            {
                var d = new XmlDocument();
                d.Load(NuSpec);

                // Grab the NuSpec namespace URI that's used in this NuSpec. We don't care which
                // schema it is, as long as we use whatever is there.
                var nuSpecNamespace = d.ChildNodes[1].NamespaceURI;

                // Find license URL tag
                var licenseUrlNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='licenseUrl']/text()");
                if (licenseUrlNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("licenseUrl", nuSpecNamespace);
                    var t = d.CreateTextNode(LicenseUrl);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing licenseUrl node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    licenseUrlNode.InnerText = LicenseUrl;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing licenseUrl node");
                }

                // Find requireLicenseAcceptance tag
                var requireLicenseAcceptanceNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='requireLicenseAcceptance']/text()");
                if (requireLicenseAcceptanceNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("requireLicenseAcceptance", nuSpecNamespace);
                    var t = d.CreateTextNode("true");
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing requireLicenseAcceptance node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    requireLicenseAcceptanceNode.InnerText = "true";
                    Log.LogMessage(MessageImportance.Normal, "Updating existing requireLicenseAcceptance node");
                }

                // Find iconUrl tag
                var iconUrlNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='iconUrl']/text()");
                if (iconUrlNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("iconUrl", nuSpecNamespace);
                    var t = d.CreateTextNode(IconUrl);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing iconUrl node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    iconUrlNode.InnerText = IconUrl;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing iconUrl node");
                }

                // Find copyright tag
                var copyrightNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='copyright']/text()");
                if (copyrightNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("copyright", nuSpecNamespace);
                    var t = d.CreateTextNode(CopyrightText);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing copyright node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    copyrightNode.InnerText = CopyrightText;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing copyright node");
                }

                // Find projectUrl tag
                var projectUrlNode = d.SelectSingleNode("/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='projectUrl']/text()");
                if (projectUrlNode == null)
                {
                    // Add it if it's missing
                    var e = d.CreateElement("projectUrl", nuSpecNamespace);
                    var t = d.CreateTextNode(ProjectUrl);
                    var x = d["package"]["metadata"];
                    x.AppendChild(e);
                    x.LastChild.AppendChild(t);
                    Log.LogMessage(MessageImportance.Normal, "Adding missing projectUrl node");
                }
                else
                {
                    // Overwrite the text if it's there (don't care if it was right or wrong)
                    projectUrlNode.InnerText = ProjectUrl;
                    Log.LogMessage(MessageImportance.Normal, "Updating existing projectUrl node");
                }

                d.Save(NuSpec);
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
            }

            return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
