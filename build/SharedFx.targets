<Project>
  <Import Project="SharedFx.props" />

  <PropertyGroup>
    <UnitTestFxProject>$(RepositoryRoot)\src\Framework\Framework.UnitTests\Framework.UnitTests.csproj</UnitTestFxProject>
  </PropertyGroup>

  <Target Name="GetMetapackageArtifactInfo">
    <ItemGroup>
      <_MetapackageProject Include="$(RepositoryRoot)src\Packages\Microsoft.AspNetCore.All\Microsoft.AspNetCore.All.csproj" />
      <_MetapackageProject Include="$(RepositoryRoot)src\Packages\Microsoft.AspNetCore.App\Microsoft.AspNetCore.App.csproj" />
      <_MetapackageProject Include="$(RepositoryRoot)src\Packages\Microsoft.AspNetCore.Analyzers\Microsoft.AspNetCore.Analyzers.csproj" />
    </ItemGroup>

    <MSBuild Projects="@(_MetapackageProject)"
      Targets="GetArtifactInfo"
      Properties="PackageOutputPath=$(BuildDir);BuildNumber=$(BuildNumber);DesignTimeBuild=true;IsFinalBuild=$(IsFinalBuild)">
      <Output TaskParameter="TargetOutputs" ItemName="ArtifactInfo" />
    </MSBuild>

    <ItemGroup>
      <!-- Cartesian products in MSBuild are fun :) -->
      <_SharedFrameworkSymbolsPackage Include="@(SharedFrameworkName)" Condition="'%(AllSharedFxRIDs.CrossgenSymbols)' != 'false' AND '%(AllSharedFxRIDs.Crossgen)' != 'false'">
        <Rid>%(AllSharedFxRIDs.Identity)</Rid>
      </_SharedFrameworkSymbolsPackage>
      <_SharedFrameworkSymbolsPackage Update="@(_SharedFrameworkSymbolsPackage)" PackageId="runtime.%(Rid).%(Identity)" />
      <ArtifactInfo Include="@(_SharedFrameworkSymbolsPackage->'$(BuildDir)%(PackageId).$(PackageVersion).symbols.nupkg')">
        <ArtifactType>NuGetSymbolsPackage</ArtifactType>
        <PackageId>%(_SharedFrameworkSymbolsPackage.PackageId)</PackageId>
        <Version>$(PackageVersion)</Version>
        <Category>shipoob</Category>
      </ArtifactInfo>
    </ItemGroup>
  </Target>

  <Target Name="_BuildMetapackage" DependsOnTargets="ResolveRepoInfo">
    <PropertyGroup>
      <MetapackageSource>$(_MetapackageSrcRoot)$(MetapackageName)\</MetapackageSource>
      <MetapackageWorkDirectory>$(_WorkRoot)pkg\$(MetapackageName)\</MetapackageWorkDirectory>
      <CommonProps />
      <CommonProps>$(CommonProps);Configuration=$(Configuration)</CommonProps>
      <CommonProps>$(CommonProps);DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcesPropsPath)</CommonProps>
      <CommonProps>$(CommonProps);DotNetBuildOffline=true</CommonProps>
      <CommonProps>$(CommonProps);AspNetUniverseBuildOffline=true</CommonProps>
      <CommonProps>$(CommonProps);RuntimeFrameworkVersion=$(MicrosoftNETCoreApp22PackageVersion)</CommonProps>
      <CommonProps>$(CommonProps);AppMetapackageVersion=$(PackageVersion)</CommonProps>
    </PropertyGroup>

    <Error
      Text="Source directory $(MetapackageSource) for $(MetapackageName) does not exist."
      Condition="!Exists('$(MetapackageSource)')" />

    <ItemGroup>
      <MetapackageFiles Include="$(MetapackageSource)**\*" />
    </ItemGroup>

    <!-- Clear working directory -->
    <RemoveDir Directories="$(MetapackageWorkDirectory)" />

    <!-- Move to working dir -->
    <Copy SourceFiles="@(MetapackageFiles)" DestinationFolder="$(MetapackageWorkDirectory)%(RecursiveDir)" />
    <Copy SourceFiles="$(_MetapackageSrcRoot)Directory.Build.props" DestinationFolder="$(_WorkRoot)" />

    <!-- Add references to project -->
    <RepoTasks.AddMetapackageReferences
      ReferencePackagePath="$(MetapackageWorkDirectory)$(MetapackageName).csproj"
      MetapackageReferenceType="$(MetapackageReferenceType)"
      DependencyVersionRangeType="$(MetapackageDependencyVersionRangeType)"
      PackageArtifacts="@(_PackageArtifactSpec)"
      ExternalDependencies="@(ExternalDependency)" />

    <!-- Set _Target=Restore so the project will be re-evaluated to include Internal.AspNetCore.Sdk MSBuild properties on the next step. -->
    <MSBuild Projects="$(MetapackageWorkDirectory)$(MetapackageName).csproj" Targets="Restore" Properties="$(CommonProps);_Target=Restore" />
    <!-- Pack -->
    <MSBuild Projects="$(MetapackageWorkDirectory)$(MetapackageName).csproj" Targets="Pack" Properties="$(CommonProps);PackageOutputPath=$(BuildDir)" />
  </Target>

  <Target Name="BuildMetapackages">
    <ItemGroup>
      <_MetapackageBuilderProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          MetapackageName=Microsoft.AspNetCore.App;
          MetapackageReferenceType=AppMetapackage;
          MetapackageDependencyVersionRangeType=MajorMinor
        </AdditionalProperties>
      </_MetapackageBuilderProject>

      <_MetapackageBuilderProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          MetapackageName=Microsoft.AspNetCore.All;
          MetapackageReferenceType=AllMetapackage;
          MetapackageDependencyVersionRangeType=Minimum
        </AdditionalProperties>
      </_MetapackageBuilderProject>

      <_MetapackageBuilderProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          MetapackageName=Microsoft.AspNetCore.Analyzers;
          MetapackageReferenceType=Analyzer;
          MetapackageDependencyVersionRangeType=Minimum
        </AdditionalProperties>
      </_MetapackageBuilderProject>
    </ItemGroup>

    <MSBuild
      Projects="@(_MetapackageBuilderProject)"
      Targets="_BuildMetapackage"
      BuildInParallel="false" />
  </Target>

  <Target Name="_BuildSharedFxProjects" DependsOnTargets="ResolveCommitHash">
    <ItemGroup>
      <SharedFxProjectToBuild Include="$(RepositoryRoot)src\Framework\**\*.shfxproj" />
      <SharedFxProjectToBuild Include="$(UnitTestFxProject)" />
      <SharedFxProjectToBuild Include="$(RepositoryRoot)src\Installers\Archive.Internal\*.*proj" />
      <SharedFxProjectToBuild Include="$(RepositoryRoot)src\Installers\Archive.Redist\*.*proj" />
    </ItemGroup>

    <MSBuild Projects="@(SharedFxProjectToBuild)"
             Targets="Restore"
             Properties="$(SolutionProperties);_DummyTarget=Restore"
             BuildInParallel="true" />

    <MSBuild Projects="@(SharedFxProjectToBuild)"
             Properties="$(SolutionProperties)"
             BuildInParallel="true" />
  </Target>

  <Target Name="BuildSharedFx" DependsOnTargets="GeneratePropsFiles;_BuildSharedFxProjects;TestSharedFx"/>

  <Target Name="TestSharedFx" DependsOnTargets="GeneratePropsFiles;InstallDotNet">
    <PropertyGroup>

      <!-- The file path to the log file, from within the container -->
      <UnitTestFxTrxLogFile>$(LogOutputDir)SharedFx-UnitTests-$(Version).trx</UnitTestFxTrxLogFile>
      <!-- The trx file path from the perspective of the TeamCity agent -->
      <UnitTestFxTrxPhysicalFilePath>$(UnitTestFxTrxLogFile)</UnitTestFxTrxPhysicalFilePath>
      <UnitTestFxTrxPhysicalFilePath Condition="'$(HostMachineRepositoryRoot)' != ''">$(HostMachineRepositoryRoot)/artifacts/logs/SharedFx-UnitTests.trx</UnitTestFxTrxPhysicalFilePath>
    </PropertyGroup>

    <MSBuild Projects="$(UnitTestFxProject)" Targets="GetTargetPath" Properties="$(SolutionProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="SharedFxTestAssembly" />
    </MSBuild>

    <RunDotNet
      IgnoreStandardErrorWarningFormat="true"
      IgnoreExitCode="true"
      Arguments="vstest;
      --Framework:%(TargetFrameworkIdentifier),Version=v%(TargetFrameworkVersion);
      --Logger:$([MSBuild]::Escape('trx;LogFileName=$(UnitTestFxTrxLogFile)'));
      %(SharedFxTestAssembly.Identity);
      --;RunConfiguration.NoAutoReporters=true">
      <Output TaskParameter="ExitCode" PropertyName="VsTestExitCode" />
    </RunDotNet>

    <Message Text="##teamcity[importData type='vstest' path='$(UnitTestFxTrxPhysicalFilePath)']"
      Importance="High"
      Condition="'$(TEAMCITY_VERSION)' != '' AND Exists('$(UnitTestFxTrxLogFile)')" />
    <Error Text="SharedFx.UnitTests failed with exit code '$(VsTestExitCode)'." Condition=" $(VsTestExitCode) != 0 " />
  </Target>

</Project>
