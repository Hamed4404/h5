<Project>
  <Import Project="SharedFx.props" />

  <PropertyGroup>
    <SharedFxOutputPath>$([MSBuild]::NormalizeDirectory($(ArtifactsDir)))runtime\</SharedFxOutputPath>
  </PropertyGroup>

  <Target Name="GetMetapackageArtifactInfo">
    <ItemGroup>
      <_MetapackageProject Include="$(RepositoryRoot)src\Packages\Microsoft.AspNetCore.All\Microsoft.AspNetCore.All.csproj" />
      <_MetapackageProject Include="$(RepositoryRoot)src\Packages\Microsoft.AspNetCore.App\Microsoft.AspNetCore.App.csproj" />
      <_MetapackageProject Include="$(RepositoryRoot)src\Packages\Microsoft.AspNetCore.Analyzers\Microsoft.AspNetCore.Analyzers.csproj" />
    </ItemGroup>

    <MSBuild Projects="@(_MetapackageProject)"
      Targets="GetArtifactInfo"
      Properties="PackageOutputPath=$(BuildDir);BuildNumber=$(BuildNumber);DesignTimeBuild=true;IsFinalBuild=$(IsFinalBuild)">
      <Output TaskParameter="TargetOutputs" ItemName="ArtifactInfo" />
    </MSBuild>

    <ItemGroup>
      <!-- Cartesian products in MSBuild are fun :) -->
      <_SharedFrameworkSymbolsPackage Include="@(SharedFrameworkName)" Condition="'%(AllSharedFxRIDs.CrossgenSymbols)' != 'false' AND '%(AllSharedFxRIDs.Crossgen)' != 'false'">
        <Rid>%(AllSharedFxRIDs.Identity)</Rid>
      </_SharedFrameworkSymbolsPackage>
      <_SharedFrameworkSymbolsPackage Update="@(_SharedFrameworkSymbolsPackage)" PackageId="runtime.%(Rid).%(Identity)" />
      <ArtifactInfo Include="@(_SharedFrameworkSymbolsPackage->'$(BuildDir)%(PackageId).$(PackageVersion).symbols.nupkg')">
        <ArtifactType>NuGetSymbolsPackage</ArtifactType>
        <PackageId>%(_SharedFrameworkSymbolsPackage.PackageId)</PackageId>
        <Version>$(PackageVersion)</Version>
        <Category>shipoob</Category>
      </ArtifactInfo>
    </ItemGroup>
  </Target>

  <Target Name="_BuildMetapackage" DependsOnTargets="ResolveRepoInfo">
    <PropertyGroup>
      <MetapackageSource>$(_MetapackageSrcRoot)$(MetapackageName)\</MetapackageSource>
      <MetapackageWorkDirectory>$(_WorkRoot)pkg\$(MetapackageName)\</MetapackageWorkDirectory>
      <CommonProps />
      <CommonProps>$(CommonProps);Configuration=$(Configuration)</CommonProps>
      <CommonProps>$(CommonProps);DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcesPropsPath)</CommonProps>
      <CommonProps>$(CommonProps);DotNetBuildOffline=true</CommonProps>
      <CommonProps>$(CommonProps);AspNetUniverseBuildOffline=true</CommonProps>
      <CommonProps>$(CommonProps);RuntimeFrameworkVersion=$(MicrosoftNETCoreApp22PackageVersion)</CommonProps>
      <CommonProps>$(CommonProps);AppMetapackageVersion=$(PackageVersion)</CommonProps>
    </PropertyGroup>

    <Error
      Text="Source directory $(MetapackageSource) for $(MetapackageName) does not exist."
      Condition="!Exists('$(MetapackageSource)')" />

    <ItemGroup>
      <MetapackageFiles Include="$(MetapackageSource)**\*" />
    </ItemGroup>

    <!-- Clear working directory -->
    <RemoveDir Directories="$(MetapackageWorkDirectory)" />

    <!-- Move to working dir -->
    <Copy SourceFiles="@(MetapackageFiles)" DestinationFolder="$(MetapackageWorkDirectory)%(RecursiveDir)" />
    <Copy SourceFiles="$(_MetapackageSrcRoot)Directory.Build.props" DestinationFolder="$(_WorkRoot)" />

    <!-- Add references to project -->
    <RepoTasks.AddMetapackageReferences
      ReferencePackagePath="$(MetapackageWorkDirectory)$(MetapackageName).csproj"
      MetapackageReferenceType="$(MetapackageReferenceType)"
      DependencyVersionRangeType="$(MetapackageDependencyVersionRangeType)"
      PackageArtifacts="@(_PackageArtifactSpec)"
      ExternalDependencies="@(ExternalDependency)" />

    <!-- Set _Target=Restore so the project will be re-evaluated to include Internal.AspNetCore.Sdk MSBuild properties on the next step. -->
    <MSBuild Projects="$(MetapackageWorkDirectory)$(MetapackageName).csproj" Targets="Restore" Properties="$(CommonProps);_Target=Restore" />
    <!-- Pack -->
    <MSBuild Projects="$(MetapackageWorkDirectory)$(MetapackageName).csproj" Targets="Pack" Properties="$(CommonProps);PackageOutputPath=$(BuildDir)" />
  </Target>

  <Target Name="BuildMetapackages">
    <ItemGroup>
      <_MetapackageBuilderProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          MetapackageName=Microsoft.AspNetCore.App;
          MetapackageReferenceType=AppMetapackage;
          MetapackageDependencyVersionRangeType=MajorMinor
        </AdditionalProperties>
      </_MetapackageBuilderProject>

      <_MetapackageBuilderProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          MetapackageName=Microsoft.AspNetCore.All;
          MetapackageReferenceType=AllMetapackage;
          MetapackageDependencyVersionRangeType=Minimum
        </AdditionalProperties>
      </_MetapackageBuilderProject>

      <_MetapackageBuilderProject Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          MetapackageName=Microsoft.AspNetCore.Analyzers;
          MetapackageReferenceType=Analyzer;
          MetapackageDependencyVersionRangeType=Minimum
        </AdditionalProperties>
      </_MetapackageBuilderProject>
    </ItemGroup>

    <MSBuild
      Projects="@(_MetapackageBuilderProject)"
      Targets="_BuildMetapackage"
      BuildInParallel="false" />
  </Target>

  <Target Name="DefineSharedFxPrerequisites" DependsOnTargets="ResolveCommitHash">
     <PropertyGroup>
      <AppSharedFxWorkDirectory>$(_WorkRoot)AppSharedFx\</AppSharedFxWorkDirectory>
      <AllSharedFxWorkDirectory>$(_WorkRoot)AllSharedFx\</AllSharedFxWorkDirectory>
      <SharedFxIntermediateOutputPath>$(_WorkRoot)Publish\</SharedFxIntermediateOutputPath>
      <SharedFxCrossGenDirectory>$(_WorkRoot)CrossGen\</SharedFxCrossGenDirectory>
      <SharedFxCrossGenSymbolsDirectory>$(_WorkRoot)CrossGenSymbols\</SharedFxCrossGenSymbolsDirectory>
      <SharedFxCrossGenToolDirectory>$(_WorkRoot)CrossGenTool\</SharedFxCrossGenToolDirectory>
      <SharedFxCrossGenRspDirectory>$(_WorkRoot)CrossGenRsp\</SharedFxCrossGenRspDirectory>
      <AppSharedFxPublishDirectory>$(SharedFxIntermediateOutputPath)shared\Microsoft.AspNetCore.App\$(PackageVersion)\</AppSharedFxPublishDirectory>
      <AllSharedFxPublishDirectory>$(SharedFxIntermediateOutputPath)shared\Microsoft.AspNetCore.All\$(PackageVersion)\</AllSharedFxPublishDirectory>
      <SharedFxRestoreRid>$(SharedFxRID)</SharedFxRestoreRid>

      <CommonSharedFxProps>Configuration=$(Configuration);RuntimeIdentifier=$(SharedFxRestoreRid)</CommonSharedFxProps>
      <CommonSharedFxProps>$(CommonSharedFxProps);DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcesPropsPath)</CommonSharedFxProps>
      <CommonSharedFxProps>$(CommonSharedFxProps);DotNetBuildOffline=true</CommonSharedFxProps>
      <CommonSharedFxProps>$(CommonSharedFxProps);AspNetUniverseBuildOffline=true</CommonSharedFxProps>
    </PropertyGroup>
  </Target>

  <Target Name="_BuildSharedFxSymbols">
    <PropertyGroup>
      <SymbolsPackageId>runtime.$(SharedFxRID).$(SymbolsNuspecIdSuffix)</SymbolsPackageId>
    </PropertyGroup>

    <ItemGroup>
      <_SymbolFiles Include="$(SymbolsWorkDir)**\*.pdb;$(SymbolsWorkDir)**\*.map;$(SymbolsWorkDir)**\*.dll" />
      <SymbolFiles Include="@(_SymbolFiles)">
        <PackagePath>%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
      </SymbolFiles>
    </ItemGroup>

    <!-- Create Layout -->
    <Copy
      SourceFiles="$(_TemplatesDir)SharedFxSymbols\SharedFrameworkSymbols.nuspec"
      DestinationFiles="$(SymbolsWorkDir)$(SymbolsPackageId).nuspec"
      OverwriteReadOnlyFiles="True" />

    <!-- Produce symbols nupkg -->
    <PackNuspec NuspecPath="$(SymbolsWorkDir)$(SymbolsPackageId).nuspec"
      OutputPath="$([MSBuild]::NormalizeDirectory($(ArtifactsDir)))symbols\$(SymbolsPackageId).$(PackageVersion).symbols.nupkg"
      Properties="version=$(PackageVersion);id=$(SymbolsPackageId);description=$(Description);Configuration=$(Configuration)"
      Overwrite="true"
      PackageFiles="@(SymbolFiles)"
      BasePath="$(SymbolsWorkDir)" />
  </Target>

  <Target Name="PackSharedFx" DependsOnTargets="DefineSharedFxPrerequisites" >
    <PropertyGroup>
      <AppSharedFxCrossgenDirectory>$(SharedFxCrossGenDirectory)shared\Microsoft.AspNetCore.App\$(PackageVersion)\</AppSharedFxCrossgenDirectory>
      <AllSharedFxCrossgenDirectory>$(SharedFxCrossGenDirectory)shared\Microsoft.AspNetCore.All\$(PackageVersion)\</AllSharedFxCrossgenDirectory>
      <AppSharedFxSymbolsDirectory>$(_WorkRoot)Symbols\Microsoft.AspNetCore.App\</AppSharedFxSymbolsDirectory>
      <AllSharedFxSymbolsDirectory>$(_WorkRoot)Symbols\Microsoft.AspNetCore.All\</AllSharedFxSymbolsDirectory>
    </PropertyGroup>

    <ItemGroup>
      <AppCrossGenOutput Include="$(AppSharedFxCrossgenDirectory)**\*.dll" />
      <AllCrossGenOutput Include="$(AllSharedFxCrossgenDirectory)**\*.dll" />
      <AppCrossGenSymbols Include="$(AppSharedFxCrossgenDirectory)**\*" Exclude="@(AppCrossGenOutput)" />
      <AllCrossGenSymbols Include="$(AllSharedFxCrossgenDirectory)**\*" Exclude="@(AllCrossGenOutput)" />
    </ItemGroup>

    <!-- Extract symbols package and copy over PDBs -->
    <UnzipArchive
      File="$(_SymbolsSourceDir)%(AppPortablePDBsToPublish.SymbolsPackageFilename)"
      Destination="$(_WorkRoot)SymbolsPackages\%(AppPortablePDBsToPublish.SymbolsPackageFilename)"
      Condition="Exists('$(_SymbolsSourceDir)%(AppPortablePDBsToPublish.SymbolsPackageFilename)')" />
    <UnzipArchive
      File="$(_SymbolsSourceDir)%(AllPortablePDBsToPublish.SymbolsPackageFilename)"
      Destination="$(_WorkRoot)SymbolsPackages\%(AllPortablePDBsToPublish.SymbolsPackageFilename)"
      Condition="Exists('$(_SymbolsSourceDir)%(AllPortablePDBsToPublish.SymbolsPackageFilename)')" />
    <Copy
      SourceFiles="$(_WorkRoot)SymbolsPackages\%(AppPortablePDBsToPublish.SymbolsPackageFilename)%(AppPortablePDBsToPublish.SymbolsRecursivePath)"
      DestinationFolder="$(AppSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True"
      Condition="Exists('$(_WorkRoot)SymbolsPackages\%(AppPortablePDBsToPublish.SymbolsPackageFilename)\%(AppPortablePDBsToPublish.SymbolsRecursivePath)')" />
    <Copy
      SourceFiles="$(_WorkRoot)SymbolsPackages\%(AllPortablePDBsToPublish.SymbolsPackageFilename)%(AllPortablePDBsToPublish.SymbolsRecursivePath)"
      DestinationFolder="$(AllSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True"
      Condition="Exists('$(_WorkRoot)SymbolsPackages\%(AllPortablePDBsToPublish.SymbolsPackageFilename)\%(AllPortablePDBsToPublish.SymbolsRecursivePath)')" />

    <!-- Copy over DLLs and PDBs -->
    <Copy
      SourceFiles="%(AppPortablePDBsToPublish.PortablePDB)"
      DestinationFolder="$(AppSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True"
      Condition="Exists('%(AppPortablePDBsToPublish.PortablePDB)')" />
    <Copy
      SourceFiles="%(AllPortablePDBsToPublish.PortablePDB)"
      DestinationFolder="$(AllSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True"
      Condition="Exists('%(AllPortablePDBsToPublish.PortablePDB)')" />
    <Copy
      SourceFiles="@(AppCrossGenSymbols)"
      DestinationFolder="$(AppSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True" />
    <Copy
      SourceFiles="@(AllCrossGenSymbols)"
      DestinationFolder="$(AllSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True" />
    <Copy
      SourceFiles="$(AppSharedFxCrossgenDirectory)%(AppCrossGenOutput.RecursiveDir)%(AppCrossGenOutput.FileName)%(AppCrossGenOutput.Extension)"
      DestinationFolder="$(AppSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True" />
    <Copy
      SourceFiles="$(AllSharedFxCrossgenDirectory)%(AllCrossGenOutput.RecursiveDir)%(AllCrossGenOutput.FileName)%(AllCrossGenOutput.Extension)"
      DestinationFolder="$(AllSharedFxSymbolsDirectory)runtimes\$(SharedFxRID)\lib\$(SharedFrameworkTargetFramework)"
      OverwriteReadOnlyFiles="True" />

    <!-- Create symbols nupkg -->
    <PropertyGroup>
      <AppSymbolsArguments>SymbolsWorkDir=$(AppSharedFxSymbolsDirectory)</AppSymbolsArguments>
      <AppSymbolsArguments>$(AppSymbolsArguments);SymbolsNuspecIdSuffix=Microsoft.AspNetCore.App</AppSymbolsArguments>
      <AppSymbolsArguments>$(AppSymbolsArguments);Description=Symbol packages for Microsoft.AspNetCore.App shared framework</AppSymbolsArguments>
      <AllSymbolsArguments>SymbolsWorkDir=$(AllSharedFxSymbolsDirectory)</AllSymbolsArguments>
      <AllSymbolsArguments>$(AllSymbolsArguments);SymbolsNuspecIdSuffix=Microsoft.AspNetCore.All</AllSymbolsArguments>
      <AllSymbolsArguments>$(AllSymbolsArguments);Description=Symbol packages for Microsoft.AspNetCore.All shared framework</AllSymbolsArguments>
    </PropertyGroup>

    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_BuildSharedFxSymbols" Properties="$(AppSymbolsArguments)" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_BuildSharedFxSymbols" Properties="$(AllSymbolsArguments)" />

    <!-- Replace assemblies with crossgen output -->
    <Copy
      SourceFiles="$(AppSharedFxCrossgenDirectory)%(AppCrossGenOutput.RecursiveDir)%(AppCrossGenOutput.FileName)%(AppCrossGenOutput.Extension)"
      DestinationFiles="$(AppSharedFxPublishDirectory)%(AppCrossGenOutput.RecursiveDir)%(AppCrossGenOutput.FileName)%(AppCrossGenOutput.Extension)"
      OverwriteReadOnlyFiles="True" />
    <Copy
      SourceFiles="$(AllSharedFxCrossgenDirectory)%(AllCrossGenOutput.RecursiveDir)%(AllCrossGenOutput.FileName)%(AllCrossGenOutput.Extension)"
      DestinationFiles="$(AllSharedFxPublishDirectory)%(AllCrossGenOutput.RecursiveDir)%(AllCrossGenOutput.FileName)%(AllCrossGenOutput.Extension)"
      OverwriteReadOnlyFiles="True" />

    <ItemGroup>
      <OutputZipFiles Include="$(SharedFxIntermediateOutputPath)**\*" />
    </ItemGroup>

    <!-- Create internal archive file -->
    <Exec Condition="'$(ArchiveExtension)' == '.tar.gz'"
      Command="tar -czf $(SharedFxOutputPath)$(SharedFxIntermediateArchiveBaseName)-$(PackageVersion)-$(SharedFxRID)$(ArchiveExtension) -C $(SharedFxIntermediateOutputPath) ." />
    <ZipArchive Condition="'$(ArchiveExtension)' == '.zip'"
      File="$(SharedFxOutputPath)$(SharedFxIntermediateArchiveBaseName)-$(PackageVersion)-$(SharedFxRID).zip"
      SourceFiles="@(OutputZipFiles)"
      WorkingDirectory="$(SharedFxIntermediateOutputPath)"
      Overwrite="true"/>
  </Target>

  <Target Name="BuildSharedFx" DependsOnTargets="GeneratePropsFiles;ResolveSharedFxFiles;CrossGenAssemblies;CrossGenSymbols;PackSharedFx;TestSharedFx"/>

  <Target Name="TestSharedFx" DependsOnTargets="GeneratePropsFiles;DefineSharedFxPrerequisites;ResolveCommitHash;InstallDotNet">
    <PropertyGroup>
      <UnitTestFxProject>$(RepositoryRoot)\test\SharedFx.UnitTests\SharedFx.UnitTests.csproj</UnitTestFxProject>

      <!-- The file path to the log file, from within the container -->
      <UnitTestFxTrxLogFile>$(LogOutputDir)SharedFx-UnitTests-$(Version).trx</UnitTestFxTrxLogFile>
      <!-- The trx file path from the perspective of the TeamCity agent -->
      <UnitTestFxTrxPhysicalFilePath>$(UnitTestFxTrxLogFile)</UnitTestFxTrxPhysicalFilePath>
      <UnitTestFxTrxPhysicalFilePath Condition="'$(HostMachineRepositoryRoot)' != ''">$(HostMachineRepositoryRoot)/artifacts/logs/SharedFx-UnitTests.trx</UnitTestFxTrxPhysicalFilePath>

      <UnitTestFxTestProps>
        DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcesPropsPath);
        DotNetPackageVersionPropsPath=$(GeneratedPackageVersionPropsPath);
        SharedFxOutputPath=$(SharedFxIntermediateOutputPath);
        RepositoryCommit=$(RepositoryCommit);
        VSTestLogger=$([MSBuild]::Escape('trx;LogFileName=$(UnitTestFxTrxLogFile)'));
        SharedFxRuntimeIdentifier=$(SharedFXRid)
      </UnitTestFxTestProps>
    </PropertyGroup>
    <MSBuild Projects="$(UnitTestFxProject)" Targets="Restore" Properties="_Dummy=restore;$(UnitTestFxTestProps)" />
    <MSBuild Projects="$(UnitTestFxProject)" Targets="Build" Properties="$(UnitTestFxTestProps)">
      <Output TaskParameter="TargetOutputs" ItemName="SharedFxTestAssembly" />
    </MSBuild>
    <RunDotNet Arguments="vstest;
      --Framework:%(TargetFrameworkIdentifier),Version=v%(TargetFrameworkVersion);
      --Logger:$([MSBuild]::Escape('trx;LogFileName=$(UnitTestFxTrxLogFile)'));
      %(SharedFxTestAssembly.Identity);
      --;RunConfiguration.NoAutoReporters=true" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="VsTestExitCode" />
    </RunDotNet>

    <Message Text="##teamcity[importData type='vstest' path='$(UnitTestFxTrxPhysicalFilePath)']"
      Importance="High"
      Condition="'$(TEAMCITY_VERSION)' != '' AND Exists('$(UnitTestFxTrxLogFile)')" />
    <Error Text="SharedFx.UnitTests failed with exit code '$(VsTestExitCode)'." Condition=" $(VsTestExitCode) != 0 " />
  </Target>

</Project>
