<Project>
  <Import Project="Legacy-MsBuild.targets" />

  <!-- packages required to implement the targets in this file-->
  <PropertyGroup>
    <PublishDependsOn>VerifyPackages;PushPackages</PublishDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="Restore;LegacyBuild;CreateTimestampFreePackages;Publish" />
  <Target Name="Publish" DependsOnTargets="$(PublishDependsOn)" />

  <Target Name="LegacyBuild" DependsOnTargets="_LocateMSBuildExe">
    <Error Text="MSBuild 15.0 could not be located."
      Condition="'$(MSBuildExePath)'==''" />

    <ItemGroup>
      <Arguments Include="
        &quot;$(MSBuildExePath)&quot;;
        &quot;$(MSBuildThisFileDirectory)Legacy-MSBuild.targets&quot;;
        /p:RepositoryRoot=$(RepositoryRoot);
        /flp:LogFile=&quot;$(ArtifactsDir)msbuild/Coherence-Signed.log;&quot;;
        /v:M;
        /m;
        /p:Sign=Sign /p:VerifySignatures=true /t:Policheck /t:Build /p:Sign=Sign /p:VerifySignatures=true" />
    </ItemGroup>

    <Exec Command="@(Arguments, ' ')" />
  </Target>

  <Target Name="_LocateMSBuildExe" Condition="Exists('$(MSBuildProgramFiles32)')">
    <ItemGroup>
      <MSBuild15ExePaths Include="$(MSBuildProgramFiles32)\Microsoft Visual Studio\**\MSBuild\15.0\Bin\MSBuild.exe" />
    </ItemGroup>

    <Warning
      Text="Unable to locate MSBuild 15.0 under $(MSBuildProgramFiles32)\Microsoft Visual Studio"
      Condition="'@(MSBuild15ExePaths)'==''"/>

    <PropertyGroup Condition="'@(MSBuild15ExePaths)'!=''">
      <MSBuildExePath>%(MSBuild15ExePaths.FullPath)</MSBuildExePath>
    </PropertyGroup>
  </Target>

  <Target Name="VerifyPackages" Condition="'$(VerifySignatures)' != 'false'">
    <PropertyGroup>
      <SignedPackagesDir>$(ArtifactsDir)Signed\Packages\</SignedPackagesDir>
      <NoTimestampPackagesDir>$(ArtifactsDir)Signed\Packages-NoTimeStamp\</NoTimestampPackagesDir>
    </PropertyGroup>

     <VerifyPackages
       ArtifactDirectory="$(SignedPackagesDir)"
       RuleFile="$(RepositoryRoot)NuGetPackageVerifier.json"
       Condition="Exists('$(SignedPackagesDir)')" />

     <VerifyPackages
       ArtifactDirectory="$(NoTimestampPackagesDir)"
       RuleFile="$(RepositoryRoot)NuGetPackageVerifier.json"
       Condition="Exists('$(NoTimestampPackagesDir)')" />
  </Target>

  <Target Name="CreateTimestampFreePackages" DependsOnTargets="_FindDotNetPath">
    <PropertyGroup>
      <PackagesDir>$(ArtifactsDir)Signed\Packages\</PackagesDir>
      <PackagesNoTimestampDir>$(ArtifactsDir)Signed\Packages-NoTimeStamp\</PackagesNoTimestampDir>

      <OOBPackagesDir>$(ArtifactsDir)Signed\OobPackages\</OOBPackagesDir>
      <OOBPackagesNoTimestampDir>$(ArtifactsDir)Signed\OobPackages-NoTimeStamp\</OOBPackagesNoTimestampDir>
    </PropertyGroup>

    <Exec Command="$(DotNetPath) run &quot;$(PackagesDir) &quot; &quot;$(PackagesNoTimestampDir) &quot;" WorkingDirectory="$(RepositoryRoot)src/CreateTimestampFreePackages" />
    <Exec Command="$(DotNetPath) run &quot;$(OOBPackagesDir) &quot; &quot;$(OOBPackagesNoTimestampDir) &quot;" WorkingDirectory="$(RepositoryRoot)src/CreateTimestampFreePackages" />

    <PropertyGroup>
      <ZipPath>$(RepositoryRoot)tools\7za.exe</ZipPath>
    </PropertyGroup>
    <ItemGroup>
      <TimeStampFreeMetaPackage Include="$(TimestampFreePackagesOutputPath)Microsoft.AspNetCore.All.*.nupkg" />
    </ItemGroup>

    <Exec Command="$(ZipPath) x -y -scsUTF-8 -o@(TimeStampFreeMetaPackage->'$(SignedAllMetapackagePath)%(Filename)') %(TimeStampFreeMetaPackage.Identity) > nul" />

    <ItemGroup>
      <TimeStampedManifestFiles Include="$(SignedAllMetapackagePath)**\aspnetcore-store-*.xml" />
    </ItemGroup>

    <Exec Command="powershell.exe -command &quot;(Get-Content %(TimeStampedManifestFiles.FullPath)).replace('-$(BuildNumber)','-final') | Set-Content %(TimeStampedManifestFiles.FullPath)&quot;"/>
    <Move SourceFiles="%(TimeStampedManifestFiles.FullPath)" DestinationFiles="$([System.String]::new('%(TimeStampedManifestFiles.FullPath)').Replace('-$(BuildNumber)', '-final'))" />

    <Exec Command="$(ZipPath) a -tzip -mx9 -r -y -uq0 $(TimestampFreePackagesOutputPath)%(TimeStampFreeMetaPackage.FileName).nupkg * > nul" WorkingDirectory="$(SignedAllMetapackagePath)%(TimeStampFreeMetaPackage.FileName)" />
  </Target>

  <Target Name="PushPackages" DependsOnTargets="_FindDotNetPath">
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceSignedDestinationDir)Packages -f $(PublishFeed)" />
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceSignedDestinationDir)OobPackages -f $(PublishFeed)" />
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceDestinationDir)ext -f $(PublishFeed)" />
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceDestinationDir)noship -f $(PublishFeed)" />
  </Target>

  <Target Name="_FindDotNetPath">
    <GetDotNetHost>
      <Output TaskParameter="ExecutablePath" PropertyName="DotNetPath" />
    </GetDotNetHost>
  </Target>
</Project>