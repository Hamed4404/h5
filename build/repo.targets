<Project>
  <Import Project="Legacy-MsBuild.targets" />

  <!-- packages required to implement the targets in this file-->
  <PropertyGroup>
    <BuildDependsOn>Restore;CopyAndExtractUnsignedPackages;VerifyUnsignedPackages;LegacyBuild;CreateTimestampFreePackages;Publish</BuildDependsOn>
    <PublishDependsOn>VerifySignedPackages;PushPackages</PublishDependsOn>
  </PropertyGroup>

  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />
  <Target Name="Publish" DependsOnTargets="$(PublishDependsOn)" />

  <Target Name="Clean">
    <RemoveDir Directories="$(IntermediateOutputPath);$(BinDirectory)" />
  </Target>

  <Target Name="CopyAndExtractUnsignedPackages" DependsOnTargets="Clean">
    <MakeDir Directories="$(OutputPath)" />
    <MakeDir Directories="$(CoherenceDestinationDir)" />
    <MakeDir Directories="$(CoherencePackageCacheDestinationDir)" />
    <MakeDir Directories="$(CoherenceDestinationDir)vsix" />

    <ItemGroup>
      <VSIXPaths Include="$(COHERENCE_DROP_LOCATION)\build\*.vsix" />
      <PackageCaches Include="$(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.zip;$(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.tar.gz" />
      <PackageCachesArtifacts
        Include="$(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.nuspec;
                $(COHERENCE_PACKAGECACHE_DROP_LOCATION)\*.txt" />
    </ItemGroup>

    <Error Text="COHERENCE_DROP_LOCATION is not specified. This requires a path like \\aspnetci\drops\Coherence\{branch}\{build-number}"
        Condition=" '$(COHERENCE_DROP_LOCATION)' == '' " />
    <Error Text="COHERENCE_PACKAGECACHE_DROP_LOCATION is not specified. This requires a path like \\aspnetci\drops\Coherence-PackageCache\{build-number}"
        Condition=" '$(COHERENCE_PACKAGECACHE_DROP_LOCATION)' == '' " />

    <Exec Command="(robocopy /NJH /NJS /NP /NS /NDL /NP /E /MIR /MT $(COHERENCE_DROP_LOCATION) $(CoherenceDestinationDir)) ^&amp; IF %ERRORLEVEL% LEQ 3 exit 0" />

    <Copy SourceFiles="@(VSIXPaths)" DestinationFolder="$(CoherenceDestinationDir)vsix" SkipUnchangedFiles="true" />
    <Copy
        SourceFiles="$([System.IO.Path]::ChangeExtension(%(VSIXPaths.FullPath), '.json'))"
        DestinationFolder="$(CoherenceDestinationDir)vsix"
        SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(PackageCaches)" DestinationFolder="$(CoherencePackageCacheDestinationDir)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(PackageCachesArtifacts)" DestinationFolder="$(CoherencePackageCacheDestinationDir)" SkipUnchangedFiles="true" />

    <ItemGroup>
      <UnsignedPackages Include="$(CoherenceDestinationDir)ship\*.nupkg" />
      <UnsignedOobPackages Include="$(CoherenceDestinationDir)shipoob\*.nupkg" />
      <UnsignedSymbolPackages Include="$(CoherenceDestinationDir)symbols\Microsoft.Data.Sqlite*.nupkg" />
      <UnsignedVSIX Include="$(CoherenceDestinationDir)vsix\*.vsix" />
      <UnsignedPackageCaches Include="$(CoherencePackageCacheDestinationDir)Build.RS.*.zip" />
    </ItemGroup>

    <Error Text="No packages found for signing." Condition="'@(UnsignedPackages)'==''" />
    <Error Text="No OOB packages found for signing." Condition="'@(UnsignedOobPackages)'==''" />
    <Error Text="No VSIX found for signing." Condition="'@(UnsignedVSIX)'==''" />
    <Error Text="No package cache found for signing." Condition="'@(UnsignedPackageCaches)'==''" />

    <PropertyGroup>
      <UnzipCommand>$(ToolsPath)7za.exe x -y -scsUTF-8</UnzipCommand>
    </PropertyGroup>

    <Exec Command="$(UnzipCommand) -o@(UnsignedPackages->'$(UnsignedPackagesPath)%(Filename)') %(UnsignedPackages.Identity) > nul" />
    <Exec Command="$(UnzipCommand) -o@(UnsignedOobPackages->'$(UnsignedOobPackagesPath)%(Filename)') %(UnsignedOobPackages.Identity) > nul" />
    <Exec Command="$(UnzipCommand) -o@(UnsignedSymbolPackages->'$(UnsignedSymbolPackagesPath)%(Filename)') %(UnsignedSymbolPackages.Identity) > nul"
        Condition=" '@(UnsignedSymbolPackages)' != '' " />
    <Exec Command="$(UnzipCommand) -o@(UnsignedVSIX->'$(UnsignedVSIXPath)%(Filename)') %(UnsignedVSIX.Identity) > nul" />
    <Exec Command="$(UnzipCommand) -o@(UnsignedPackageCaches->'$(UnsignedPackageCachePath)%(Filename)') %(UnsignedPackageCaches.Identity) > nul" />

    <RepoTasks.RenameEncodedFolders RootDirectory="$(UnsignedPackagesPath)" />
    <RepoTasks.RenameEncodedFolders RootDirectory="$(UnsignedOobPackagesPath)" />
  </Target>

  <!--
  Runs the default composite rule on packages that we intend on shipping. This is meant to ensure we aren't missing verification
  due to a repository mis-configuration
  -->
  <Target Name="VerifyUnsignedPackages" Condition="'$(VerifySignatures)' != 'false'">
    <PropertyGroup>
      <CoherencePackagesDir>$(ArtifactsDir)coherence\ship\</CoherencePackagesDir>
    </PropertyGroup>

     <VerifyPackages
       ArtifactDirectory="$(CoherencePackagesDir)"
       RuleFile="$(RepositoryRoot)NuGetPackageVerifier.json"
       Condition="Exists('$(CoherencePackagesDir)')" />
  </Target>

  <Target Name="LegacyBuild" DependsOnTargets="_LocateMSBuildExe">
    <Error Text="MSBuild 15.0 could not be located."
      Condition="'$(MSBuildExePath)'==''" />

    <ItemGroup>
      <Arguments Include="
        &quot;$(MSBuildExePath)&quot;;
        &quot;$(MSBuildThisFileDirectory)Legacy-MSBuild.targets&quot;;
        /p:RepositoryRoot=$(RepositoryRoot);
        /flp:LogFile=&quot;$(ArtifactsDir)msbuild/Coherence-Signed.log;&quot;;
        /v:M;
        /m;
        /p:Sign=Sign /p:VerifySignatures=true /t:Policheck /t:Build /p:Sign=Sign /p:VerifySignatures=true" />
    </ItemGroup>

    <Exec Command="@(Arguments, ' ')" />
  </Target>

  <Target Name="_LocateMSBuildExe" Condition="Exists('$(MSBuildProgramFiles32)')">
    <ItemGroup>
      <MSBuild15ExePaths Include="$(MSBuildProgramFiles32)\Microsoft Visual Studio\**\MSBuild\15.0\Bin\MSBuild.exe" />
    </ItemGroup>

    <Warning
      Text="Unable to locate MSBuild 15.0 under $(MSBuildProgramFiles32)\Microsoft Visual Studio"
      Condition="'@(MSBuild15ExePaths)'==''"/>

    <PropertyGroup Condition="'@(MSBuild15ExePaths)'!=''">
      <MSBuildExePath>%(MSBuild15ExePaths.FullPath)</MSBuildExePath>
    </PropertyGroup>
  </Target>

  <Target Name="VerifySignedPackages" Condition="'$(VerifySignatures)' != 'false'">
    <PropertyGroup>
      <SignedPackagesDir>$(ArtifactsDir)Signed\Packages\</SignedPackagesDir>
      <NoTimestampPackagesDir>$(ArtifactsDir)Signed\Packages-NoTimeStamp\</NoTimestampPackagesDir>
    </PropertyGroup>

     <VerifyPackages
       ArtifactDirectory="$(SignedPackagesDir)"
       RuleFile="$(RepositoryRoot)NuGetPackageVerifier-Signed.json"
       Condition="Exists('$(SignedPackagesDir)')" />

     <VerifyPackages
       ArtifactDirectory="$(NoTimestampPackagesDir)"
       RuleFile="$(RepositoryRoot)NuGetPackageVerifier-Signed.json"
       Condition="Exists('$(NoTimestampPackagesDir)')" />
  </Target>

  <Target Name="CreateTimestampFreePackages" DependsOnTargets="_FindDotNetPath">
    <PropertyGroup>
      <PackagesDir>$(ArtifactsDir)Signed\Packages\</PackagesDir>
      <PackagesNoTimestampDir>$(ArtifactsDir)Signed\Packages-NoTimeStamp\</PackagesNoTimestampDir>

      <OOBPackagesDir>$(ArtifactsDir)Signed\OobPackages\</OOBPackagesDir>
      <OOBPackagesNoTimestampDir>$(ArtifactsDir)Signed\OobPackages-NoTimeStamp\</OOBPackagesNoTimestampDir>

      <ZipPath>$(RepositoryRoot)tools\7za.exe</ZipPath>
    </PropertyGroup>

    <Exec Command="$(DotNetPath) run &quot;$(PackagesDir) &quot; &quot;$(PackagesNoTimestampDir) &quot;" WorkingDirectory="$(RepositoryRoot)src/CreateTimestampFreePackages" />
    <Exec Command="$(DotNetPath) run &quot;$(OOBPackagesDir) &quot; &quot;$(OOBPackagesNoTimestampDir) &quot;" WorkingDirectory="$(RepositoryRoot)src/CreateTimestampFreePackages" />

    <ItemGroup>
      <TimeStampFreeMetaPackage Include="$(TimestampFreePackagesOutputPath)Microsoft.AspNetCore.All.*.nupkg" />
      <TimeStampMetaPackage Include="$(PackagesDir)Microsoft.AspNetCore.All.*.nupkg" />
    </ItemGroup>

    <Exec Command="$(ZipPath) x -y -scsUTF-8 -o@(TimeStampFreeMetaPackage->'$(SignedAllMetapackagePath)%(Filename)') %(TimeStampFreeMetaPackage.Identity) > nul" />

    <ItemGroup>
      <TimeStampedManifestFiles Include="$(SignedAllMetapackagePath)**\aspnetcore-store-*.xml" />
    </ItemGroup>

    <PropertyGroup>
      <VersionToReplace>-$(BuildNumber)</VersionToReplace>
      <VersionReplacement>-final</VersionReplacement>
      <VersionToReplace Condition="$([System.String]::new('%(TimeStampMetaPackage.FileName)').EndsWith('-rtm-$(BuildNumber)'))">-rtm-$(BuildNumber)</VersionToReplace>
      <VersionReplacement Condition="$([System.String]::new('%(TimeStampMetaPackage.FileName)').EndsWith('-rtm-$(BuildNumber)'))"></VersionReplacement>
    </PropertyGroup>

    <Exec Command="powershell.exe -command &quot;(Get-Content %(TimeStampedManifestFiles.FullPath)).replace('$(VersionToReplace)','$(VersionReplacement)') | Set-Content %(TimeStampedManifestFiles.FullPath)&quot;"/>
    <Move SourceFiles="%(TimeStampedManifestFiles.FullPath)" DestinationFiles="$([System.String]::new('%(TimeStampedManifestFiles.FullPath)').Replace('$(VersionToReplace)', '$(VersionReplacement)'))" />

    <Exec Command="$(ZipPath) a -tzip -mx9 -r -y -uq0 $(TimestampFreePackagesOutputPath)%(TimeStampFreeMetaPackage.FileName).nupkg * > nul" WorkingDirectory="$(SignedAllMetapackagePath)%(TimeStampFreeMetaPackage.FileName)" />
  </Target>

  <Target Name="PushPackages" DependsOnTargets="_FindDotNetPath">
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceSignedDestinationDir)Packages -f $(PublishFeed)" />
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceSignedDestinationDir)OobPackages -f $(PublishFeed)" />
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceDestinationDir)ext -f $(PublishFeed)" />
    <Exec Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(CoherenceDestinationDir)noship -f $(PublishFeed)" />
  </Target>

  <Target Name="_FindDotNetPath">
    <GetDotNetHost>
      <Output TaskParameter="ExecutablePath" PropertyName="DotNetPath" />
    </GetDotNetHost>
  </Target>
</Project>