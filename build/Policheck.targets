<Project>
  <PropertyGroup>
    <_PoliCheckOutputFile>$(Temp)\$([System.Guid]::NewGuid()).xml</_PoliCheckOutputFile>
  </PropertyGroup>

  <Target Name="PoliCheck">
    <!-- These are terms that appear frequently but are not used offensively e.g. red is a color constant name. -->
    <PropertyGroup>
      <Exclusions>countries;country;race</Exclusions>
    </PropertyGroup>

    <ItemGroup>
      <!-- List is sorted OrdinalIgnoreCase. Path must be the relative path (non-wildcard) of the file inside the symbols nupkg -->

      <SrcExclusions Include="
        src\Microsoft.AspNetCore.TestHost\ResponseStream.cs;
        src\Microsoft.AspNetCore.Server.IntegrationTesting\Deployers\IISExpressDeployer.cs;
        src\Microsoft.AspNetCore.Server.IntegrationTesting\Deployers\SelfHostDeployer.cs">
        <term>hang</term>
        <Justification>Refers to a stuck process/thread.</Justification>
      </SrcExclusions>
      <SrcExclusions Include="
        src\Microsoft.AspNetCore.Mvc.DataAnnotations\Internal\DataAnnotationsMetadataProvider.cs">
        <term>hanging</term>
        <Justification>Refers to a stuck process/thread.</Justification>
      </SrcExclusions>
      <SrcExclusions Include="
        src\Microsoft.AspNetCore.Sockets\ConnectionManager.cs">
        <term>hung</term>
        <Justification>Refers to a stuck process/thread.</Justification>
      </SrcExclusions>
      <SrcExclusions Include="
        src\EFCore.Specification.Tests\TestModels\ConcurrencyModel\F1Context.cs">
        <term>ho</term>
        <Justification>Part of a name</Justification>
      </SrcExclusions>
    </ItemGroup>

    <ItemGroup>
      <!-- Path must be the relative path (non-wildcard) of the file inside the symbols nupkg -->
      <FileExclusions Include="
        src\EFCore.Specification.Tests\TestModels\Northwind\NorthwindData.Objects.cs;">
        <Justification>Northwind database contains too many violations to track them individually.</Justification>
      </FileExclusions>
      <FileExclusions Include="
        tools\runtimes\unix\lib\netstandard1.3\System.Text.Encoding.CodePages.dll;
        tools\runtimes\win\lib\netstandard1.3\System.Text.Encoding.CodePages.dll">
        <Justification>This BCL library includes geopolitical terms to support localized code pages.</Justification>
      </FileExclusions>
      <FileExclusions Include="
        runtimes\win-x64\lib\netcoreapp2.1\System.Text.Encoding.CodePages.dll;
        runtimes\win-x86\lib\netcoreapp2.1\System.Text.Encoding.CodePages.dll;
        runtimes\osx-x64\lib\netcoreapp2.1\System.Text.Encoding.CodePages.dll;
        runtimes\linux-x64\lib\netcoreapp2.1\System.Text.Encoding.CodePages.dll">
        <Justification>This BCL library includes geopolitical terms to support localized code pages.</Justification>
      </FileExclusions>

      <FileExclusions Include="
        src\UI\wwwroot\Identity\lib\jquery\dist\jquery.js;
        src\UI\wwwroot\Identity\lib\jquery-validation\dist\additional-methods.js;
        Templates\Identity\wwwroot\lib\jquery\dist\jquery.js;
        Templates\Identity\wwwroot\lib\jquery-validation\dist\additional-methods.js">
        <Justification>Third party code shipping in our packages</Justification>
      </FileExclusions>
    </ItemGroup>

    <PropertyGroup>
      <_PoliCheckDirectory>$(MSBuildProgramFiles32)\Microsoft\Policheck\</_PoliCheckDirectory>
      <_PoliCheckDirectory Condition="!Exists('$(_PoliCheckDirectory)')">$(ProgramFiles)\Microsoft\Policheck\</_PoliCheckDirectory>
      <_PoliCheckFileTypesPath>$(_PoliCheckDirectory)Config\FTSets.xml</_PoliCheckFileTypesPath>
      <_PoliCheckExe>$(_PoliCheckDirectory)policheck.exe</_PoliCheckExe>

      <_PoliCheckArguments>/f:&quot;$(PoliCheckPath.TrimEnd('\'))&quot; /t:"9" /o:&quot;$(_PoliCheckOutputFile)&quot; /ge:0 /pe:0 /fc:1 /xs:1</_PoliCheckArguments>
    </PropertyGroup>

    <Error
      Text="Policheck.exe could not be found. See http://toolbox/policheck for installation instructions."
      Condition="!Exists('$(_PoliCheckExe)') AND '$(LocalBuild)'!='true'" />

    <Warning
      Text="Policheck.exe could not be found. See http://toolbox/policheck for installation instructions. Proceeding without running the tool."
      Condition="!Exists('$(_PoliCheckExe)') AND '$(LocalBuild)'=='true'" />

    <Exec
      Command="&quot;$(_PoliCheckExe)&quot; $(_PoliCheckArguments)"
      IgnoreExitCode="true"
      Condition="Exists('$(_PoliCheckExe)')" />

    <RepoTasks.VerifyPoliCheckResults
      PoliCheckOutputFile="$(_PoliCheckOutputFile)"
      ExcludeTerms="$(Exclusions)"
      ExcludeFiles="@(FileExclusions)"
      DetailedExclusions="@(SrcExclusions)"
      Condition="Exists('$(_PoliCheckOutputFile)')" />

    <CallTarget Targets="_CleanupPolicheckOutputs" />
    <OnError ExecuteTargets="_CleanupPolicheckOutputs" />
  </Target>

  <Target Name="_CleanupPolicheckOutputs">
    <Delete Files="$(_PoliCheckOutputFile)" TreatErrorsAsWarnings="true" Condition="Exists('$(_PoliCheckOutputFile)')" />
  </Target>
</Project>
