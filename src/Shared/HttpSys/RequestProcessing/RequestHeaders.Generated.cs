// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
// <auto-generated />

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Primitives;

namespace Microsoft.AspNetCore.HttpSys.Internal
{
    [GeneratedCode("TextTemplatingFileGenerator", "")]
    internal partial class RequestHeaders
    {
        private struct HeaderFields
        {
            // Tracks if individual fields have been read from native or set directly.
            // Once read or set, their presence in the collection is marked by if their StringValues is null or not.
            public UInt32 _flag0, _flag1;

            public StringValues _Accept;
            public StringValues _AcceptCharset;
            public StringValues _AcceptEncoding;
            public StringValues _AcceptLanguage;
            public StringValues _Allow;
            public StringValues _Authorization;
            public StringValues _CacheControl;
            public StringValues _Connection;
            public StringValues _ContentEncoding;
            public StringValues _ContentLanguage;
            public StringValues _ContentLength;
            public StringValues _ContentLocation;
            public StringValues _ContentMd5;
            public StringValues _ContentRange;
            public StringValues _ContentType;
            public StringValues _Cookie;
            public StringValues _Date;
            public StringValues _Expect;
            public StringValues _Expires;
            public StringValues _From;
            public StringValues _Host;
            public StringValues _IfMatch;
            public StringValues _IfModifiedSince;
            public StringValues _IfNoneMatch;
            public StringValues _IfRange;
            public StringValues _IfUnmodifiedSince;
            public StringValues _KeepAlive;
            public StringValues _LastModified;
            public StringValues _MaxForwards;
            public StringValues _Pragma;
            public StringValues _ProxyAuthorization;
            public StringValues _Range;
            public StringValues _Referer;
            public StringValues _Te;
            public StringValues _Trailer;
            public StringValues _TransferEncoding;
            public StringValues _Translate;
            public StringValues _Upgrade;
            public StringValues _UserAgent;
            public StringValues _Via;
            public StringValues _Warning;
        }

        private HeaderFields _fields;

        internal StringValues Accept
        {
            get
			{
			    if (!((_fields._flag0 & 0x1u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Accept);
					if (nativeValue != null)
					{
						_fields._Accept = nativeValue;
					}
                    _fields._flag0 |= 0x1u;
				}
			    return _fields._Accept;
		    }
            set 
            {
                _fields._flag0 |= 0x1u;
                _fields._Accept = value;
            }
        }

        internal StringValues AcceptCharset
        {
            get
			{
			    if (!((_fields._flag0 & 0x2u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.AcceptCharset);
					if (nativeValue != null)
					{
						_fields._AcceptCharset = nativeValue;
					}
                    _fields._flag0 |= 0x2u;
				}
			    return _fields._AcceptCharset;
		    }
            set 
            {
                _fields._flag0 |= 0x2u;
                _fields._AcceptCharset = value;
            }
        }

        internal StringValues AcceptEncoding
        {
            get
			{
			    if (!((_fields._flag0 & 0x4u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.AcceptEncoding);
					if (nativeValue != null)
					{
						_fields._AcceptEncoding = nativeValue;
					}
                    _fields._flag0 |= 0x4u;
				}
			    return _fields._AcceptEncoding;
		    }
            set 
            {
                _fields._flag0 |= 0x4u;
                _fields._AcceptEncoding = value;
            }
        }

        internal StringValues AcceptLanguage
        {
            get
			{
			    if (!((_fields._flag0 & 0x8u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.AcceptLanguage);
					if (nativeValue != null)
					{
						_fields._AcceptLanguage = nativeValue;
					}
                    _fields._flag0 |= 0x8u;
				}
			    return _fields._AcceptLanguage;
		    }
            set 
            {
                _fields._flag0 |= 0x8u;
                _fields._AcceptLanguage = value;
            }
        }

        internal StringValues Allow
        {
            get
			{
			    if (!((_fields._flag0 & 0x10u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Allow);
					if (nativeValue != null)
					{
						_fields._Allow = nativeValue;
					}
                    _fields._flag0 |= 0x10u;
				}
			    return _fields._Allow;
		    }
            set 
            {
                _fields._flag0 |= 0x10u;
                _fields._Allow = value;
            }
        }

        internal StringValues Authorization
        {
            get
			{
			    if (!((_fields._flag0 & 0x20u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Authorization);
					if (nativeValue != null)
					{
						_fields._Authorization = nativeValue;
					}
                    _fields._flag0 |= 0x20u;
				}
			    return _fields._Authorization;
		    }
            set 
            {
                _fields._flag0 |= 0x20u;
                _fields._Authorization = value;
            }
        }

        internal StringValues CacheControl
        {
            get
			{
			    if (!((_fields._flag0 & 0x40u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.CacheControl);
					if (nativeValue != null)
					{
						_fields._CacheControl = nativeValue;
					}
                    _fields._flag0 |= 0x40u;
				}
			    return _fields._CacheControl;
		    }
            set 
            {
                _fields._flag0 |= 0x40u;
                _fields._CacheControl = value;
            }
        }

        internal StringValues Connection
        {
            get
			{
			    if (!((_fields._flag0 & 0x80u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Connection);
					if (nativeValue != null)
					{
						_fields._Connection = nativeValue;
					}
                    _fields._flag0 |= 0x80u;
				}
			    return _fields._Connection;
		    }
            set 
            {
                _fields._flag0 |= 0x80u;
                _fields._Connection = value;
            }
        }

        internal StringValues ContentEncoding
        {
            get
			{
			    if (!((_fields._flag0 & 0x100u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentEncoding);
					if (nativeValue != null)
					{
						_fields._ContentEncoding = nativeValue;
					}
                    _fields._flag0 |= 0x100u;
				}
			    return _fields._ContentEncoding;
		    }
            set 
            {
                _fields._flag0 |= 0x100u;
                _fields._ContentEncoding = value;
            }
        }

        internal StringValues ContentLanguage
        {
            get
			{
			    if (!((_fields._flag0 & 0x200u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentLanguage);
					if (nativeValue != null)
					{
						_fields._ContentLanguage = nativeValue;
					}
                    _fields._flag0 |= 0x200u;
				}
			    return _fields._ContentLanguage;
		    }
            set 
            {
                _fields._flag0 |= 0x200u;
                _fields._ContentLanguage = value;
            }
        }

        internal StringValues ContentLength
        {
            get
			{
			    if (!((_fields._flag0 & 0x400u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentLength);
					if (nativeValue != null)
					{
						_fields._ContentLength = nativeValue;
					}
                    _fields._flag0 |= 0x400u;
				}
			    return _fields._ContentLength;
		    }
            set 
            {
                _fields._flag0 |= 0x400u;
                _fields._ContentLength = value;
            }
        }

        internal StringValues ContentLocation
        {
            get
			{
			    if (!((_fields._flag0 & 0x800u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentLocation);
					if (nativeValue != null)
					{
						_fields._ContentLocation = nativeValue;
					}
                    _fields._flag0 |= 0x800u;
				}
			    return _fields._ContentLocation;
		    }
            set 
            {
                _fields._flag0 |= 0x800u;
                _fields._ContentLocation = value;
            }
        }

        internal StringValues ContentMd5
        {
            get
			{
			    if (!((_fields._flag0 & 0x1000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentMd5);
					if (nativeValue != null)
					{
						_fields._ContentMd5 = nativeValue;
					}
                    _fields._flag0 |= 0x1000u;
				}
			    return _fields._ContentMd5;
		    }
            set 
            {
                _fields._flag0 |= 0x1000u;
                _fields._ContentMd5 = value;
            }
        }

        internal StringValues ContentRange
        {
            get
			{
			    if (!((_fields._flag0 & 0x2000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentRange);
					if (nativeValue != null)
					{
						_fields._ContentRange = nativeValue;
					}
                    _fields._flag0 |= 0x2000u;
				}
			    return _fields._ContentRange;
		    }
            set 
            {
                _fields._flag0 |= 0x2000u;
                _fields._ContentRange = value;
            }
        }

        internal StringValues ContentType
        {
            get
			{
			    if (!((_fields._flag0 & 0x4000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ContentType);
					if (nativeValue != null)
					{
						_fields._ContentType = nativeValue;
					}
                    _fields._flag0 |= 0x4000u;
				}
			    return _fields._ContentType;
		    }
            set 
            {
                _fields._flag0 |= 0x4000u;
                _fields._ContentType = value;
            }
        }

        internal StringValues Cookie
        {
            get
			{
			    if (!((_fields._flag0 & 0x8000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Cookie);
					if (nativeValue != null)
					{
						_fields._Cookie = nativeValue;
					}
                    _fields._flag0 |= 0x8000u;
				}
			    return _fields._Cookie;
		    }
            set 
            {
                _fields._flag0 |= 0x8000u;
                _fields._Cookie = value;
            }
        }

        internal StringValues Date
        {
            get
			{
			    if (!((_fields._flag0 & 0x10000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Date);
					if (nativeValue != null)
					{
						_fields._Date = nativeValue;
					}
                    _fields._flag0 |= 0x10000u;
				}
			    return _fields._Date;
		    }
            set 
            {
                _fields._flag0 |= 0x10000u;
                _fields._Date = value;
            }
        }

        internal StringValues Expect
        {
            get
			{
			    if (!((_fields._flag0 & 0x20000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Expect);
					if (nativeValue != null)
					{
						_fields._Expect = nativeValue;
					}
                    _fields._flag0 |= 0x20000u;
				}
			    return _fields._Expect;
		    }
            set 
            {
                _fields._flag0 |= 0x20000u;
                _fields._Expect = value;
            }
        }

        internal StringValues Expires
        {
            get
			{
			    if (!((_fields._flag0 & 0x40000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Expires);
					if (nativeValue != null)
					{
						_fields._Expires = nativeValue;
					}
                    _fields._flag0 |= 0x40000u;
				}
			    return _fields._Expires;
		    }
            set 
            {
                _fields._flag0 |= 0x40000u;
                _fields._Expires = value;
            }
        }

        internal StringValues From
        {
            get
			{
			    if (!((_fields._flag0 & 0x80000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.From);
					if (nativeValue != null)
					{
						_fields._From = nativeValue;
					}
                    _fields._flag0 |= 0x80000u;
				}
			    return _fields._From;
		    }
            set 
            {
                _fields._flag0 |= 0x80000u;
                _fields._From = value;
            }
        }

        internal StringValues Host
        {
            get
			{
			    if (!((_fields._flag0 & 0x100000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Host);
					if (nativeValue != null)
					{
						_fields._Host = nativeValue;
					}
                    _fields._flag0 |= 0x100000u;
				}
			    return _fields._Host;
		    }
            set 
            {
                _fields._flag0 |= 0x100000u;
                _fields._Host = value;
            }
        }

        internal StringValues IfMatch
        {
            get
			{
			    if (!((_fields._flag0 & 0x200000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfMatch);
					if (nativeValue != null)
					{
						_fields._IfMatch = nativeValue;
					}
                    _fields._flag0 |= 0x200000u;
				}
			    return _fields._IfMatch;
		    }
            set 
            {
                _fields._flag0 |= 0x200000u;
                _fields._IfMatch = value;
            }
        }

        internal StringValues IfModifiedSince
        {
            get
			{
			    if (!((_fields._flag0 & 0x400000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfModifiedSince);
					if (nativeValue != null)
					{
						_fields._IfModifiedSince = nativeValue;
					}
                    _fields._flag0 |= 0x400000u;
				}
			    return _fields._IfModifiedSince;
		    }
            set 
            {
                _fields._flag0 |= 0x400000u;
                _fields._IfModifiedSince = value;
            }
        }

        internal StringValues IfNoneMatch
        {
            get
			{
			    if (!((_fields._flag0 & 0x800000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfNoneMatch);
					if (nativeValue != null)
					{
						_fields._IfNoneMatch = nativeValue;
					}
                    _fields._flag0 |= 0x800000u;
				}
			    return _fields._IfNoneMatch;
		    }
            set 
            {
                _fields._flag0 |= 0x800000u;
                _fields._IfNoneMatch = value;
            }
        }

        internal StringValues IfRange
        {
            get
			{
			    if (!((_fields._flag0 & 0x1000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfRange);
					if (nativeValue != null)
					{
						_fields._IfRange = nativeValue;
					}
                    _fields._flag0 |= 0x1000000u;
				}
			    return _fields._IfRange;
		    }
            set 
            {
                _fields._flag0 |= 0x1000000u;
                _fields._IfRange = value;
            }
        }

        internal StringValues IfUnmodifiedSince
        {
            get
			{
			    if (!((_fields._flag0 & 0x2000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.IfUnmodifiedSince);
					if (nativeValue != null)
					{
						_fields._IfUnmodifiedSince = nativeValue;
					}
                    _fields._flag0 |= 0x2000000u;
				}
			    return _fields._IfUnmodifiedSince;
		    }
            set 
            {
                _fields._flag0 |= 0x2000000u;
                _fields._IfUnmodifiedSince = value;
            }
        }

        internal StringValues KeepAlive
        {
            get
			{
			    if (!((_fields._flag0 & 0x4000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.KeepAlive);
					if (nativeValue != null)
					{
						_fields._KeepAlive = nativeValue;
					}
                    _fields._flag0 |= 0x4000000u;
				}
			    return _fields._KeepAlive;
		    }
            set 
            {
                _fields._flag0 |= 0x4000000u;
                _fields._KeepAlive = value;
            }
        }

        internal StringValues LastModified
        {
            get
			{
			    if (!((_fields._flag0 & 0x8000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.LastModified);
					if (nativeValue != null)
					{
						_fields._LastModified = nativeValue;
					}
                    _fields._flag0 |= 0x8000000u;
				}
			    return _fields._LastModified;
		    }
            set 
            {
                _fields._flag0 |= 0x8000000u;
                _fields._LastModified = value;
            }
        }

        internal StringValues MaxForwards
        {
            get
			{
			    if (!((_fields._flag0 & 0x10000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.MaxForwards);
					if (nativeValue != null)
					{
						_fields._MaxForwards = nativeValue;
					}
                    _fields._flag0 |= 0x10000000u;
				}
			    return _fields._MaxForwards;
		    }
            set 
            {
                _fields._flag0 |= 0x10000000u;
                _fields._MaxForwards = value;
            }
        }

        internal StringValues Pragma
        {
            get
			{
			    if (!((_fields._flag0 & 0x20000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Pragma);
					if (nativeValue != null)
					{
						_fields._Pragma = nativeValue;
					}
                    _fields._flag0 |= 0x20000000u;
				}
			    return _fields._Pragma;
		    }
            set 
            {
                _fields._flag0 |= 0x20000000u;
                _fields._Pragma = value;
            }
        }

        internal StringValues ProxyAuthorization
        {
            get
			{
			    if (!((_fields._flag0 & 0x40000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.ProxyAuthorization);
					if (nativeValue != null)
					{
						_fields._ProxyAuthorization = nativeValue;
					}
                    _fields._flag0 |= 0x40000000u;
				}
			    return _fields._ProxyAuthorization;
		    }
            set 
            {
                _fields._flag0 |= 0x40000000u;
                _fields._ProxyAuthorization = value;
            }
        }

        internal StringValues Range
        {
            get
			{
			    if (!((_fields._flag0 & 0x80000000u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Range);
					if (nativeValue != null)
					{
						_fields._Range = nativeValue;
					}
                    _fields._flag0 |= 0x80000000u;
				}
			    return _fields._Range;
		    }
            set 
            {
                _fields._flag0 |= 0x80000000u;
                _fields._Range = value;
            }
        }

        internal StringValues Referer
        {
            get
			{
			    if (!((_fields._flag1 & 0x1u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Referer);
					if (nativeValue != null)
					{
						_fields._Referer = nativeValue;
					}
                    _fields._flag1 |= 0x1u;
				}
			    return _fields._Referer;
		    }
            set 
            {
                _fields._flag1 |= 0x1u;
                _fields._Referer = value;
            }
        }

        internal StringValues Te
        {
            get
			{
			    if (!((_fields._flag1 & 0x2u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Te);
					if (nativeValue != null)
					{
						_fields._Te = nativeValue;
					}
                    _fields._flag1 |= 0x2u;
				}
			    return _fields._Te;
		    }
            set 
            {
                _fields._flag1 |= 0x2u;
                _fields._Te = value;
            }
        }

        internal StringValues Trailer
        {
            get
			{
			    if (!((_fields._flag1 & 0x4u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Trailer);
					if (nativeValue != null)
					{
						_fields._Trailer = nativeValue;
					}
                    _fields._flag1 |= 0x4u;
				}
			    return _fields._Trailer;
		    }
            set 
            {
                _fields._flag1 |= 0x4u;
                _fields._Trailer = value;
            }
        }

        internal StringValues TransferEncoding
        {
            get
			{
			    if (!((_fields._flag1 & 0x8u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.TransferEncoding);
					if (nativeValue != null)
					{
						_fields._TransferEncoding = nativeValue;
					}
                    _fields._flag1 |= 0x8u;
				}
			    return _fields._TransferEncoding;
		    }
            set 
            {
                _fields._flag1 |= 0x8u;
                _fields._TransferEncoding = value;
            }
        }

        internal StringValues Translate
        {
            get
			{
			    if (!((_fields._flag1 & 0x10u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Translate);
					if (nativeValue != null)
					{
						_fields._Translate = nativeValue;
					}
                    _fields._flag1 |= 0x10u;
				}
			    return _fields._Translate;
		    }
            set 
            {
                _fields._flag1 |= 0x10u;
                _fields._Translate = value;
            }
        }

        internal StringValues Upgrade
        {
            get
			{
			    if (!((_fields._flag1 & 0x20u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Upgrade);
					if (nativeValue != null)
					{
						_fields._Upgrade = nativeValue;
					}
                    _fields._flag1 |= 0x20u;
				}
			    return _fields._Upgrade;
		    }
            set 
            {
                _fields._flag1 |= 0x20u;
                _fields._Upgrade = value;
            }
        }

        internal StringValues UserAgent
        {
            get
			{
			    if (!((_fields._flag1 & 0x40u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.UserAgent);
					if (nativeValue != null)
					{
						_fields._UserAgent = nativeValue;
					}
                    _fields._flag1 |= 0x40u;
				}
			    return _fields._UserAgent;
		    }
            set 
            {
                _fields._flag1 |= 0x40u;
                _fields._UserAgent = value;
            }
        }

        internal StringValues Via
        {
            get
			{
			    if (!((_fields._flag1 & 0x80u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Via);
					if (nativeValue != null)
					{
						_fields._Via = nativeValue;
					}
                    _fields._flag1 |= 0x80u;
				}
			    return _fields._Via;
		    }
            set 
            {
                _fields._flag1 |= 0x80u;
                _fields._Via = value;
            }
        }

        internal StringValues Warning
        {
            get
			{
			    if (!((_fields._flag1 & 0x100u) != 0))
				{
					string nativeValue = GetKnownHeader(HttpSysRequestHeader.Warning);
					if (nativeValue != null)
					{
						_fields._Warning = nativeValue;
					}
                    _fields._flag1 |= 0x100u;
				}
			    return _fields._Warning;
		    }
            set 
            {
                _fields._flag1 |= 0x100u;
                _fields._Warning = value;
            }
        }

        private bool PropertiesContainsKey(string key)
        {
            switch (key.Length)
            {
                case 2:
                    if (string.Equals(key, "Te", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Te.Count > 0;
                    }
                   break;
                case 3:
                    if (string.Equals(key, "Via", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Via.Count > 0;
                    }
                   break;
                case 4:
                    if (string.Equals(key, "Date", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Date.Count > 0;
                    }
                    if (string.Equals(key, "From", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return From.Count > 0;
                    }
                    if (string.Equals(key, "Host", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Host.Count > 0;
                    }
                   break;
                case 5:
                    if (string.Equals(key, "Allow", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Allow.Count > 0;
                    }
                    if (string.Equals(key, "Range", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Range.Count > 0;
                    }
                   break;
                case 6:
                    if (string.Equals(key, "Accept", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Accept.Count > 0;
                    }
                    if (string.Equals(key, "Cookie", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Cookie.Count > 0;
                    }
                    if (string.Equals(key, "Expect", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Expect.Count > 0;
                    }
                    if (string.Equals(key, "Pragma", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Pragma.Count > 0;
                    }
                   break;
                case 7:
                    if (string.Equals(key, "Expires", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Expires.Count > 0;
                    }
                    if (string.Equals(key, "Referer", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Referer.Count > 0;
                    }
                    if (string.Equals(key, "Trailer", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Trailer.Count > 0;
                    }
                    if (string.Equals(key, "Upgrade", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Upgrade.Count > 0;
                    }
                    if (string.Equals(key, "Warning", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Warning.Count > 0;
                    }
                   break;
                case 8:
                    if (string.Equals(key, "If-Match", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return IfMatch.Count > 0;
                    }
                    if (string.Equals(key, "If-Range", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return IfRange.Count > 0;
                    }
                   break;
                case 9:
                    if (string.Equals(key, "Translate", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Translate.Count > 0;
                    }
                   break;
                case 10:
                    if (string.Equals(key, "Connection", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Connection.Count > 0;
                    }
                    if (string.Equals(key, "Keep-Alive", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return KeepAlive.Count > 0;
                    }
                    if (string.Equals(key, "User-Agent", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return UserAgent.Count > 0;
                    }
                   break;
                case 11:
                    if (string.Equals(key, "Content-Md5", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ContentMd5.Count > 0;
                    }
                   break;
                case 12:
                    if (string.Equals(key, "Content-Type", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ContentType.Count > 0;
                    }
                    if (string.Equals(key, "Max-Forwards", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return MaxForwards.Count > 0;
                    }
                   break;
                case 13:
                    if (string.Equals(key, "Authorization", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return Authorization.Count > 0;
                    }
                    if (string.Equals(key, "Cache-Control", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return CacheControl.Count > 0;
                    }
                    if (string.Equals(key, "Content-Range", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ContentRange.Count > 0;
                    }
                    if (string.Equals(key, "If-None-Match", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return IfNoneMatch.Count > 0;
                    }
                    if (string.Equals(key, "Last-Modified", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return LastModified.Count > 0;
                    }
                   break;
                case 14:
                    if (string.Equals(key, "Accept-Charset", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return AcceptCharset.Count > 0;
                    }
                    if (string.Equals(key, "Content-Length", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ContentLength.Count > 0;
                    }
                   break;
                case 15:
                    if (string.Equals(key, "Accept-Encoding", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return AcceptEncoding.Count > 0;
                    }
                    if (string.Equals(key, "Accept-Language", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return AcceptLanguage.Count > 0;
                    }
                   break;
                case 16:
                    if (string.Equals(key, "Content-Encoding", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ContentEncoding.Count > 0;
                    }
                    if (string.Equals(key, "Content-Language", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ContentLanguage.Count > 0;
                    }
                    if (string.Equals(key, "Content-Location", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ContentLocation.Count > 0;
                    }
                   break;
                case 17:
                    if (string.Equals(key, "If-Modified-Since", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return IfModifiedSince.Count > 0;
                    }
                    if (string.Equals(key, "Transfer-Encoding", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return TransferEncoding.Count > 0;
                    }
                   break;
                case 19:
                    if (string.Equals(key, "If-Unmodified-Since", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return IfUnmodifiedSince.Count > 0;
                    }
                    if (string.Equals(key, "Proxy-Authorization", StringComparison.OrdinalIgnoreCase)) 
                    {
                        return ProxyAuthorization.Count > 0;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryGetValue(string key, out StringValues value)
        {
            switch (key.Length)
            {
                case 2:
                    if (string.Equals(key, "Te", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Te;
						return value.Count > 0;
                    }
                   break;
                case 3:
                    if (string.Equals(key, "Via", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Via;
						return value.Count > 0;
                    }
                   break;
                case 4:
                    if (string.Equals(key, "Date", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Date;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "From", StringComparison.OrdinalIgnoreCase))
                    {
					    value = From;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Host", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Host;
						return value.Count > 0;
                    }
                   break;
                case 5:
                    if (string.Equals(key, "Allow", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Allow;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Range", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Range;
						return value.Count > 0;
                    }
                   break;
                case 6:
                    if (string.Equals(key, "Accept", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Accept;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Cookie", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Cookie;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Expect", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Expect;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Pragma", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Pragma;
						return value.Count > 0;
                    }
                   break;
                case 7:
                    if (string.Equals(key, "Expires", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Expires;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Referer", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Referer;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Trailer", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Trailer;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Upgrade", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Upgrade;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Warning", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Warning;
						return value.Count > 0;
                    }
                   break;
                case 8:
                    if (string.Equals(key, "If-Match", StringComparison.OrdinalIgnoreCase))
                    {
					    value = IfMatch;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "If-Range", StringComparison.OrdinalIgnoreCase))
                    {
					    value = IfRange;
						return value.Count > 0;
                    }
                   break;
                case 9:
                    if (string.Equals(key, "Translate", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Translate;
						return value.Count > 0;
                    }
                   break;
                case 10:
                    if (string.Equals(key, "Connection", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Connection;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Keep-Alive", StringComparison.OrdinalIgnoreCase))
                    {
					    value = KeepAlive;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "User-Agent", StringComparison.OrdinalIgnoreCase))
                    {
					    value = UserAgent;
						return value.Count > 0;
                    }
                   break;
                case 11:
                    if (string.Equals(key, "Content-Md5", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ContentMd5;
						return value.Count > 0;
                    }
                   break;
                case 12:
                    if (string.Equals(key, "Content-Type", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ContentType;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Max-Forwards", StringComparison.OrdinalIgnoreCase))
                    {
					    value = MaxForwards;
						return value.Count > 0;
                    }
                   break;
                case 13:
                    if (string.Equals(key, "Authorization", StringComparison.OrdinalIgnoreCase))
                    {
					    value = Authorization;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Cache-Control", StringComparison.OrdinalIgnoreCase))
                    {
					    value = CacheControl;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Content-Range", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ContentRange;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "If-None-Match", StringComparison.OrdinalIgnoreCase))
                    {
					    value = IfNoneMatch;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Last-Modified", StringComparison.OrdinalIgnoreCase))
                    {
					    value = LastModified;
						return value.Count > 0;
                    }
                   break;
                case 14:
                    if (string.Equals(key, "Accept-Charset", StringComparison.OrdinalIgnoreCase))
                    {
					    value = AcceptCharset;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Content-Length", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ContentLength;
						return value.Count > 0;
                    }
                   break;
                case 15:
                    if (string.Equals(key, "Accept-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
					    value = AcceptEncoding;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Accept-Language", StringComparison.OrdinalIgnoreCase))
                    {
					    value = AcceptLanguage;
						return value.Count > 0;
                    }
                   break;
                case 16:
                    if (string.Equals(key, "Content-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ContentEncoding;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Content-Language", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ContentLanguage;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Content-Location", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ContentLocation;
						return value.Count > 0;
                    }
                   break;
                case 17:
                    if (string.Equals(key, "If-Modified-Since", StringComparison.OrdinalIgnoreCase))
                    {
					    value = IfModifiedSince;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Transfer-Encoding", StringComparison.OrdinalIgnoreCase))
                    {
					    value = TransferEncoding;
						return value.Count > 0;
                    }
                   break;
                case 19:
                    if (string.Equals(key, "If-Unmodified-Since", StringComparison.OrdinalIgnoreCase))
                    {
					    value = IfUnmodifiedSince;
						return value.Count > 0;
                    }
                    if (string.Equals(key, "Proxy-Authorization", StringComparison.OrdinalIgnoreCase))
                    {
					    value = ProxyAuthorization;
						return value.Count > 0;
                    }
                   break;
            }
            value = StringValues.Empty;
            return false;
        }

        private bool PropertiesTrySetValue(string key, StringValues value)
        {
            switch (key.Length)
            {
                case 2:
                    if (string.Equals(key, "Te", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x2u;
                        Te = value;
                        return true;
                    }
                   break;
                case 3:
                    if (string.Equals(key, "Via", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x80u;
                        Via = value;
                        return true;
                    }
                   break;
                case 4:
                    if (string.Equals(key, "Date", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x10000u;
                        Date = value;
                        return true;
                    }
                    if (string.Equals(key, "From", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x80000u;
                        From = value;
                        return true;
                    }
                    if (string.Equals(key, "Host", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x100000u;
                        Host = value;
                        return true;
                    }
                   break;
                case 5:
                    if (string.Equals(key, "Allow", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x10u;
                        Allow = value;
                        return true;
                    }
                    if (string.Equals(key, "Range", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x80000000u;
                        Range = value;
                        return true;
                    }
                   break;
                case 6:
                    if (string.Equals(key, "Accept", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x1u;
                        Accept = value;
                        return true;
                    }
                    if (string.Equals(key, "Cookie", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x8000u;
                        Cookie = value;
                        return true;
                    }
                    if (string.Equals(key, "Expect", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x20000u;
                        Expect = value;
                        return true;
                    }
                    if (string.Equals(key, "Pragma", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x20000000u;
                        Pragma = value;
                        return true;
                    }
                   break;
                case 7:
                    if (string.Equals(key, "Expires", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x40000u;
                        Expires = value;
                        return true;
                    }
                    if (string.Equals(key, "Referer", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x1u;
                        Referer = value;
                        return true;
                    }
                    if (string.Equals(key, "Trailer", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x4u;
                        Trailer = value;
                        return true;
                    }
                    if (string.Equals(key, "Upgrade", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x20u;
                        Upgrade = value;
                        return true;
                    }
                    if (string.Equals(key, "Warning", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x100u;
                        Warning = value;
                        return true;
                    }
                   break;
                case 8:
                    if (string.Equals(key, "If-Match", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x200000u;
                        IfMatch = value;
                        return true;
                    }
                    if (string.Equals(key, "If-Range", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x1000000u;
                        IfRange = value;
                        return true;
                    }
                   break;
                case 9:
                    if (string.Equals(key, "Translate", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x10u;
                        Translate = value;
                        return true;
                    }
                   break;
                case 10:
                    if (string.Equals(key, "Connection", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x80u;
                        Connection = value;
                        return true;
                    }
                    if (string.Equals(key, "Keep-Alive", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x4000000u;
                        KeepAlive = value;
                        return true;
                    }
                    if (string.Equals(key, "User-Agent", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x40u;
                        UserAgent = value;
                        return true;
                    }
                   break;
                case 11:
                    if (string.Equals(key, "Content-Md5", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x1000u;
                        ContentMd5 = value;
                        return true;
                    }
                   break;
                case 12:
                    if (string.Equals(key, "Content-Type", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x4000u;
                        ContentType = value;
                        return true;
                    }
                    if (string.Equals(key, "Max-Forwards", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x10000000u;
                        MaxForwards = value;
                        return true;
                    }
                   break;
                case 13:
                    if (string.Equals(key, "Authorization", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x20u;
                        Authorization = value;
                        return true;
                    }
                    if (string.Equals(key, "Cache-Control", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x40u;
                        CacheControl = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Range", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x2000u;
                        ContentRange = value;
                        return true;
                    }
                    if (string.Equals(key, "If-None-Match", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x800000u;
                        IfNoneMatch = value;
                        return true;
                    }
                    if (string.Equals(key, "Last-Modified", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x8000000u;
                        LastModified = value;
                        return true;
                    }
                   break;
                case 14:
                    if (string.Equals(key, "Accept-Charset", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x2u;
                        AcceptCharset = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Length", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x400u;
                        ContentLength = value;
                        return true;
                    }
                   break;
                case 15:
                    if (string.Equals(key, "Accept-Encoding", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x4u;
                        AcceptEncoding = value;
                        return true;
                    }
                    if (string.Equals(key, "Accept-Language", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x8u;
                        AcceptLanguage = value;
                        return true;
                    }
                   break;
                case 16:
                    if (string.Equals(key, "Content-Encoding", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x100u;
                        ContentEncoding = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Language", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x200u;
                        ContentLanguage = value;
                        return true;
                    }
                    if (string.Equals(key, "Content-Location", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x800u;
                        ContentLocation = value;
                        return true;
                    }
                   break;
                case 17:
                    if (string.Equals(key, "If-Modified-Since", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x400000u;
                        IfModifiedSince = value;
                        return true;
                    }
                    if (string.Equals(key, "Transfer-Encoding", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag1 |= 0x8u;
                        TransferEncoding = value;
                        return true;
                    }
                   break;
                case 19:
                    if (string.Equals(key, "If-Unmodified-Since", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x2000000u;
                        IfUnmodifiedSince = value;
                        return true;
                    }
                    if (string.Equals(key, "Proxy-Authorization", StringComparison.OrdinalIgnoreCase)) 
                    {
                        _fields._flag0 |= 0x40000000u;
                        ProxyAuthorization = value;
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryRemove(string key)
        {
            switch (key.Length)
            {
                case 2:
                    if (_fields._Te.Count > 0 
                        && string.Equals(key, "Te", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x2u) != 0);
                        Te = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 3:
                    if (_fields._Via.Count > 0 
                        && string.Equals(key, "Via", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x80u) != 0);
                        Via = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 4:
                    if (_fields._Date.Count > 0 
                        && string.Equals(key, "Date", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x10000u) != 0);
                        Date = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._From.Count > 0 
                        && string.Equals(key, "From", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x80000u) != 0);
                        From = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Host.Count > 0 
                        && string.Equals(key, "Host", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x100000u) != 0);
                        Host = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 5:
                    if (_fields._Allow.Count > 0 
                        && string.Equals(key, "Allow", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x10u) != 0);
                        Allow = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Range.Count > 0 
                        && string.Equals(key, "Range", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x80000000u) != 0);
                        Range = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 6:
                    if (_fields._Accept.Count > 0 
                        && string.Equals(key, "Accept", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x1u) != 0);
                        Accept = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Cookie.Count > 0 
                        && string.Equals(key, "Cookie", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x8000u) != 0);
                        Cookie = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Expect.Count > 0 
                        && string.Equals(key, "Expect", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x20000u) != 0);
                        Expect = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Pragma.Count > 0 
                        && string.Equals(key, "Pragma", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x20000000u) != 0);
                        Pragma = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 7:
                    if (_fields._Expires.Count > 0 
                        && string.Equals(key, "Expires", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x40000u) != 0);
                        Expires = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Referer.Count > 0 
                        && string.Equals(key, "Referer", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x1u) != 0);
                        Referer = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Trailer.Count > 0 
                        && string.Equals(key, "Trailer", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x4u) != 0);
                        Trailer = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Upgrade.Count > 0 
                        && string.Equals(key, "Upgrade", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x20u) != 0);
                        Upgrade = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._Warning.Count > 0 
                        && string.Equals(key, "Warning", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x100u) != 0);
                        Warning = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 8:
                    if (_fields._IfMatch.Count > 0 
                        && string.Equals(key, "If-Match", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x200000u) != 0);
                        IfMatch = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._IfRange.Count > 0 
                        && string.Equals(key, "If-Range", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x1000000u) != 0);
                        IfRange = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 9:
                    if (_fields._Translate.Count > 0 
                        && string.Equals(key, "Translate", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x10u) != 0);
                        Translate = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 10:
                    if (_fields._Connection.Count > 0 
                        && string.Equals(key, "Connection", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x80u) != 0);
                        Connection = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._KeepAlive.Count > 0 
                        && string.Equals(key, "Keep-Alive", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x4000000u) != 0);
                        KeepAlive = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._UserAgent.Count > 0 
                        && string.Equals(key, "User-Agent", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x40u) != 0);
                        UserAgent = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 11:
                    if (_fields._ContentMd5.Count > 0 
                        && string.Equals(key, "Content-Md5", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x1000u) != 0);
                        ContentMd5 = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 12:
                    if (_fields._ContentType.Count > 0 
                        && string.Equals(key, "Content-Type", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x4000u) != 0);
                        ContentType = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._MaxForwards.Count > 0 
                        && string.Equals(key, "Max-Forwards", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x10000000u) != 0);
                        MaxForwards = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 13:
                    if (_fields._Authorization.Count > 0 
                        && string.Equals(key, "Authorization", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x20u) != 0);
                        Authorization = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._CacheControl.Count > 0 
                        && string.Equals(key, "Cache-Control", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x40u) != 0);
                        CacheControl = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._ContentRange.Count > 0 
                        && string.Equals(key, "Content-Range", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x2000u) != 0);
                        ContentRange = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._IfNoneMatch.Count > 0 
                        && string.Equals(key, "If-None-Match", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x800000u) != 0);
                        IfNoneMatch = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._LastModified.Count > 0 
                        && string.Equals(key, "Last-Modified", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x8000000u) != 0);
                        LastModified = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 14:
                    if (_fields._AcceptCharset.Count > 0 
                        && string.Equals(key, "Accept-Charset", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x2u) != 0);
                        AcceptCharset = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._ContentLength.Count > 0 
                        && string.Equals(key, "Content-Length", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x400u) != 0);
                        ContentLength = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 15:
                    if (_fields._AcceptEncoding.Count > 0 
                        && string.Equals(key, "Accept-Encoding", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x4u) != 0);
                        AcceptEncoding = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._AcceptLanguage.Count > 0 
                        && string.Equals(key, "Accept-Language", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x8u) != 0);
                        AcceptLanguage = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 16:
                    if (_fields._ContentEncoding.Count > 0 
                        && string.Equals(key, "Content-Encoding", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x100u) != 0);
                        ContentEncoding = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._ContentLanguage.Count > 0 
                        && string.Equals(key, "Content-Language", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x200u) != 0);
                        ContentLanguage = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._ContentLocation.Count > 0 
                        && string.Equals(key, "Content-Location", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x800u) != 0);
                        ContentLocation = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 17:
                    if (_fields._IfModifiedSince.Count > 0 
                        && string.Equals(key, "If-Modified-Since", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x400000u) != 0);
                        IfModifiedSince = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._TransferEncoding.Count > 0 
                        && string.Equals(key, "Transfer-Encoding", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag1 & 0x8u) != 0);
                        TransferEncoding = StringValues.Empty;
                        return wasSet;
                    }
                   break;
                case 19:
                    if (_fields._IfUnmodifiedSince.Count > 0 
                        && string.Equals(key, "If-Unmodified-Since", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x2000000u) != 0);
                        IfUnmodifiedSince = StringValues.Empty;
                        return wasSet;
                    }
                    if (_fields._ProxyAuthorization.Count > 0 
                        && string.Equals(key, "Proxy-Authorization", StringComparison.Ordinal))
                    {
					    bool wasSet = ((_fields._flag0 & 0x40000000u) != 0);
                        ProxyAuthorization = StringValues.Empty;
                        return wasSet;
                    }
                   break;
            }
            return false;
        }

        private IEnumerable<string> PropertiesKeys()
        {
            if (Accept.Count > 0)
            {
                yield return "Accept";
            }
            if (AcceptCharset.Count > 0)
            {
                yield return "Accept-Charset";
            }
            if (AcceptEncoding.Count > 0)
            {
                yield return "Accept-Encoding";
            }
            if (AcceptLanguage.Count > 0)
            {
                yield return "Accept-Language";
            }
            if (Allow.Count > 0)
            {
                yield return "Allow";
            }
            if (Authorization.Count > 0)
            {
                yield return "Authorization";
            }
            if (CacheControl.Count > 0)
            {
                yield return "Cache-Control";
            }
            if (Connection.Count > 0)
            {
                yield return "Connection";
            }
            if (ContentEncoding.Count > 0)
            {
                yield return "Content-Encoding";
            }
            if (ContentLanguage.Count > 0)
            {
                yield return "Content-Language";
            }
            if (ContentLength.Count > 0)
            {
                yield return "Content-Length";
            }
            if (ContentLocation.Count > 0)
            {
                yield return "Content-Location";
            }
            if (ContentMd5.Count > 0)
            {
                yield return "Content-Md5";
            }
            if (ContentRange.Count > 0)
            {
                yield return "Content-Range";
            }
            if (ContentType.Count > 0)
            {
                yield return "Content-Type";
            }
            if (Cookie.Count > 0)
            {
                yield return "Cookie";
            }
            if (Date.Count > 0)
            {
                yield return "Date";
            }
            if (Expect.Count > 0)
            {
                yield return "Expect";
            }
            if (Expires.Count > 0)
            {
                yield return "Expires";
            }
            if (From.Count > 0)
            {
                yield return "From";
            }
            if (Host.Count > 0)
            {
                yield return "Host";
            }
            if (IfMatch.Count > 0)
            {
                yield return "If-Match";
            }
            if (IfModifiedSince.Count > 0)
            {
                yield return "If-Modified-Since";
            }
            if (IfNoneMatch.Count > 0)
            {
                yield return "If-None-Match";
            }
            if (IfRange.Count > 0)
            {
                yield return "If-Range";
            }
            if (IfUnmodifiedSince.Count > 0)
            {
                yield return "If-Unmodified-Since";
            }
            if (KeepAlive.Count > 0)
            {
                yield return "Keep-Alive";
            }
            if (LastModified.Count > 0)
            {
                yield return "Last-Modified";
            }
            if (MaxForwards.Count > 0)
            {
                yield return "Max-Forwards";
            }
            if (Pragma.Count > 0)
            {
                yield return "Pragma";
            }
            if (ProxyAuthorization.Count > 0)
            {
                yield return "Proxy-Authorization";
            }
            if (Range.Count > 0)
            {
                yield return "Range";
            }
            if (Referer.Count > 0)
            {
                yield return "Referer";
            }
            if (Te.Count > 0)
            {
                yield return "Te";
            }
            if (Trailer.Count > 0)
            {
                yield return "Trailer";
            }
            if (TransferEncoding.Count > 0)
            {
                yield return "Transfer-Encoding";
            }
            if (Translate.Count > 0)
            {
                yield return "Translate";
            }
            if (Upgrade.Count > 0)
            {
                yield return "Upgrade";
            }
            if (UserAgent.Count > 0)
            {
                yield return "User-Agent";
            }
            if (Via.Count > 0)
            {
                yield return "Via";
            }
            if (Warning.Count > 0)
            {
                yield return "Warning";
            }
        }

        private IEnumerable<StringValues> PropertiesValues()
        {
            if (Accept.Count > 0)
            {
                yield return Accept;
            }
            if (AcceptCharset.Count > 0)
            {
                yield return AcceptCharset;
            }
            if (AcceptEncoding.Count > 0)
            {
                yield return AcceptEncoding;
            }
            if (AcceptLanguage.Count > 0)
            {
                yield return AcceptLanguage;
            }
            if (Allow.Count > 0)
            {
                yield return Allow;
            }
            if (Authorization.Count > 0)
            {
                yield return Authorization;
            }
            if (CacheControl.Count > 0)
            {
                yield return CacheControl;
            }
            if (Connection.Count > 0)
            {
                yield return Connection;
            }
            if (ContentEncoding.Count > 0)
            {
                yield return ContentEncoding;
            }
            if (ContentLanguage.Count > 0)
            {
                yield return ContentLanguage;
            }
            if (ContentLength.Count > 0)
            {
                yield return ContentLength;
            }
            if (ContentLocation.Count > 0)
            {
                yield return ContentLocation;
            }
            if (ContentMd5.Count > 0)
            {
                yield return ContentMd5;
            }
            if (ContentRange.Count > 0)
            {
                yield return ContentRange;
            }
            if (ContentType.Count > 0)
            {
                yield return ContentType;
            }
            if (Cookie.Count > 0)
            {
                yield return Cookie;
            }
            if (Date.Count > 0)
            {
                yield return Date;
            }
            if (Expect.Count > 0)
            {
                yield return Expect;
            }
            if (Expires.Count > 0)
            {
                yield return Expires;
            }
            if (From.Count > 0)
            {
                yield return From;
            }
            if (Host.Count > 0)
            {
                yield return Host;
            }
            if (IfMatch.Count > 0)
            {
                yield return IfMatch;
            }
            if (IfModifiedSince.Count > 0)
            {
                yield return IfModifiedSince;
            }
            if (IfNoneMatch.Count > 0)
            {
                yield return IfNoneMatch;
            }
            if (IfRange.Count > 0)
            {
                yield return IfRange;
            }
            if (IfUnmodifiedSince.Count > 0)
            {
                yield return IfUnmodifiedSince;
            }
            if (KeepAlive.Count > 0)
            {
                yield return KeepAlive;
            }
            if (LastModified.Count > 0)
            {
                yield return LastModified;
            }
            if (MaxForwards.Count > 0)
            {
                yield return MaxForwards;
            }
            if (Pragma.Count > 0)
            {
                yield return Pragma;
            }
            if (ProxyAuthorization.Count > 0)
            {
                yield return ProxyAuthorization;
            }
            if (Range.Count > 0)
            {
                yield return Range;
            }
            if (Referer.Count > 0)
            {
                yield return Referer;
            }
            if (Te.Count > 0)
            {
                yield return Te;
            }
            if (Trailer.Count > 0)
            {
                yield return Trailer;
            }
            if (TransferEncoding.Count > 0)
            {
                yield return TransferEncoding;
            }
            if (Translate.Count > 0)
            {
                yield return Translate;
            }
            if (Upgrade.Count > 0)
            {
                yield return Upgrade;
            }
            if (UserAgent.Count > 0)
            {
                yield return UserAgent;
            }
            if (Via.Count > 0)
            {
                yield return Via;
            }
            if (Warning.Count > 0)
            {
                yield return Warning;
            }
        }

        private IEnumerable<KeyValuePair<string, StringValues>> PropertiesEnumerable()
        {
            if (Accept.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Accept", Accept);
            }
            if (AcceptCharset.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Accept-Charset", AcceptCharset);
            }
            if (AcceptEncoding.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Accept-Encoding", AcceptEncoding);
            }
            if (AcceptLanguage.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Accept-Language", AcceptLanguage);
            }
            if (Allow.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Allow", Allow);
            }
            if (Authorization.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Authorization", Authorization);
            }
            if (CacheControl.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Cache-Control", CacheControl);
            }
            if (Connection.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Connection", Connection);
            }
            if (ContentEncoding.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Content-Encoding", ContentEncoding);
            }
            if (ContentLanguage.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Content-Language", ContentLanguage);
            }
            if (ContentLength.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Content-Length", ContentLength);
            }
            if (ContentLocation.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Content-Location", ContentLocation);
            }
            if (ContentMd5.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Content-Md5", ContentMd5);
            }
            if (ContentRange.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Content-Range", ContentRange);
            }
            if (ContentType.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Content-Type", ContentType);
            }
            if (Cookie.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Cookie", Cookie);
            }
            if (Date.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Date", Date);
            }
            if (Expect.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Expect", Expect);
            }
            if (Expires.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Expires", Expires);
            }
            if (From.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("From", From);
            }
            if (Host.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Host", Host);
            }
            if (IfMatch.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("If-Match", IfMatch);
            }
            if (IfModifiedSince.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("If-Modified-Since", IfModifiedSince);
            }
            if (IfNoneMatch.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("If-None-Match", IfNoneMatch);
            }
            if (IfRange.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("If-Range", IfRange);
            }
            if (IfUnmodifiedSince.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("If-Unmodified-Since", IfUnmodifiedSince);
            }
            if (KeepAlive.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Keep-Alive", KeepAlive);
            }
            if (LastModified.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Last-Modified", LastModified);
            }
            if (MaxForwards.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Max-Forwards", MaxForwards);
            }
            if (Pragma.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Pragma", Pragma);
            }
            if (ProxyAuthorization.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Proxy-Authorization", ProxyAuthorization);
            }
            if (Range.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Range", Range);
            }
            if (Referer.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Referer", Referer);
            }
            if (Te.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Te", Te);
            }
            if (Trailer.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Trailer", Trailer);
            }
            if (TransferEncoding.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Transfer-Encoding", TransferEncoding);
            }
            if (Translate.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Translate", Translate);
            }
            if (Upgrade.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Upgrade", Upgrade);
            }
            if (UserAgent.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("User-Agent", UserAgent);
            }
            if (Via.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Via", Via);
            }
            if (Warning.Count > 0)
            {
                yield return new KeyValuePair<string, StringValues>("Warning", Warning);
            }
        }
    }
}
