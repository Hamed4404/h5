// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// <auto-generated />

namespace Microsoft.AspNetCore.Http;

using System.CodeDom.Compiler;

[GeneratedCode("TextTemplatingFileGenerator", "")]
internal static partial class ResultsCache
{
    private static readonly StatusCodeHttpResult Status100Continue = new StatusCodeHttpResult(StatusCodes.Status100Continue);
    private static readonly StatusCodeHttpResult Status101SwitchingProtocols = new StatusCodeHttpResult(StatusCodes.Status101SwitchingProtocols);
    private static readonly StatusCodeHttpResult Status102Processing = new StatusCodeHttpResult(StatusCodes.Status102Processing);
    private static readonly StatusCodeHttpResult Status200OK = new StatusCodeHttpResult(StatusCodes.Status200OK);
    private static readonly StatusCodeHttpResult Status201Created = new StatusCodeHttpResult(StatusCodes.Status201Created);
    private static readonly StatusCodeHttpResult Status202Accepted = new StatusCodeHttpResult(StatusCodes.Status202Accepted);
    private static readonly StatusCodeHttpResult Status203NonAuthoritative = new StatusCodeHttpResult(StatusCodes.Status203NonAuthoritative);
    private static readonly StatusCodeHttpResult Status204NoContent = new StatusCodeHttpResult(StatusCodes.Status204NoContent);
    private static readonly StatusCodeHttpResult Status205ResetContent = new StatusCodeHttpResult(StatusCodes.Status205ResetContent);
    private static readonly StatusCodeHttpResult Status206PartialContent = new StatusCodeHttpResult(StatusCodes.Status206PartialContent);
    private static readonly StatusCodeHttpResult Status207MultiStatus = new StatusCodeHttpResult(StatusCodes.Status207MultiStatus);
    private static readonly StatusCodeHttpResult Status208AlreadyReported = new StatusCodeHttpResult(StatusCodes.Status208AlreadyReported);
    private static readonly StatusCodeHttpResult Status226IMUsed = new StatusCodeHttpResult(StatusCodes.Status226IMUsed);
    private static readonly StatusCodeHttpResult Status300MultipleChoices = new StatusCodeHttpResult(StatusCodes.Status300MultipleChoices);
    private static readonly StatusCodeHttpResult Status301MovedPermanently = new StatusCodeHttpResult(StatusCodes.Status301MovedPermanently);
    private static readonly StatusCodeHttpResult Status302Found = new StatusCodeHttpResult(StatusCodes.Status302Found);
    private static readonly StatusCodeHttpResult Status303SeeOther = new StatusCodeHttpResult(StatusCodes.Status303SeeOther);
    private static readonly StatusCodeHttpResult Status304NotModified = new StatusCodeHttpResult(StatusCodes.Status304NotModified);
    private static readonly StatusCodeHttpResult Status305UseProxy = new StatusCodeHttpResult(StatusCodes.Status305UseProxy);
    private static readonly StatusCodeHttpResult Status306SwitchProxy = new StatusCodeHttpResult(StatusCodes.Status306SwitchProxy);
    private static readonly StatusCodeHttpResult Status307TemporaryRedirect = new StatusCodeHttpResult(StatusCodes.Status307TemporaryRedirect);
    private static readonly StatusCodeHttpResult Status308PermanentRedirect = new StatusCodeHttpResult(StatusCodes.Status308PermanentRedirect);
    private static readonly StatusCodeHttpResult Status400BadRequest = new StatusCodeHttpResult(StatusCodes.Status400BadRequest);
    private static readonly StatusCodeHttpResult Status401Unauthorized = new StatusCodeHttpResult(StatusCodes.Status401Unauthorized);
    private static readonly StatusCodeHttpResult Status402PaymentRequired = new StatusCodeHttpResult(StatusCodes.Status402PaymentRequired);
    private static readonly StatusCodeHttpResult Status403Forbidden = new StatusCodeHttpResult(StatusCodes.Status403Forbidden);
    private static readonly StatusCodeHttpResult Status404NotFound = new StatusCodeHttpResult(StatusCodes.Status404NotFound);
    private static readonly StatusCodeHttpResult Status405MethodNotAllowed = new StatusCodeHttpResult(StatusCodes.Status405MethodNotAllowed);
    private static readonly StatusCodeHttpResult Status406NotAcceptable = new StatusCodeHttpResult(StatusCodes.Status406NotAcceptable);
    private static readonly StatusCodeHttpResult Status407ProxyAuthenticationRequired = new StatusCodeHttpResult(StatusCodes.Status407ProxyAuthenticationRequired);
    private static readonly StatusCodeHttpResult Status408RequestTimeout = new StatusCodeHttpResult(StatusCodes.Status408RequestTimeout);
    private static readonly StatusCodeHttpResult Status409Conflict = new StatusCodeHttpResult(StatusCodes.Status409Conflict);
    private static readonly StatusCodeHttpResult Status410Gone = new StatusCodeHttpResult(StatusCodes.Status410Gone);
    private static readonly StatusCodeHttpResult Status411LengthRequired = new StatusCodeHttpResult(StatusCodes.Status411LengthRequired);
    private static readonly StatusCodeHttpResult Status412PreconditionFailed = new StatusCodeHttpResult(StatusCodes.Status412PreconditionFailed);
    private static readonly StatusCodeHttpResult Status413RequestEntityTooLarge = new StatusCodeHttpResult(StatusCodes.Status413RequestEntityTooLarge);
    private static readonly StatusCodeHttpResult Status414RequestUriTooLong = new StatusCodeHttpResult(StatusCodes.Status414RequestUriTooLong);
    private static readonly StatusCodeHttpResult Status415UnsupportedMediaType = new StatusCodeHttpResult(StatusCodes.Status415UnsupportedMediaType);
    private static readonly StatusCodeHttpResult Status416RequestedRangeNotSatisfiable = new StatusCodeHttpResult(StatusCodes.Status416RequestedRangeNotSatisfiable);
    private static readonly StatusCodeHttpResult Status417ExpectationFailed = new StatusCodeHttpResult(StatusCodes.Status417ExpectationFailed);
    private static readonly StatusCodeHttpResult Status418ImATeapot = new StatusCodeHttpResult(StatusCodes.Status418ImATeapot);
    private static readonly StatusCodeHttpResult Status419AuthenticationTimeout = new StatusCodeHttpResult(StatusCodes.Status419AuthenticationTimeout);
    private static readonly StatusCodeHttpResult Status421MisdirectedRequest = new StatusCodeHttpResult(StatusCodes.Status421MisdirectedRequest);
    private static readonly StatusCodeHttpResult Status422UnprocessableEntity = new StatusCodeHttpResult(StatusCodes.Status422UnprocessableEntity);
    private static readonly StatusCodeHttpResult Status423Locked = new StatusCodeHttpResult(StatusCodes.Status423Locked);
    private static readonly StatusCodeHttpResult Status424FailedDependency = new StatusCodeHttpResult(StatusCodes.Status424FailedDependency);
    private static readonly StatusCodeHttpResult Status426UpgradeRequired = new StatusCodeHttpResult(StatusCodes.Status426UpgradeRequired);
    private static readonly StatusCodeHttpResult Status428PreconditionRequired = new StatusCodeHttpResult(StatusCodes.Status428PreconditionRequired);
    private static readonly StatusCodeHttpResult Status429TooManyRequests = new StatusCodeHttpResult(StatusCodes.Status429TooManyRequests);
    private static readonly StatusCodeHttpResult Status431RequestHeaderFieldsTooLarge = new StatusCodeHttpResult(StatusCodes.Status431RequestHeaderFieldsTooLarge);
    private static readonly StatusCodeHttpResult Status451UnavailableForLegalReasons = new StatusCodeHttpResult(StatusCodes.Status451UnavailableForLegalReasons);
    private static readonly StatusCodeHttpResult Status500InternalServerError = new StatusCodeHttpResult(StatusCodes.Status500InternalServerError);
    private static readonly StatusCodeHttpResult Status501NotImplemented = new StatusCodeHttpResult(StatusCodes.Status501NotImplemented);
    private static readonly StatusCodeHttpResult Status502BadGateway = new StatusCodeHttpResult(StatusCodes.Status502BadGateway);
    private static readonly StatusCodeHttpResult Status503ServiceUnavailable = new StatusCodeHttpResult(StatusCodes.Status503ServiceUnavailable);
    private static readonly StatusCodeHttpResult Status504GatewayTimeout = new StatusCodeHttpResult(StatusCodes.Status504GatewayTimeout);
    private static readonly StatusCodeHttpResult Status505HttpVersionNotsupported = new StatusCodeHttpResult(StatusCodes.Status505HttpVersionNotsupported);
    private static readonly StatusCodeHttpResult Status506VariantAlsoNegotiates = new StatusCodeHttpResult(StatusCodes.Status506VariantAlsoNegotiates);
    private static readonly StatusCodeHttpResult Status507InsufficientStorage = new StatusCodeHttpResult(StatusCodes.Status507InsufficientStorage);
    private static readonly StatusCodeHttpResult Status508LoopDetected = new StatusCodeHttpResult(StatusCodes.Status508LoopDetected);
    private static readonly StatusCodeHttpResult Status510NotExtended = new StatusCodeHttpResult(StatusCodes.Status510NotExtended);
    private static readonly StatusCodeHttpResult Status511NetworkAuthenticationRequired = new StatusCodeHttpResult(StatusCodes.Status511NetworkAuthenticationRequired);

    internal static StatusCodeHttpResult StatusCode(int statusCode)
    {
        return statusCode switch
        {
            StatusCodes.Status100Continue => Status100Continue,
            StatusCodes.Status101SwitchingProtocols => Status101SwitchingProtocols,
            StatusCodes.Status102Processing => Status102Processing,
            StatusCodes.Status200OK => Status200OK,
            StatusCodes.Status201Created => Status201Created,
            StatusCodes.Status202Accepted => Status202Accepted,
            StatusCodes.Status203NonAuthoritative => Status203NonAuthoritative,
            StatusCodes.Status204NoContent => Status204NoContent,
            StatusCodes.Status205ResetContent => Status205ResetContent,
            StatusCodes.Status206PartialContent => Status206PartialContent,
            StatusCodes.Status207MultiStatus => Status207MultiStatus,
            StatusCodes.Status208AlreadyReported => Status208AlreadyReported,
            StatusCodes.Status226IMUsed => Status226IMUsed,
            StatusCodes.Status300MultipleChoices => Status300MultipleChoices,
            StatusCodes.Status301MovedPermanently => Status301MovedPermanently,
            StatusCodes.Status302Found => Status302Found,
            StatusCodes.Status303SeeOther => Status303SeeOther,
            StatusCodes.Status304NotModified => Status304NotModified,
            StatusCodes.Status305UseProxy => Status305UseProxy,
            StatusCodes.Status306SwitchProxy => Status306SwitchProxy,
            StatusCodes.Status307TemporaryRedirect => Status307TemporaryRedirect,
            StatusCodes.Status308PermanentRedirect => Status308PermanentRedirect,
            StatusCodes.Status400BadRequest => Status400BadRequest,
            StatusCodes.Status401Unauthorized => Status401Unauthorized,
            StatusCodes.Status402PaymentRequired => Status402PaymentRequired,
            StatusCodes.Status403Forbidden => Status403Forbidden,
            StatusCodes.Status404NotFound => Status404NotFound,
            StatusCodes.Status405MethodNotAllowed => Status405MethodNotAllowed,
            StatusCodes.Status406NotAcceptable => Status406NotAcceptable,
            StatusCodes.Status407ProxyAuthenticationRequired => Status407ProxyAuthenticationRequired,
            StatusCodes.Status408RequestTimeout => Status408RequestTimeout,
            StatusCodes.Status409Conflict => Status409Conflict,
            StatusCodes.Status410Gone => Status410Gone,
            StatusCodes.Status411LengthRequired => Status411LengthRequired,
            StatusCodes.Status412PreconditionFailed => Status412PreconditionFailed,
            StatusCodes.Status413RequestEntityTooLarge => Status413RequestEntityTooLarge,
            StatusCodes.Status414RequestUriTooLong => Status414RequestUriTooLong,
            StatusCodes.Status415UnsupportedMediaType => Status415UnsupportedMediaType,
            StatusCodes.Status416RequestedRangeNotSatisfiable => Status416RequestedRangeNotSatisfiable,
            StatusCodes.Status417ExpectationFailed => Status417ExpectationFailed,
            StatusCodes.Status418ImATeapot => Status418ImATeapot,
            StatusCodes.Status419AuthenticationTimeout => Status419AuthenticationTimeout,
            StatusCodes.Status421MisdirectedRequest => Status421MisdirectedRequest,
            StatusCodes.Status422UnprocessableEntity => Status422UnprocessableEntity,
            StatusCodes.Status423Locked => Status423Locked,
            StatusCodes.Status424FailedDependency => Status424FailedDependency,
            StatusCodes.Status426UpgradeRequired => Status426UpgradeRequired,
            StatusCodes.Status428PreconditionRequired => Status428PreconditionRequired,
            StatusCodes.Status429TooManyRequests => Status429TooManyRequests,
            StatusCodes.Status431RequestHeaderFieldsTooLarge => Status431RequestHeaderFieldsTooLarge,
            StatusCodes.Status451UnavailableForLegalReasons => Status451UnavailableForLegalReasons,
            StatusCodes.Status500InternalServerError => Status500InternalServerError,
            StatusCodes.Status501NotImplemented => Status501NotImplemented,
            StatusCodes.Status502BadGateway => Status502BadGateway,
            StatusCodes.Status503ServiceUnavailable => Status503ServiceUnavailable,
            StatusCodes.Status504GatewayTimeout => Status504GatewayTimeout,
            StatusCodes.Status505HttpVersionNotsupported => Status505HttpVersionNotsupported,
            StatusCodes.Status506VariantAlsoNegotiates => Status506VariantAlsoNegotiates,
            StatusCodes.Status507InsufficientStorage => Status507InsufficientStorage,
            StatusCodes.Status508LoopDetected => Status508LoopDetected,
            StatusCodes.Status510NotExtended => Status510NotExtended,
            StatusCodes.Status511NetworkAuthenticationRequired => Status511NetworkAuthenticationRequired,
            _ => new StatusCodeHttpResult(statusCode),
        };
    }
}
