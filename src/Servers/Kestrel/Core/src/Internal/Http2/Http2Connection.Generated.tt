<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(NuGetPackageRoot)\microsoft.net.http.headers\2.1.0\lib\netstandard2.0\Microsoft.Net.Http.Headers.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Net.Http.Headers" #>
<#@ output extension=".cs" #>
<#
    static IEnumerable<(string Name, string Value)> GetStrings()
    {
        yield return ("ClientPreface", "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n");
        yield return ("Authority", HeaderNames.Authority);
        yield return ("Method", HeaderNames.Method);
        yield return ("Path", HeaderNames.Path);
        yield return ("Scheme", HeaderNames.Scheme);
        yield return ("Status", HeaderNames.Status);
        yield return ("Connection", "connection");
        yield return ("Te", "te");
        yield return ("Trailers", "trailers");
        yield return ("Connect", "CONNECT");
    }
#>
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;

namespace Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2
{
    internal partial class Http2Connection
    {
<#
    foreach (var item in GetStrings())
    {
        var methodName = $"{item.Name}Bytes";
#>
        private static ReadOnlySpan<byte> <#= methodName #> => new byte[<#= item.Value.Length #>] { <# WriteByteRepresentation(item.Value); #> };
<#
    }
#>
    }
}
<#
void WriteByteRepresentation(string value)
{
    for (var i = 0; i < value.Length; ++i)
    {
        var c = value[i];
        if (c == '\n')
        {
            Write("(byte)'\\n'");
        }
        else if (c == '\r')
        {
            Write("(byte)'\\r'");
        }
        else
        {
            Write("(byte)'{0}'", c);
        }

        if (i < value.Length - 1)
        {
            Write(", ");
        }
    }
}
#>
