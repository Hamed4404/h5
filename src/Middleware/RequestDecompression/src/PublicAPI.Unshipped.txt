#nullable enable
Microsoft.AspNetCore.Builder.RequestDecompressionBuilderExtensions
Microsoft.AspNetCore.Builder.RequestDecompressionServiceExtensions
Microsoft.AspNetCore.RequestDecompression.BrotliDecompressionProvider
Microsoft.AspNetCore.RequestDecompression.BrotliDecompressionProvider.BrotliDecompressionProvider() -> void
Microsoft.AspNetCore.RequestDecompression.BrotliDecompressionProvider.CreateStream(System.IO.Stream! outputStream) -> System.IO.Stream!
Microsoft.AspNetCore.RequestDecompression.BrotliDecompressionProvider.EncodingName.get -> string!
Microsoft.AspNetCore.RequestDecompression.DecompressionProviderCollection
Microsoft.AspNetCore.RequestDecompression.DecompressionProviderCollection.Add(System.Type! providerType) -> void
Microsoft.AspNetCore.RequestDecompression.DecompressionProviderCollection.Add<TDecompressionProvider>() -> void
Microsoft.AspNetCore.RequestDecompression.DecompressionProviderCollection.DecompressionProviderCollection() -> void
Microsoft.AspNetCore.RequestDecompression.DeflateDecompressionProvider
Microsoft.AspNetCore.RequestDecompression.DeflateDecompressionProvider.CreateStream(System.IO.Stream! outputStream) -> System.IO.Stream!
Microsoft.AspNetCore.RequestDecompression.DeflateDecompressionProvider.DeflateDecompressionProvider() -> void
Microsoft.AspNetCore.RequestDecompression.DeflateDecompressionProvider.EncodingName.get -> string!
Microsoft.AspNetCore.RequestDecompression.GZipDecompressionProvider
Microsoft.AspNetCore.RequestDecompression.GZipDecompressionProvider.CreateStream(System.IO.Stream! outputStream) -> System.IO.Stream!
Microsoft.AspNetCore.RequestDecompression.GZipDecompressionProvider.EncodingName.get -> string!
Microsoft.AspNetCore.RequestDecompression.GZipDecompressionProvider.GZipDecompressionProvider() -> void
Microsoft.AspNetCore.RequestDecompression.IDecompressionProvider
Microsoft.AspNetCore.RequestDecompression.IDecompressionProvider.CreateStream(System.IO.Stream! outputStream) -> System.IO.Stream!
Microsoft.AspNetCore.RequestDecompression.IDecompressionProvider.EncodingName.get -> string!
Microsoft.AspNetCore.RequestDecompression.IRequestDecompressionProvider
Microsoft.AspNetCore.RequestDecompression.IRequestDecompressionProvider.GetDecompressionProvider(Microsoft.AspNetCore.Http.HttpContext! context) -> Microsoft.AspNetCore.RequestDecompression.IDecompressionProvider?
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionMiddleware
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionMiddleware.RequestDecompressionMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.AspNetCore.RequestDecompression.IRequestDecompressionProvider! provider) -> void
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionOptions
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionOptions.MaxRequestBodySize.get -> long
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionOptions.MaxRequestBodySize.set -> void
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionOptions.Providers.get -> Microsoft.AspNetCore.RequestDecompression.DecompressionProviderCollection!
Microsoft.AspNetCore.RequestDecompression.RequestDecompressionOptions.RequestDecompressionOptions() -> void
static Microsoft.AspNetCore.Builder.RequestDecompressionBuilderExtensions.UseRequestDecompression(this Microsoft.AspNetCore.Builder.IApplicationBuilder! builder) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.RequestDecompressionServiceExtensions.AddRequestDecompression(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.AspNetCore.Builder.RequestDecompressionServiceExtensions.AddRequestDecompression(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.RequestDecompression.RequestDecompressionOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
