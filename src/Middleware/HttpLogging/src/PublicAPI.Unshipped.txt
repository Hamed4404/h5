#nullable enable
Microsoft.AspNetCore.Builder.HttpLoggingEndpointConventionBuilderExtensions
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.HttpLoggingAttribute(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields loggingFields) -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.IsRequestBodyLogLimitSet.get -> bool
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.IsResponseBodyLogLimitSet.get -> bool
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.LoggingFields.get -> Microsoft.AspNetCore.HttpLogging.HttpLoggingFields
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.RequestBodyLogLimit.get -> int
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.RequestBodyLogLimit.set -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.ResponseBodyLogLimit.get -> int
Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.ResponseBodyLogLimit.set -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.Add(string! key, object? value) -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.Disable(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields) -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.Enable(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields) -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.HttpLoggingContext(Microsoft.AspNetCore.Http.HttpContext! httpContext) -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.IsAnyEnabled(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields) -> bool
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.LoggingFields.get -> Microsoft.AspNetCore.HttpLogging.HttpLoggingFields
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.LoggingFields.set -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.Parameters.get -> System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<string!, object?>>!
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.RequestBodyLogLimit.get -> int
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.RequestBodyLogLimit.set -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.ResponseBodyLogLimit.get -> int
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.ResponseBodyLogLimit.set -> void
Microsoft.AspNetCore.HttpLogging.HttpLoggingContext.TryOverride(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields field) -> bool
Microsoft.AspNetCore.HttpLogging.IHttpLoggingInterceptor
Microsoft.AspNetCore.HttpLogging.IHttpLoggingInterceptor.OnRequest(Microsoft.AspNetCore.HttpLogging.HttpLoggingContext! logContext) -> void
Microsoft.AspNetCore.HttpLogging.IHttpLoggingInterceptor.OnResponse(Microsoft.AspNetCore.HttpLogging.HttpLoggingContext! logContext) -> void
static Microsoft.AspNetCore.Builder.HttpLoggingEndpointConventionBuilderExtensions.WithHttpLogging<TBuilder>(this TBuilder builder, Microsoft.AspNetCore.HttpLogging.HttpLoggingFields loggingFields, int? requestBodyLogLimit = null, int? responseBodyLogLimit = null) -> TBuilder
