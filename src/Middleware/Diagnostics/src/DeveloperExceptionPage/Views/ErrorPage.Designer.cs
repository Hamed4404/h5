// <auto-generated/>
#pragma warning disable 1591
namespace Microsoft.AspNetCore.Diagnostics.RazorViews
{
    #line hidden
    using System.Threading.Tasks;
#nullable restore
#line 1 "ErrorPage.cshtml"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "ErrorPage.cshtml"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "ErrorPage.cshtml"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "ErrorPage.cshtml"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "ErrorPage.cshtml"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "ErrorPage.cshtml"
using Microsoft.AspNetCore.Diagnostics.RazorViews;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "ErrorPage.cshtml"
using Microsoft.AspNetCore.Diagnostics;

#line default
#line hidden
#nullable disable
    internal class ErrorPage : Microsoft.Extensions.RazorViews.BaseView
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 17 "ErrorPage.cshtml"
  
    // TODO: Response.ReasonPhrase = "Internal Server Error";
    Response.ContentType = "text/html; charset=utf-8";
    string? location = string.Empty;

#line default
#line hidden
#nullable disable
            WriteLiteral("<!DOCTYPE html>\r\n<html");
            BeginWriteAttribute("lang", " lang=\"", 537, "\"", 598, 1);
#nullable restore
#line 23 "ErrorPage.cshtml"
WriteAttributeValue("", 544, CultureInfo.CurrentUICulture.TwoLetterISOLanguageName, 544, 54, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <title>");
#nullable restore
#line 26 "ErrorPage.cshtml"
      Write(Model.Title);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</title>
    <style>
        :root {
    --color-text: #222;
    --color-background: #fff;
    --color-border: #ddd;
    --color-link: #105e85;
    --color-link-hover: #157eb0;

    --color-heading-main: #44525e;
    --color-heading-stacktrace: #363636;
    --color-table-heading: #44525e;

    --color-tab-link: #105e85;
    --color-tab-selected: #fff;
    --color-tab-selected-background: #105e85;

    --color-code-background: #fbfbfb;
    --color-code-highlight: #c70000;
    --color-code-context-linenum: #606060;
    --color-code-context: #606060;
    --color-code-context-button-background: #ddd;
}

/* Intentional double at-signs here to escape properly when included in cshtml */
");
            WriteLiteral(@"@media (prefers-color-scheme: dark) {
    :root {
        --color-text: #dcdcdc;
        --color-background: #222;
        --color-border: #444;
        --color-link: #4db7ea;
        --color-link-hover: #88cfea;

        --color-heading-main: #a9bac7;
        --color-heading-stacktrace: #c7c7c7;
        --color-table-heading: #a9bac7;

        --color-tab-link: #4db7ea;
        --color-tab-selected: #222;
        --color-tab-selected-background: #4db7ea;

        --color-code-background: #1c1c1c;
        --color-code-highlight: #ff8787;
        --color-code-context-linenum: #9B9B9B;
        --color-code-context: #9B9B9B;
        --color-code-context-button-background: #444;
    }
}

body {
    font-family: 'Segoe UI', Tahoma, Arial, Helvetica, sans-serif;
    font-size: .813em;
    color: var(--color-text);
    background-color: var(--color-background);
}

h1 {
    color: var(--color-heading-main);
    margin: 15px 0 15px 0;
}

h2 {
    margin: 10px 5px 0 0;
    padding:");
            WriteLiteral(@" 5px;
    border-bottom: 1px solid var(--color-border);
}

h3 {
    color: var(--color-heading-stacktrace);
    margin: 5px 5px 0 0;
    font-weight: normal;
}

code {
    font-family: Consolas, ""Courier New"", courier, monospace;
    font-weight: bold;
}

a {
    color: var(--color-link);
    text-decoration: none;
}
a:hover {
    color: var(--color-link-hover);
    text-decoration: underline;
}

/* Exception title & message */
body .titleerror {
    padding: 3px 3px 6px 3px;
    display: block;
    font-size: 1.5em;
    font-weight: 100;
}

/* Exception location */
body .location {
    margin: 3px 0 10px 30px;
}

/* Tab navigation */
#header {
    font-size: 18px;
    padding: 15px 0;
    border-top: 1px solid var(--color-border);
    border-bottom: 1px solid var(--color-border);
    margin-bottom: 0;
}
#header li {
    display: inline;
    margin: 5px;
    padding: 5px;
    color: var(--color-tab-link);
    cursor: pointer;
}
#header .selected {
    color");
            WriteLiteral(@": var(--color-tab-selected);
    background: var(--color-tab-selected-background);
}

/* Stack page */
#stackpage .details {
    font-size: 1.2em;
    padding: 3px;
}
#stackpage ul {
    list-style: none;
    padding-left: 0;
    margin: 0;
}

#stackpage .frame {
    padding: 0;
    margin: 0 0 0 30px;
}
#stackpage .frame h3 {
    padding: 2px;
    margin: 0;
}

/* Stack frame source */
#stackpage .source {
    padding: 0 0 0 30px;
}
#stackpage .source ol li {
    font-family: Consolas, ""Courier New"", courier, monospace;
    white-space: pre;
    background-color: var(--color-code-background);
}

/* Stack frame source: highlighted line */
#stackpage .source .highlight {
    border-left: 3px solid var(--color-code-highlight);
    margin-left: -3px;
    font-weight: bold;
}
#stackpage .source .highlight li span {
    color: var(--color-code-highlight);
}

/* Stack frame source: context lines */
#stackpage .source .collapsible {
    color: var(--color-code-context-li");
            WriteLiteral(@"nenum);
}
#stackpage .source .collapsible li span {
    color: var(--color-code-context);
}

.expandCollapseButton {
    position: absolute;
    left: 10px;
    width: 16px;
    height: 16px;
    font-size: 10px;
    color: inherit;
    background: var(--color-code-context-button-background);
    padding: 0;
    border: 0;
    cursor: pointer;
}

/* Table */
.page table {
    border-collapse: collapse;
    margin: 0 0 20px;
}
.page th {
    padding: 10px 10px 5px 10px;
    color: var(--color-table-heading);
    text-align: left;
}
.page td {
    padding: 3px 10px;
}
.page tr {
    border-bottom: 1px solid var(--color-border);
}
.page tr > :not(:last-child) {
    border-right: 1px solid var(--color-border);
}

.page tr > :first-child {
    min-width: 150px;
}

.page tr > :last-child {
    word-break: break-word;
}

/* Raw exception details */
.rawExceptionBlock {
    font-size: 1.2em;
    border-top: 1px solid var(--color-border);
    border-bottom: 1px solid ");
            WriteLiteral(@"var(--color-border);
}
.showRawException {
    display: inline-block;
    color: var(--color-link);
    background: transparent;
    font: inherit;
    border: 0;
    padding: 10px 0;
    cursor: pointer;
}
.showRawException:hover {
    color: var(--color-link-hover);
    text-decoration: underline;
}

    </style>
</head>
<body>
    <h1>");
#nullable restore
#line 258 "ErrorPage.cshtml"
   Write(Resources.ErrorPageHtml_UnhandledException);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h1>\r\n");
#nullable restore
#line 259 "ErrorPage.cshtml"
     foreach (var errorDetail in Model.ErrorDetails)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"titleerror\">\r\n            ");
#nullable restore
#line 262 "ErrorPage.cshtml"
       Write(errorDetail.Error!.GetType().Name);

#line default
#line hidden
#nullable disable
            WriteLiteral(": ");
#nullable restore
#line 262 "ErrorPage.cshtml"
                                                  
                Output.Write(HtmlEncodeAndReplaceLineBreaks(errorDetail.Error.Message));
            

#line default
#line hidden
#nullable disable
            WriteLiteral("        </div>\r\n");
#nullable restore
#line 266 "ErrorPage.cshtml"

        var firstFrame = errorDetail.StackFrames.FirstOrDefault();
        if (firstFrame != null)
        {
            location = firstFrame.Function;
        }
        if (!string.IsNullOrEmpty(location) && firstFrame != null && !string.IsNullOrEmpty(firstFrame.File))
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p class=\"location\">");
#nullable restore
#line 274 "ErrorPage.cshtml"
                           Write(location);

#line default
#line hidden
#nullable disable
            WriteLiteral(" in <code");
            BeginWriteAttribute("title", " title=\"", 6529, "\"", 6553, 1);
#nullable restore
#line 274 "ErrorPage.cshtml"
WriteAttributeValue("", 6537, firstFrame.File, 6537, 16, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 274 "ErrorPage.cshtml"
                                                                       Write(System.IO.Path.GetFileName(firstFrame.File));

#line default
#line hidden
#nullable disable
            WriteLiteral("</code>, line ");
#nullable restore
#line 274 "ErrorPage.cshtml"
                                                                                                                                 Write(firstFrame.Line);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 275 "ErrorPage.cshtml"
        }
        else if (!string.IsNullOrEmpty(location))
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p class=\"location\">");
#nullable restore
#line 278 "ErrorPage.cshtml"
                           Write(location);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 279 "ErrorPage.cshtml"
        }
        else
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p class=\"location\">");
#nullable restore
#line 282 "ErrorPage.cshtml"
                           Write(Resources.ErrorPageHtml_UnknownLocation);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 283 "ErrorPage.cshtml"
        }

        var reflectionTypeLoadException = errorDetail.Error as ReflectionTypeLoadException;
        if (reflectionTypeLoadException != null)
        {
            if (reflectionTypeLoadException.LoaderExceptions.Length > 0)
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <h3>Loader Exceptions:</h3>\r\n                <ul>\r\n");
#nullable restore
#line 292 "ErrorPage.cshtml"
                     foreach (var ex in reflectionTypeLoadException.LoaderExceptions)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <li>");
#nullable restore
#line 294 "ErrorPage.cshtml"
                       Write(ex!.Message);

#line default
#line hidden
#nullable disable
            WriteLiteral("</li>\r\n");
#nullable restore
#line 295 "ErrorPage.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </ul>\r\n");
#nullable restore
#line 297 "ErrorPage.cshtml"
            }
        }
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("    <ul id=\"header\">\r\n        <li id=\"stack\" tabindex=\"1\" class=\"selected\">\r\n            ");
#nullable restore
#line 302 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_StackButton);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </li>\r\n        <li id=\"query\" tabindex=\"2\">\r\n            ");
#nullable restore
#line 305 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_QueryButton);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </li>\r\n        <li id=\"cookies\" tabindex=\"3\">\r\n            ");
#nullable restore
#line 308 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_CookiesButton);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </li>\r\n        <li id=\"headers\" tabindex=\"4\">\r\n            ");
#nullable restore
#line 311 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_HeadersButton);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </li>\r\n        <li id=\"routing\" tabindex=\"5\">\r\n            ");
#nullable restore
#line 314 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_RoutingButton);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </li>\r\n    </ul>\r\n\r\n    <div id=\"stackpage\" class=\"page\">\r\n        <ul>\r\n");
#nullable restore
#line 320 "ErrorPage.cshtml"
              
                var exceptionCount = 0;
                var stackFrameCount = 0;
                var exceptionDetailId = "";
                var frameId = "";
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 326 "ErrorPage.cshtml"
             foreach (var errorDetail in Model.ErrorDetails)
            {
                exceptionCount++;
                exceptionDetailId = "exceptionDetail" + exceptionCount;


#line default
#line hidden
#nullable disable
            WriteLiteral("                <li>\r\n                    <h2>");
#nullable restore
#line 332 "ErrorPage.cshtml"
                   Write(errorDetail.Error!.GetType().Name);

#line default
#line hidden
#nullable disable
            WriteLiteral(": ");
#nullable restore
#line 332 "ErrorPage.cshtml"
                                                       Write(errorDetail.Error.Message);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h2>\r\n                    <ul>\r\n");
#nullable restore
#line 334 "ErrorPage.cshtml"
                         foreach (var frame in errorDetail.StackFrames)
                        {
                            stackFrameCount++;
                            frameId = "frame" + stackFrameCount;


#line default
#line hidden
#nullable disable
            WriteLiteral("                            <li class=\"frame\"");
            BeginWriteAttribute("id", " id=\"", 8843, "\"", 8856, 1);
#nullable restore
#line 339 "ErrorPage.cshtml"
WriteAttributeValue("", 8848, frameId, 8848, 8, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\r\n");
#nullable restore
#line 340 "ErrorPage.cshtml"
                                 if (string.IsNullOrEmpty(frame.File))
                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    <h3>");
#nullable restore
#line 342 "ErrorPage.cshtml"
                                   Write(frame.Function);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h3>\r\n");
#nullable restore
#line 343 "ErrorPage.cshtml"
                                }
                                else
                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    <h3>");
#nullable restore
#line 346 "ErrorPage.cshtml"
                                   Write(frame.Function);

#line default
#line hidden
#nullable disable
            WriteLiteral(" in <code");
            BeginWriteAttribute("title", " title=\"", 9201, "\"", 9220, 1);
#nullable restore
#line 346 "ErrorPage.cshtml"
WriteAttributeValue("", 9209, frame.File, 9209, 11, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 346 "ErrorPage.cshtml"
                                                                                Write(System.IO.Path.GetFileName(frame.File));

#line default
#line hidden
#nullable disable
            WriteLiteral("</code></h3>\r\n");
#nullable restore
#line 347 "ErrorPage.cshtml"
                                }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 349 "ErrorPage.cshtml"
                                 if (frame.Line != 0 && frame.ContextCode.Any())
                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    <button class=\"expandCollapseButton\" data-frameId=\"");
#nullable restore
#line 351 "ErrorPage.cshtml"
                                                                                  Write(frameId);

#line default
#line hidden
#nullable disable
            WriteLiteral("\">+</button>\r\n                                    <div class=\"source\">\r\n");
#nullable restore
#line 353 "ErrorPage.cshtml"
                                         if (frame.PreContextCode.Any())
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <ol");
            BeginWriteAttribute("start", " start=\"", 9760, "\"", 9789, 1);
#nullable restore
#line 355 "ErrorPage.cshtml"
WriteAttributeValue("", 9768, frame.PreContextLine, 9768, 21, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"collapsible\">\r\n");
#nullable restore
#line 356 "ErrorPage.cshtml"
                                                 foreach (var line in frame.PreContextCode)
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <li><span>");
#nullable restore
#line 358 "ErrorPage.cshtml"
                                                         Write(line);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span></li>\r\n");
#nullable restore
#line 359 "ErrorPage.cshtml"
                                                }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            </ol>\r\n");
#nullable restore
#line 361 "ErrorPage.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                                        <ol");
            BeginWriteAttribute("start", " start=\"", 10228, "\"", 10247, 1);
#nullable restore
#line 363 "ErrorPage.cshtml"
WriteAttributeValue("", 10236, frame.Line, 10236, 11, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"highlight\">\r\n");
#nullable restore
#line 364 "ErrorPage.cshtml"
                                             foreach (var line in frame.ContextCode)
                                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                <li><span>");
#nullable restore
#line 366 "ErrorPage.cshtml"
                                                     Write(line);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span></li>\r\n");
#nullable restore
#line 367 "ErrorPage.cshtml"
                                            }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        </ol>\r\n\r\n");
#nullable restore
#line 370 "ErrorPage.cshtml"
                                         if (frame.PostContextCode.Any())
                                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            <ol");
            BeginWriteAttribute("start", " start=\'", 10740, "\'", 10765, 1);
#nullable restore
#line 372 "ErrorPage.cshtml"
WriteAttributeValue("", 10748, frame.Line + 1, 10748, 17, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"collapsible\">\r\n");
#nullable restore
#line 373 "ErrorPage.cshtml"
                                                 foreach (var line in frame.PostContextCode)
                                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                                    <li><span>");
#nullable restore
#line 375 "ErrorPage.cshtml"
                                                         Write(line);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span></li>\r\n");
#nullable restore
#line 376 "ErrorPage.cshtml"
                                                }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                            </ol>\r\n");
#nullable restore
#line 378 "ErrorPage.cshtml"
                                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    </div>\r\n");
#nullable restore
#line 380 "ErrorPage.cshtml"
                                }

#line default
#line hidden
#nullable disable
            WriteLiteral("                            </li>\r\n");
#nullable restore
#line 382 "ErrorPage.cshtml"
                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                    </ul>\r\n                </li>\r\n                <li>\r\n                    <br />\r\n                    <div class=\"rawExceptionBlock\">\r\n                        <button class=\"showRawException\" data-exceptionDetailId=\"");
#nullable restore
#line 388 "ErrorPage.cshtml"
                                                                            Write(exceptionDetailId);

#line default
#line hidden
#nullable disable
            WriteLiteral("\">Show raw exception details</button>\r\n                        <div");
            BeginWriteAttribute("id", " id=\"", 11620, "\"", 11643, 1);
#nullable restore
#line 389 "ErrorPage.cshtml"
WriteAttributeValue("", 11625, exceptionDetailId, 11625, 18, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"rawExceptionDetails\">\r\n                            <pre class=\"rawExceptionStackTrace\">");
#nullable restore
#line 390 "ErrorPage.cshtml"
                                                           Write(errorDetail.Error.ToString());

#line default
#line hidden
#nullable disable
            WriteLiteral("</pre>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n");
#nullable restore
#line 394 "ErrorPage.cshtml"
            }

#line default
#line hidden
#nullable disable
            WriteLiteral("        </ul>\r\n    </div>\r\n\r\n    <div id=\"querypage\" class=\"page\">\r\n");
#nullable restore
#line 399 "ErrorPage.cshtml"
         if (Model.Query.Any())
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>");
#nullable restore
#line 404 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_VariableColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                        <th>");
#nullable restore
#line 405 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_ValueColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n");
#nullable restore
#line 409 "ErrorPage.cshtml"
                     foreach (var kv in Model.Query.OrderBy(kv => kv.Key))
                    {
                        foreach (var v in kv.Value)
                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <tr>\r\n                                <td>");
#nullable restore
#line 414 "ErrorPage.cshtml"
                               Write(kv.Key);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                <td>");
#nullable restore
#line 415 "ErrorPage.cshtml"
                               Write(v);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            </tr>\r\n");
#nullable restore
#line 417 "ErrorPage.cshtml"
                        }
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tbody>\r\n            </table>\r\n");
#nullable restore
#line 421 "ErrorPage.cshtml"
        }
        else
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p>");
#nullable restore
#line 424 "ErrorPage.cshtml"
          Write(Resources.ErrorPageHtml_NoQueryStringData);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 425 "ErrorPage.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("    </div>\r\n\r\n    <div id=\"cookiespage\" class=\"page\">\r\n");
#nullable restore
#line 429 "ErrorPage.cshtml"
         if (Model.Cookies.Any())
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>");
#nullable restore
#line 434 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_VariableColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                        <th>");
#nullable restore
#line 435 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_ValueColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n");
#nullable restore
#line 439 "ErrorPage.cshtml"
                     foreach (var kv in Model.Cookies.OrderBy(kv => kv.Key))
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td>");
#nullable restore
#line 442 "ErrorPage.cshtml"
                           Write(kv.Key);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 443 "ErrorPage.cshtml"
                           Write(kv.Value);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        </tr>\r\n");
#nullable restore
#line 445 "ErrorPage.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tbody>\r\n            </table>\r\n");
#nullable restore
#line 448 "ErrorPage.cshtml"
        }
        else
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p>");
#nullable restore
#line 451 "ErrorPage.cshtml"
          Write(Resources.ErrorPageHtml_NoCookieData);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 452 "ErrorPage.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("    </div>\r\n\r\n    <div id=\"headerspage\" class=\"page\">\r\n");
#nullable restore
#line 456 "ErrorPage.cshtml"
         if (Model.Headers.Any())
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>");
#nullable restore
#line 461 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_VariableColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                        <th>");
#nullable restore
#line 462 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_ValueColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n");
#nullable restore
#line 466 "ErrorPage.cshtml"
                     foreach (var kv in Model.Headers.OrderBy(kv => kv.Key))
                    {
                        foreach (var v in kv.Value)
                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <tr>\r\n                                <td>");
#nullable restore
#line 471 "ErrorPage.cshtml"
                               Write(kv.Key);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                <td>");
#nullable restore
#line 472 "ErrorPage.cshtml"
                               Write(v);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            </tr>\r\n");
#nullable restore
#line 474 "ErrorPage.cshtml"
                        }
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tbody>\r\n            </table>\r\n");
#nullable restore
#line 478 "ErrorPage.cshtml"
        }
        else
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p>");
#nullable restore
#line 481 "ErrorPage.cshtml"
          Write(Resources.ErrorPageHtml_NoHeaderData);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 482 "ErrorPage.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("    </div>\r\n\r\n    <div id=\"routingpage\" class=\"page\">\r\n        <h2>");
#nullable restore
#line 486 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_Endpoint);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h2>\r\n");
#nullable restore
#line 487 "ErrorPage.cshtml"
         if (Model.Endpoint != null)
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>");
#nullable restore
#line 492 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_NameColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                        <th>");
#nullable restore
#line 493 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_ValueColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>");
#nullable restore
#line 498 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_EndpointDisplayName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        <td>");
#nullable restore
#line 499 "ErrorPage.cshtml"
                       Write(Model.Endpoint.DisplayName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                    </tr>\r\n");
#nullable restore
#line 501 "ErrorPage.cshtml"
                     if (!string.IsNullOrEmpty(Model.Endpoint.RoutePattern))
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td>");
#nullable restore
#line 504 "ErrorPage.cshtml"
                           Write(Resources.ErrorPageHtml_EndpointRoutePattern);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 505 "ErrorPage.cshtml"
                           Write(Model.Endpoint.RoutePattern);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        </tr>\r\n");
#nullable restore
#line 507 "ErrorPage.cshtml"
                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 508 "ErrorPage.cshtml"
                     if (Model.Endpoint.Order != null)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td>");
#nullable restore
#line 511 "ErrorPage.cshtml"
                           Write(Resources.ErrorPageHtml_EndpointRouteOrder);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 512 "ErrorPage.cshtml"
                           Write(Model.Endpoint.Order);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        </tr>\r\n");
#nullable restore
#line 514 "ErrorPage.cshtml"
                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 515 "ErrorPage.cshtml"
                     if (!string.IsNullOrEmpty(Model.Endpoint.HttpMethods))
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td>");
#nullable restore
#line 518 "ErrorPage.cshtml"
                           Write(Resources.ErrorPageHtml_EndpointRouteHttpMethod);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 519 "ErrorPage.cshtml"
                           Write(Model.Endpoint.HttpMethods);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        </tr>\r\n");
#nullable restore
#line 521 "ErrorPage.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tbody>\r\n            </table>\r\n");
#nullable restore
#line 524 "ErrorPage.cshtml"
        }
        else
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p>");
#nullable restore
#line 527 "ErrorPage.cshtml"
          Write(Resources.ErrorPageHtml_NoEndpoint);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 528 "ErrorPage.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("        <h2>");
#nullable restore
#line 529 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_Metadata);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h2>\r\n");
#nullable restore
#line 530 "ErrorPage.cshtml"
         if (Model.Endpoint?.Metadata?.Count > 0)
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>");
#nullable restore
#line 535 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_MetadataTypeColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                        <th>");
#nullable restore
#line 536 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_MetadataDetail);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n");
#nullable restore
#line 540 "ErrorPage.cshtml"
                     foreach (var metadata in Model.Endpoint.Metadata)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td><span");
            BeginWriteAttribute("title", " title=\"", 16952, "\"", 17006, 1);
#nullable restore
#line 543 "ErrorPage.cshtml"
WriteAttributeValue("", 16960, metadata.GetType().FullName ?? string.Empty, 16960, 46, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 543 "ErrorPage.cshtml"
                                                                                        Write(metadata.GetType().Name);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span></td>\r\n                            <td>\r\n");
#nullable restore
#line 545 "ErrorPage.cshtml"
                                  
                                    Output.Write(HtmlEncodeAndReplaceLineBreaks(metadata.ToString() ?? string.Empty));
                                

#line default
#line hidden
#nullable disable
            WriteLiteral("                            </td>\r\n                        </tr>\r\n");
#nullable restore
#line 550 "ErrorPage.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tbody>\r\n            </table>\r\n");
#nullable restore
#line 553 "ErrorPage.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("        <h2>");
#nullable restore
#line 554 "ErrorPage.cshtml"
       Write(Resources.ErrorPageHtml_RouteValues);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h2>\r\n");
#nullable restore
#line 555 "ErrorPage.cshtml"
         if (Model.RouteValues != null && Model.RouteValues.Any())
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>");
#nullable restore
#line 560 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_VariableColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                        <th>");
#nullable restore
#line 561 "ErrorPage.cshtml"
                       Write(Resources.ErrorPageHtml_ValueColumn);

#line default
#line hidden
#nullable disable
            WriteLiteral("</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n");
#nullable restore
#line 565 "ErrorPage.cshtml"
                     foreach (var kv in Model.RouteValues.OrderBy(kv => kv.Key))
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <tr>\r\n                            <td>");
#nullable restore
#line 568 "ErrorPage.cshtml"
                           Write(kv.Key);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            <td>");
#nullable restore
#line 569 "ErrorPage.cshtml"
                            Write(kv.Value!);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                        </tr>\r\n");
#nullable restore
#line 571 "ErrorPage.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                </tbody>\r\n            </table>\r\n");
#nullable restore
#line 574 "ErrorPage.cshtml"
        }
        else
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <p>");
#nullable restore
#line 577 "ErrorPage.cshtml"
          Write(Resources.ErrorPageHtml_NoRouteValues);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 578 "ErrorPage.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"    </div>

    <script>
        //<!--
        (function (window, undefined) {
    ""use strict"";

    function ns(selector, element) {
        return new NodeCollection(selector, element);
    }

    function NodeCollection(selector, element) {
        this.items = [];
        element = element || window.document;

        var nodeList;

        if (typeof (selector) === ""string"") {
            nodeList = element.querySelectorAll(selector);
            for (var i = 0, l = nodeList.length; i < l; i++) {
                this.items.push(nodeList.item(i));
            }
        }
    }

    NodeCollection.prototype = {
        each: function (callback) {
            for (var i = 0, l = this.items.length; i < l; i++) {
                callback(this.items[i], i);
            }
            return this;
        },

        children: function (selector) {
            var children = [];

            this.each(function (el) {
                children = children.concat(ns(selector, e");
            WriteLiteral(@"l).items);
            });

            return ns(children);
        },

        hide: function () {
            this.each(function (el) {
                el.style.display = ""none"";
            });

            return this;
        },

        toggle: function () {
            this.each(function (el) {
                el.style.display = el.style.display === ""none"" ? """" : ""none"";
            });

            return this;
        },

        show: function () {
            this.each(function (el) {
                el.style.display = """";
            });

            return this;
        },

        addClass: function (className) {
            this.each(function (el) {
                var existingClassName = el.className,
                    classNames;
                if (!existingClassName) {
                    el.className = className;
                } else {
                    classNames = existingClassName.split("" "");
                    if (classNames.indexOf(classNa");
            WriteLiteral(@"me) < 0) {
                        el.className = existingClassName + "" "" + className;
                    }
                }
            });

            return this;
        },

        removeClass: function (className) {
            this.each(function (el) {
                var existingClassName = el.className,
                    classNames, index;
                if (existingClassName === className) {
                    el.className = """";
                } else if (existingClassName) {
                    classNames = existingClassName.split("" "");
                    index = classNames.indexOf(className);
                    if (index > 0) {
                        classNames.splice(index, 1);
                        el.className = classNames.join("" "");
                    }
                }
            });

            return this;
        },

        attr: function (name) {
            if (this.items.length === 0) {
                return null;
            }

       ");
            WriteLiteral(@"     return this.items[0].getAttribute(name);
        },

        on: function (eventName, handler) {
            this.each(function (el, idx) {
                var callback = function (e) {
                    e = e || window.event;
                    if (!e.which && e.keyCode) {
                        e.which = e.keyCode; // Normalize IE8 key events
                    }
                    handler.apply(el, [e]);
                };

                if (el.addEventListener) { // DOM Events
                    el.addEventListener(eventName, callback, false);
                } else if (el.attachEvent) { // IE8 events
                    el.attachEvent(""on"" + eventName, callback);
                } else {
                    el[""on"" + type] = callback;
                }
            });

            return this;
        },

        click: function (handler) {
            return this.on(""click"", handler);
        },

        keypress: function (handler) {
            return this.o");
            WriteLiteral(@"n(""keypress"", handler);
        }
    };

    function frame(el) {
        ns("".source .collapsible"", el).toggle();
    }

    function expandCollapseButton(el) {
        var frameId = el.getAttribute(""data-frameId"");
        frame(document.getElementById(frameId));
        if (el.innerText === ""+"") {
            el.innerText = ""-"";
        }
        else {
            el.innerText = ""+"";
        }
    }

    function tab(el) {
        var unselected = ns(""#header .selected"").removeClass(""selected"").attr(""id"");
        var selected = ns(""#"" + el.id).addClass(""selected"").attr(""id"");

        ns(""#"" + unselected + ""page"").hide();
        ns(""#"" + selected + ""page"").show();
    }

    ns("".rawExceptionDetails"").hide();
    ns("".collapsible"").hide();
    ns("".page"").hide();
    ns(""#stackpage"").show();

    ns("".expandCollapseButton"")
        .click(function () {
            expandCollapseButton(this);
        })
        .keypress(function (e) {
            if (e.which === 13)");
            WriteLiteral(@" {
                expandCollapseButton(this);
            }
        });

    ns(""#header li"")
        .click(function () {
            tab(this);
        })
        .keypress(function (e) {
            if (e.which === 13) {
                tab(this);
            }
        });

    ns("".showRawException"")
        .click(function () {
            var exceptionDetailId = this.getAttribute(""data-exceptionDetailId"");
            ns(""#"" + exceptionDetailId).toggle();
        });
})(window);
        //-->
    </script>
</body>
</html>
");
        }
        #pragma warning restore 1998
#nullable restore
#line 9 "ErrorPage.cshtml"
 
    public ErrorPage(ErrorPageModel model)
    {
        Model = model;
    }

    public ErrorPageModel Model { get; set; }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
