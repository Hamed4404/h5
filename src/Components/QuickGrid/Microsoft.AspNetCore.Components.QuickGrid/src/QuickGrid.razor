@using Microsoft.AspNetCore.Components.QuickGrid.Infrastructure
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization

@typeparam TGridItem

<CascadingValue TValue="InternalGridContext<TGridItem>" IsFixed="true" Value="@_internalGridContext">
    @{StartCollectingColumns(); }
    @ChildContent
    <Defer>
        @{FinishCollectingColumns(); }
        <ColumnsCollectedNotifier TGridItem="TGridItem" />

        <table theme="@Theme" aria-rowcount="@(_ariaBodyRowCount + 1)" @ref="_tableReference" @onclosecolumnoptions="CloseColumnOptions" @attributes="AdditionalAttributes" class="@GridClass()">
            <thead>
                <tr>
                    @_renderColumnHeaders
                </tr>
            </thead>
            <tbody>
                @if (Virtualize)
                {
                    <Virtualize @ref="@_virtualizeComponent"
                        TItem="(int RowIndex, TGridItem Data)"
                        ItemSize="@ItemSize"
                        OverscanCount="@OverscanCount"
                        ItemsProvider="@ProvideVirtualizedItems"
                        ItemContent="@(item => builder => RenderRow(builder, item.RowIndex, item.Data))"
                        Placeholder="@(placeholderContext => builder => RenderPlaceholderRow(builder, placeholderContext))" />
                }
                else
                {
                    @_renderNonVirtualizedRows
                }
            </tbody>
        </table>
    </Defer>
</CascadingValue>

@code {
    private void RenderNonVirtualizedRows(RenderTreeBuilder __builder)
    {
        var initialRowIndex = 2; // aria-rowindex is 1-based, plus the first row is the header
        var rowIndex = initialRowIndex;
        foreach (var item in _currentNonVirtualizedViewItems)
        {
            RenderRow(__builder, rowIndex++, item);
        }

        // When pagination is enabled, by default ensure we render the exact number of expected rows per page,
        // even if there aren't enough data items. This avoids the layout jumping on the last page.
        // Consider making this optional.
        if (Pagination is not null)
        {
            while (rowIndex++ < initialRowIndex + Pagination.ItemsPerPage)
            {
                __builder.OpenElement(0, "tr");
                foreach (var col in _columns)
                {
                    __builder.OpenElement(1, "td");
                    __builder.AddAttribute(2, "class", ColumnClass(col));
                    __builder.CloseElement();
                }
                __builder.CloseElement();
            }
        }
    }

    private void RenderRow(RenderTreeBuilder __builder, int rowIndex, TGridItem item)
    {
        __builder.OpenElement(0, "tr");
        __builder.AddAttribute(1, "key", ItemKey(item));
        __builder.AddAttribute(2, "aria-rowindex", rowIndex);

        if (OnRowClicked.HasDelegate)
        {
            __builder.AddAttribute(3, "onclick", EventCallback.Factory.Create(this, () => HandleRowClick(item)));
        }

        foreach (var col in _columns)
        {
            __builder.OpenElement(4, "td");
            __builder.AddAttribute(5, "class", ColumnClass(col));
            col.CellContent(__builder, item);
            __builder.CloseElement();
        }

        __builder.CloseElement();
    }

    private void RenderPlaceholderRow(RenderTreeBuilder __builder, PlaceholderContext placeholderContext)
    {
        __builder.OpenElement(0, "tr");
        __builder.AddAttribute(1, "aria-rowindex", placeholderContext.Index + 1);
        foreach (var col in _columns)
        {
            __builder.OpenElement(2, "td");
            __builder.AddAttribute(3, "class", "grid-cell-placeholder " + ColumnClass(col));
            col.RenderPlaceholderContent(__builder, placeholderContext);
            __builder.CloseElement();
        }
        __builder.CloseElement();
    }

    private void RenderColumnHeaders(RenderTreeBuilder __builder)
    {
        foreach (var col in _columns)
        {
            __builder.OpenElement(0, "th");
            __builder.AddAttribute(1, "class", ColumnHeaderClass(col));
            __builder.AddAttribute(2, "aria-sort", AriaSortValue(col));
            __builder.AddAttribute(3, "key", col);
            __builder.AddAttribute(4, "scope", "col");

            __builder.OpenElement(5, "div");
            __builder.AddAttribute(6, "class", "col-header-content");
            __builder.AddContent(7, col.HeaderContent);
            __builder.CloseElement();

            if (col == _displayOptionsForColumn)
            {
                __builder.OpenElement(8, "div");
                __builder.AddAttribute(9, "class", "col-options");
                __builder.AddContent(10, col.ColumnOptions);
                __builder.CloseElement();
            }

            __builder.CloseElement();
        }
    }
}
