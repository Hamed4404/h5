@page "/focus-on-navigate/stream"
@using System.Threading.Channels
@attribute [StreamRendering]

<h1>Stream rendered element to focus</h1>

<p id="streaming-status">@(_doneStreaming ? "Complete" : "Streaming...")</p>

@for (var i = 0; i < _elements.Count; i++)
{
    var wantsFocus = _elements[i].WantsFocus;
    <input
        type="text"
        id="input-element-@i"
        placeholder="Element @i (Wants focus: @wantsFocus)"
        data-focus-on-navigate="@wantsFocus" />
    <br />
}

@code {
    private static Channel<object> s_clientMessageChannel;

    private readonly List<Element> _elements = [];
    private bool _doneStreaming;

    protected override async Task OnInitializedAsync()
    {
        s_clientMessageChannel = Channel.CreateUnbounded<object>();

        await foreach (var message in s_clientMessageChannel.Reader.ReadAllAsync())
        {
            switch (message)
            {
                case AddElementMessage addElement:
                    _elements.Add(addElement.Element);
                    break;
                case RemoveElementMessage removeElement:
                    _elements.RemoveAt(removeElement.index);
                    break;
            }

            StateHasChanged();
        }

        _doneStreaming = true;
    }

    public static void AddElement(Element element)
        => s_clientMessageChannel.Writer.TryWrite(new AddElementMessage(element));

    public static void RemoveElement(int index)
        => s_clientMessageChannel.Writer.TryWrite(new RemoveElementMessage(index));

    public static void EndResponse()
        => s_clientMessageChannel.Writer.Complete();

    private record class AddElementMessage(Element Element);
    private record class RemoveElementMessage(int index);
    public record struct Element(bool WantsFocus);
}
