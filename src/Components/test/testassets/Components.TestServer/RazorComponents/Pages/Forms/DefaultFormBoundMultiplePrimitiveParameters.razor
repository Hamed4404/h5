@page "/forms/default-form-bound-multiple-primitive-parameters"
@using Microsoft.AspNetCore.Components.Forms

<h2>Default form with bound parameter</h2>

<EditForm Model="Parameter" method="POST" OnValidSubmit="() => _submitted = true">
    <input type="text" name="Parameter" value="@(_attemptedParameterValue ?? Parameter.ToString())" />
    <input type="text" name="OtherParameter" value="@(_attemptedOtherValue ?? OtherParameter.ToString())" />
    <input id="send" type="submit" value="Send" />
</EditForm>

@if (_submitted)
{
    if (_errors.Count == 0)
    {
        <p id="ParameterValue">Your number is @Parameter!</p>
        <p id="OtherParameterValue">Your other value is @OtherParameter!</p>
    }
    else
    {
        <p>There were errors:</p>
        <ul id="errors">
            @foreach (var error in _errors)
            {
                <li>@error</li>
            }
        </ul>
    }
}
@code {
    bool _submitted = false;
    string _attemptedParameterValue = null;
    string _attemptedOtherValue = null;

    IReadOnlyList<FormattableString> _errors;

    [SupplyParameterFromForm] public int Parameter { get; set; } = 0;
    [SupplyParameterFromForm] public bool OtherParameter { get; set; } = false;

    [CascadingParameter] public ModelBindingContext Context { get; set; }

    protected override void OnInitialized()
    {
        _errors = Context.GetErrors(nameof(Parameter)).Concat(Context.GetErrors(nameof(OtherParameter))).ToList();
        if (_errors.Count > 0)
        {
            _attemptedParameterValue = Context.GetAttemptedValue(nameof(Parameter));
            _attemptedOtherValue = Context.GetAttemptedValue(nameof(OtherParameter));
        }
    }
}
