@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly
@using System.Linq
@using System.Reflection

@inject WebAssemblyLazyAssemblyLoader lazyLoader

<Router AppAssembly="@typeof(BasicTestApp.Program).Assembly" AdditionalAssemblies="@lazyLoadedAssemblies" OnNavigate="@OnNavigate">
    <Found Context="routeData">
        @if (loading) {
            <div style="padding: 20px;background-color:blue;color:white;" id="loading-banner" @onclick="HideLoadingBar">
                <p>Loading the requested page...</p>
            </div>
        } else {
            <RouteView RouteData="@routeData" />
        }
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(RouterTestLayout)">
            <div id="test-info">Oops, that component wasn't found!</div>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private List<Assembly> lazyLoadedAssemblies = new List<Assembly>();

    private bool loading = false;

    private void OnNavigate (string uri)
    {
        Console.WriteLine($"Running OnNavigate for {uri}...");
        _ = LoadAssemblies(uri);
    }

    private void HideLoadingBar() {
        loading = false;
    }

    private void ShowLoadingState() {
        loading = true;
        StateHasChanged();
    }

    private async Task LoadAssemblies(string uri)
    {
        bool loadedAssemblies = false;
        try
        {
            if (uri.EndsWith("WithLazyAssembly"))
            {
                loadedAssemblies = true;
                ShowLoadingState();
                Console.WriteLine($"Loading assemblies for WithLazyAssembly...");
                var assemblies = await lazyLoader.LoadAssembliesAsync(new List<string>(){ "Newtonsoft.Json.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error when loading assemblies: {e}");
        }
        finally
        {
            if (loadedAssemblies)
            {
                Console.WriteLine("Calling StateHasChanged...");
                StateHasChanged();
            }
        }

        return;
    }
}
