@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly
@using System.Linq
@using System.Reflection

@inject WebAssemblyLazyAssemblyLoader lazyLoader

<Router AppAssembly="@typeof(BasicTestApp.Program).Assembly" AdditionalAssemblies="@lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
    <Loading>
        <div style="padding: 20px;background-color:blue;color:white;" id="loading-banner">
            <p>Loading the requested page...</p>
        </div>
    </Loading>
    <Found Context="routeData">
        <RouteView RouteData="@routeData" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(RouterTestLayout)">
            <div id="test-info">Oops, that component wasn't found!</div>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private List<Assembly> lazyLoadedAssemblies = new List<Assembly>();

    private async Task<bool> OnNavigateAsync(string uri)
    {
        Console.WriteLine($"Running OnNavigate for {uri}...");
        return await LoadAssemblies(uri);
    }

    private async Task<bool> LoadAssemblies(string uri)
    {
        try
        {
            if (uri.EndsWith("WithLazyAssembly"))
            {
                Console.WriteLine($"Loading assemblies for WithLazyAssembly...");
                var assemblies = await lazyLoader.LoadAssembliesAsync(new List<string>(){ "Newtonsoft.Json.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
                return false;
            }

            if (uri.EndsWith("WithLazyLoadedRoutes"))
            {
                Console.WriteLine($"Loading assemblies for WithLazyAssembly...");
                var assemblies = await lazyLoader.LoadAssembliesAsync(new List<string>() { "TestContentPackage.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
                return true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error when loading assemblies: {e}");
        }
        return false;
    }
}
