<Project>
  
  <PropertyGroup>
    <_BlazorCopyFilesToOutputDirectoryDependsOn>
      $(_BlazorCopyFilesToOutputDirectoryDependsOn);
      _PrepareBlazorAssetsManifestInputs;
      _PrepareBlazorAssetsManifestOutputs;
      _PrepareServiceWorkerOutputs;
    </_BlazorCopyFilesToOutputDirectoryDependsOn>
  </PropertyGroup>

  <Target Name="_PrepareBlazorAssetsManifestInputs"
          Condition="'$(BlazorAssetsManifestPath)' != ''"
          DependsOnTargets="PrepareBlazorOutputs">

    <PropertyGroup>
      <_BlazorAssetsManifestIntermediateOutputPath>$(BlazorIntermediateOutputPath)assetsmanifest.json</_BlazorAssetsManifestIntermediateOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Include _framework/* content -->
      <_BlazorAssetsManifestItem Include="@(BlazorOutputWithTargetPath)">
        <AssetUrl>$([System.String]::Copy('%(TargetOutputPath)').Replace('\','/').Substring(5))</AssetUrl>
      </_BlazorAssetsManifestItem>

      <!-- Include content from wwwroot -->
      <_BlazorAssetsManifestItem Include="@(ContentWithTargetPath)" Condition="$([System.String]::Copy('%(ContentWithTargetPath.TargetPath)').Replace('\','/').StartsWith('wwwroot/'))">
        <AssetUrl>$([System.String]::Copy('%(ContentWithTargetPath.TargetPath)').Replace('\','/').Substring(8))</AssetUrl>
      </_BlazorAssetsManifestItem>

      <!-- Include SWA from references -->
      <_BlazorAssetsManifestItem Include="@(StaticWebAsset)" Condition="'%(StaticWebAsset.SourceType)' != ''">
        <AssetUrl>%(StaticWebAsset.BasePath)/%(StaticWebAsset.RelativePath)</AssetUrl>
      </_BlazorAssetsManifestItem>
    </ItemGroup>

  </Target>

  <UsingTask TaskName="WriteAssetsManifestFile" AssemblyFile="$(BlazorTasksPath)" />

  <Target Name="_PrepareBlazorAssetsManifestOutputs"
          Inputs="@(_BlazorAssetsManifestItem)"
          Outputs="$(_BlazorAssetsManifestIntermediateOutputPath)">

    <GetFileHash Files="@(_BlazorAssetsManifestItem)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_BlazorAssetWithHash" />  
    </GetFileHash>

    <WriteAssetsManifestFile
      AssetsWithHashes="@(_BlazorAssetWithHash)"
      OutputPath="$(_BlazorAssetsManifestIntermediateOutputPath)" />

    <ItemGroup>
      <BlazorOutputWithTargetPath
        Include="$(_BlazorAssetsManifestIntermediateOutputPath)"
        TargetOutputPath="$(BaseBlazorDistPath)$(BlazorAssetsManifestPath)" />
      
      <FileWrites Include="$(_BlazorAssetsManifestIntermediateOutputPath)" />
    </ItemGroup>

  </Target>

  <Target Name="_PrepareServiceWorkerOutputs"
          BeforeTargets="GetCopyToPublishDirectoryItems"
          DependsOnTargets="BlazorGetCopyToPublishDirectoryItems">
    <CallTarget Targets="_ProcessServiceWorkerToPublish" />
  </Target>

  <Target Name="_ProcessServiceWorkerToPublish" Inputs="@(ServiceWorkerToPublish)" Outputs="%(Identity).Fake">

    <PropertyGroup>
      <_TargetPathPublish>$(BlazorPublishDistDir)%(ServiceWorkerToPublish.OutputPath)</_TargetPathPublish>
      <_IntermediatePath>$(BlazorIntermediateOutputPath)serviceworker\%(ServiceWorkerToPublish.OutputPath)</_IntermediatePath>
      <_VersionToken>%(ServiceWorkerToPublish.VersionToken)</_VersionToken>
      <_Version>%(ServiceWorkerToPublish.Version)</_Version>
      <_Version Condition="'$(_Version)' == ''">$([System.Guid]::NewGuid())</_Version>
    </PropertyGroup>

    <ItemGroup>
      <!-- Don't output files that would be overwritten by this process -->
      <_ContentWithTargetPathToRemove
        Include="@(ContentWithTargetPath)"
        Condition="'%(ContentWithTargetPath.TargetPath)' == '$(_TargetPathPublish)'" />
      <ContentWithTargetPath Remove="@(_ContentWithTargetPathToRemove)" />

      <!-- Likewise, don't publish the original unmodified service worker -->
      <ContentWithTargetPath Remove="@(ServiceWorkerToPublish)" />
    </ItemGroup>

    <!-- Copy from input to intermediate location, performing string replacement if token name is specified -->
    <ReadLinesFromFile File="%(ServiceWorkerToPublish.Identity)">
      <Output TaskParameter="Lines" ItemName="_ServiceWorkerLine"/>
    </ReadLinesFromFile>
    <WriteLinesToFile
      Condition="'$(_VersionToken)' != ''"
      File="$(_IntermediatePath)"
      Lines="@(_ServiceWorkerLine->'$([System.String]::Copy('%(_ServiceWorkerLine.Identity)').Replace('$(_VersionToken)', '$(_Version)'))')"
      Overwrite="true" />
    <WriteLinesToFile
      Condition="'$(_VersionToken)' == ''"
      File="$(_IntermediatePath)"
      Lines="@(_ServiceWorkerLine)"
      Overwrite="true" />

    <!-- Include the intermediate file as output content -->
    <ItemGroup>
      <ContentWithTargetPath Include="$(_IntermediatePath)">
        <TargetPath>$(_TargetPathPublish)</TargetPath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ContentWithTargetPath>
    </ItemGroup>

  </Target>
  
</Project>
