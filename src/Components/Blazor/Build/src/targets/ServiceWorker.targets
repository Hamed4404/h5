<Project>
  
  <PropertyGroup>
    <_BlazorCopyFilesToOutputDirectoryDependsOn>
      $(_BlazorCopyFilesToOutputDirectoryDependsOn);
      ComputeBlazorAssetsManifestItems;
      _WriteBlazorAssetsManifest;
    </_BlazorCopyFilesToOutputDirectoryDependsOn>
  </PropertyGroup>

  <Target Name="ComputeBlazorAssetsManifestItems"
          Condition="'$(BlazorAssetsManifestPath)' != ''"
          DependsOnTargets="PrepareBlazorOutputs">

    <PropertyGroup>
      <_BlazorAssetsManifestIntermediateOutputPath>$(BlazorIntermediateOutputPath)assetsmanifest.json</_BlazorAssetsManifestIntermediateOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Include _framework/* content -->
      <BlazorAssetsManifestItem Include="@(BlazorOutputWithTargetPath)">
        <AssetUrl>$([System.String]::Copy('%(TargetOutputPath)').Replace('\','/').Substring(5))</AssetUrl>
      </BlazorAssetsManifestItem>

      <!-- Include content from wwwroot -->
      <BlazorAssetsManifestItem Include="@(ContentWithTargetPath)" Condition="$([System.String]::Copy('%(ContentWithTargetPath.TargetPath)').Replace('\','/').StartsWith('wwwroot/'))">
        <AssetUrl>$([System.String]::Copy('%(ContentWithTargetPath.TargetPath)').Replace('\','/').Substring(8))</AssetUrl>
      </BlazorAssetsManifestItem>

      <!-- Include SWA from references -->
      <BlazorAssetsManifestItem Include="@(StaticWebAsset)" Condition="'%(StaticWebAsset.SourceType)' != ''">
        <AssetUrl>%(StaticWebAsset.BasePath)/%(StaticWebAsset.RelativePath)</AssetUrl>
      </BlazorAssetsManifestItem>
    </ItemGroup>

  </Target>

  <UsingTask TaskName="WriteAssetsManifestFile" AssemblyFile="$(BlazorTasksPath)" />

  <Target Name="_WriteBlazorAssetsManifest"
          Inputs="@(BlazorAssetsManifestItem)"
          Outputs="$(_BlazorAssetsManifestIntermediateOutputPath)">

    <GetFileHash Files="@(BlazorAssetsManifestItem)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_BlazorAssetWithHash" />  
    </GetFileHash>

    <WriteAssetsManifestFile
      AssetsWithHashes="@(_BlazorAssetWithHash)"
      OutputPath="$(_BlazorAssetsManifestIntermediateOutputPath)" />

    <ItemGroup>
      <BlazorOutputWithTargetPath
        Include="$(_BlazorAssetsManifestIntermediateOutputPath)"
        TargetOutputPath="$(BaseBlazorDistPath)$(BlazorAssetsManifestPath)" />
      
      <FileWrites Include="$(_BlazorAssetsManifestIntermediateOutputPath)" />
    </ItemGroup>

  </Target>

  <Target Name="_PrepareServiceWorkerPublishOutputs"
          BeforeTargets="GetCopyToPublishDirectoryItems"
          DependsOnTargets="BlazorGetCopyToPublishDirectoryItems">
    <CallTarget Targets="_PrepareSingleServiceWorkerPublishOutputs" />
  </Target>

  <Target Name="_PrepareSingleServiceWorkerPublishOutputs" Inputs="@(ServiceWorker)" Outputs="%(Identity).Fake">

    <PropertyGroup>
      <_DevelopmentSource>%(ServiceWorker.Identity)</_DevelopmentSource>
      <_PublishedSource>%(ServiceWorker.ReplaceOnPublishContent)</_PublishedSource>
      <_VersionToken>%(ServiceWorker.ReplaceOnPublishVersionToken)</_VersionToken>
      <_VersionToken Condition="'$(_VersionToken)' == ''">{version}</_VersionToken>
      <_Version>%(ServiceWorker.ReplaceOnPublishVersion)</_Version>
      <_Version Condition="'$(_Version)' == ''">$([System.Guid]::NewGuid())</_Version>
      <_IntermediatePath>$(BlazorIntermediateOutputPath)serviceworker\$([System.IO.Path]::GetRandomFileName())</_IntermediatePath>
    </PropertyGroup>

    <FindInList List="@(ContentWithTargetPath)" ItemSpecToFind="$(_DevelopmentSource)">
      <Output TaskParameter="ItemFound" ItemName="_OriginalDevelopmentFile" />
    </FindInList>
    <Error Condition="'@(_OriginalDevelopmentFile)' == ''"
           Text="ServiceWorker: no content item found matching item spec '$(_DevelopmentSource)'" />
    <Error Condition="!Exists('$(_PublishedSource)')"
           Text="ServiceWorker: no file found at '$(_PublishedSource)'" />

    <!-- Copy from input to intermediate location, performing string replacement if token name is specified -->
    <ReadLinesFromFile File="$(_PublishedSource)">
      <Output TaskParameter="Lines" ItemName="_ServiceWorkerLine" />
    </ReadLinesFromFile>
    <WriteLinesToFile
      Condition="'$(_VersionToken)' != ''"
      File="$(_IntermediatePath)"
      Lines="@(_ServiceWorkerLine->'$([System.String]::Copy('%(_ServiceWorkerLine.Identity)').Replace('$(_VersionToken)', '$(_Version)'))')"
      Overwrite="true" />
    <WriteLinesToFile
      Condition="'$(_VersionToken)' == ''"
      File="$(_IntermediatePath)"
      Lines="@(_ServiceWorkerLine)"
      Overwrite="true" />

    <ItemGroup>
      <!-- Don't publish the input files directly -->
      <ContentWithTargetPath Remove="$(_DevelopmentSource); $(_PublishedSource)" />

      <!-- Do publish the intermediate file we just wrote -->
      <ContentWithTargetPath Include="$(_IntermediatePath)">
        <TargetPath>@(_OriginalDevelopmentFile->'%(TargetPath)')</TargetPath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ContentWithTargetPath>
    </ItemGroup>

  </Target>
  
</Project>
