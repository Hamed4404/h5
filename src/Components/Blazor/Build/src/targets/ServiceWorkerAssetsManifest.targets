<Project>
  
  <PropertyGroup>
    <_BlazorCopyFilesToOutputDirectoryDependsOn>
      $(_BlazorCopyFilesToOutputDirectoryDependsOn);
      _ComputeServiceWorkerAssetsManifestInputs;
      _WriteServiceWorkerAssetsManifest;
    </_BlazorCopyFilesToOutputDirectoryDependsOn>
  </PropertyGroup>

  <Target Name="_ComputeServiceWorkerAssetsManifestInputs"
          Condition="'$(ServiceWorkerAssetsManifest)' != ''"
          DependsOnTargets="PrepareBlazorOutputs">

    <PropertyGroup>
      <_ServiceWorkerAssetsManifestIntermediateOutputPath>$(BlazorIntermediateOutputPath)serviceworkerassets.js</_ServiceWorkerAssetsManifestIntermediateOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Include _framework/* content -->
      <ServiceWorkerAssetsManifestItem
        Include="@(BlazorOutputWithTargetPath)"
        Condition="$([System.String]::Copy('%(BlazorOutputWithTargetPath.TargetOutputPath)').Replace('\','/').StartsWith('dist/'))">
        <AssetUrl>$([System.String]::Copy('%(BlazorOutputWithTargetPath.TargetOutputPath)').Replace('\','/').Substring(5))</AssetUrl>
      </ServiceWorkerAssetsManifestItem>

      <!-- Include content from wwwroot -->
      <ServiceWorkerAssetsManifestItem
        Include="@(ContentWithTargetPath)"
        Condition="
          ('%(ContentWithTargetPath.CopyToPublishDirectory)' == 'Always' OR '%(ContentWithTargetPath.CopyToPublishDirectory)' == 'PreserveNewest')
          AND $([System.String]::Copy('%(ContentWithTargetPath.TargetPath)').Replace('\','/').StartsWith('wwwroot/'))">
        <AssetUrl>$([System.String]::Copy('%(ContentWithTargetPath.TargetPath)').Replace('\','/').Substring(8))</AssetUrl>
      </ServiceWorkerAssetsManifestItem>

      <!-- Include SWA from references -->
      <ServiceWorkerAssetsManifestItem
        Include="@(StaticWebAsset)"
        Condition="'%(StaticWebAsset.SourceType)' != ''">
        <AssetUrl>%(StaticWebAsset.BasePath)/%(StaticWebAsset.RelativePath)</AssetUrl>
      </ServiceWorkerAssetsManifestItem>
    </ItemGroup>

  </Target>

  <UsingTask TaskName="GenerateServiceWorkerAssetsManifest" AssemblyFile="$(BlazorTasksPath)" />

  <Target Name="_WriteServiceWorkerAssetsManifest"
          Inputs="@(ServiceWorkerAssetsManifestItem)"
          Outputs="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)"
          DependsOnTargets="_ComputeServiceWorkerAssetsManifestFileHashes; _ComputeDefaultServiceWorkerAssetsManifestVersion">

    <GenerateServiceWorkerAssetsManifest
      Version="$(ServiceWorkerAssetsManifestVersion)"
      AssetsWithHashes="@(_ServiceWorkerAssetsManifestItemWithHash)"
      OutputPath="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />

    <ItemGroup>
      <BlazorOutputWithTargetPath
        Include="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)"
        TargetOutputPath="$(BaseBlazorDistPath)$(ServiceWorkerAssetsManifest)" />
      
      <FileWrites Include="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />
    </ItemGroup>

  </Target>

  <Target Name="_ComputeServiceWorkerAssetsManifestFileHashes">
    <GetFileHash Files="@(ServiceWorkerAssetsManifestItem)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerAssetsManifestItemWithHash" />
    </GetFileHash>
  </Target>

  <!--
    If no ServiceWorkerAssetsManifestVersion was specified, we compute a default value by combining all the asset hashes.
    This is useful because then clients will only have to repopulate caches if the contents have changed.
  -->
  <Target Name="_ComputeDefaultServiceWorkerAssetsManifestVersion"
          Condition="'$(ServiceWorkerAssetsManifestVersion)' == ''">
    <PropertyGroup>
      <_CombinedHashIntermediatePath>$(BlazorIntermediateOutputPath)serviceworkerhashes.txt</_CombinedHashIntermediatePath>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(_CombinedHashIntermediatePath)"
      Lines="@(_ServiceWorkerAssetsManifestItemWithHash->'%(FileHash)')"
      Overwrite="true" />

    <GetFileHash Files="$(_CombinedHashIntermediatePath)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerAssetsManifestCombinedHash" />
    </GetFileHash>

    <PropertyGroup>
      <ServiceWorkerAssetsManifestVersion>$([System.String]::Copy('%(_ServiceWorkerAssetsManifestCombinedHash.FileHash)').Substring(0, 8))</ServiceWorkerAssetsManifestVersion>
    </PropertyGroup>
  </Target>
  
</Project>
