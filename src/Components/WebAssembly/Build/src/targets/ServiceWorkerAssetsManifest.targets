<Project>

  <Target Name="_ComputeServiceWorkerAssetsManifestInputs"
          Condition="'$(ServiceWorkerAssetsManifest)' != ''"
          BeforeTargets="_ResolveBlazorOutputs">

    <PropertyGroup>
      <_ServiceWorkerAssetsManifestIntermediateOutputPath>$(_BlazorIntermediateOutputPath)serviceworkerassets.js</_ServiceWorkerAssetsManifestIntermediateOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <_BlazorOutputWithTargetPath Condition="'$(ServiceWorkerAssetsManifest)' != ''"
        Include="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)"
        TargetOutputPath="$(_BaseBlazorDistPath)$(ServiceWorkerAssetsManifest)" />
    </ItemGroup>

  </Target>

  <UsingTask TaskName="GenerateServiceWorkerAssetsManifest" AssemblyFile="$(_BlazorTasksPath)" />

  <Target Name="_WriteServiceWorkerAssetsManifest"
          Condition="'$(ServiceWorkerAssetsManifest)' != ''"
          Inputs="@(ServiceWorkerAssetsManifestItem)"
          Outputs="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)"
          BeforeTargets="_BlazorStaticWebAssetsCopyGeneratedFilesToOutputDirectory"
          DependsOnTargets="_ComputeServiceWorkerAssetsManifestFileHashes; _ComputeDefaultServiceWorkerAssetsManifestVersion; _GenerateServiceWorkerIntermediateFiles">

    <GenerateServiceWorkerAssetsManifest
      Version="$(ServiceWorkerAssetsManifestVersion)"
      AssetsWithHashes="@(_ServiceWorkerAssetsManifestItemWithHash)"
      OutputPath="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />

    <ItemGroup>
      <FileWrites Include="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />
    </ItemGroup>

  </Target>

  <Target Name="_ComputeServiceWorkerAssetsManifestFileHashes">

    <ItemGroup>
      <ServiceWorkerAssetsManifestItem
        Include="%(StaticWebAsset.Identity)"
        Condition="'%(RelativePath)' != '$(ServiceWorkerAssetsManifest)'">
        <AssetUrl>$([System.String]::Copy('$([System.String]::Copy('%(StaticWebAsset.BasePath)').TrimEnd('/'))/%(StaticWebAsset.RelativePath)').Replace('\','/').TrimStart('/'))</AssetUrl>
      </ServiceWorkerAssetsManifestItem>

      <!-- Don't include compressed files in the manifest, since their existence is transparent to the client -->
      <ServiceWorkerAssetsManifestItem Remove="@(_CompressedStaticWebAsset->'%(FullPath)')" />

      <!-- Don't include the service worker files in the manifest, as the service worker doesn't need to fetch itself -->
      <ServiceWorkerAssetsManifestItem Remove="%(_ServiceWorkerIntermediateFile.FullPath)" />
    </ItemGroup>

    <GetFileHash Files="@(ServiceWorkerAssetsManifestItem)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerAssetsManifestItemWithHash" />
    </GetFileHash>
  </Target>

  <!--
    Compute a default ServiceWorkerAssetsManifestVersion value by combining all the asset hashes.
    This is useful because then clients will only have to repopulate caches if the contents have changed.
  -->
  <Target Name="_ComputeDefaultServiceWorkerAssetsManifestVersion"
          DependsOnTargets="_ComputeServiceWorkerAssetsManifestFileHashes"
          Condition="'$(ServiceWorkerAssetsManifest)' != ''">
    <PropertyGroup>
      <_CombinedHashIntermediatePath>$(_BlazorIntermediateOutputPath)serviceworkerhashes.txt</_CombinedHashIntermediatePath>
    </PropertyGroup>

    <!-- Neither of these should ever happen, but if we do we want to know about it. -->
    <Error Text="Cannot compute service worker assets manifest version, because no service worker manifest items were defined."
           Condition="'@(_ServiceWorkerAssetsManifestItemWithHash)' == ''" />
    <Error Text="While computing service worker assets manifest version, did not find any dll entries in service worker assets manifest."
           Condition="'@(_ServiceWorkerAssetsManifestItemWithHash->WithMetadataValue('Extension', '.dll'))' == ''" />

    <WriteLinesToFile
      File="$(_CombinedHashIntermediatePath)"
      Lines="@(_ServiceWorkerAssetsManifestItemWithHash->'%(FileHash)')"
      WriteOnlyWhenDifferent="true"
      Overwrite="true" />

    <GetFileHash Files="$(_CombinedHashIntermediatePath)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerAssetsManifestCombinedHash" />
    </GetFileHash>

    <PropertyGroup>
      <ServiceWorkerAssetsManifestVersion Condition="'$(ServiceWorkerAssetsManifestVersion)' == ''">$([System.String]::Copy('%(_ServiceWorkerAssetsManifestCombinedHash.FileHash)').Substring(0, 8))</ServiceWorkerAssetsManifestVersion>
    </PropertyGroup>
  </Target>

  <Target Name="_OmitServiceWorkerContent" BeforeTargets="AssignTargetPaths; ResolveCurrentProjectStaticWebAssetsInputs">
    <ItemGroup>
      <!-- Don't emit the service worker source files to the output -->
      <Content Remove="@(ServiceWorker)" />
      <Content Remove="@(ServiceWorker->'%(PublishedContent)')" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveServiceWorkerOutputs"
          BeforeTargets="_ResolveBlazorOutputs"
          DependsOnTargets="_ComputeServiceWorkerOutputs">
    <ItemGroup>
      <_BlazorOutputWithTargetPath Include="@(_ServiceWorkerIntermediateFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_ComputeServiceWorkerOutputs">
    <ItemGroup>
      <!-- Figure out where we're getting the content for each @(ServiceWorker) entry, depending on whether there's a PublishedContent value -->
      <_ServiceWorkerIntermediateFile Include="@(ServiceWorker->'$(IntermediateOutputPath)blazor\serviceworkers\%(Identity)')">
        <ContentSourcePath Condition="'%(ServiceWorker.PublishedContent)' != ''">%(ServiceWorker.PublishedContent)</ContentSourcePath>
        <ContentSourcePath Condition="'%(ServiceWorker.PublishedContent)' == ''">%(ServiceWorker.Identity)</ContentSourcePath>
        <TargetOutputPath>%(ServiceWorker.Identity)</TargetOutputPath>
        <TargetOutputPath Condition="$([System.String]::Copy('%(ServiceWorker.Identity)').StartsWith('wwwroot\'))">$([System.String]::Copy('%(ServiceWorker.Identity)').Substring(8))</TargetOutputPath>
        <TargetOutputPath Condition="$([System.String]::Copy('%(ServiceWorker.Identity)').StartsWith('wwwroot/'))">$([System.String]::Copy('%(ServiceWorker.Identity)').Substring(8))</TargetOutputPath>
      </_ServiceWorkerIntermediateFile>
    </ItemGroup>
  </Target>

  <Target Name="_GenerateServiceWorkerIntermediateFiles"
          Inputs="@(_ServiceWorkerIntermediateFile->'%(ContentSourcePath)'); $(_CombinedHashIntermediatePath)"
          Outputs="@(_ServiceWorkerIntermediateFile)"
          DependsOnTargets="_ComputeDefaultServiceWorkerAssetsManifestVersion">
    <Copy SourceFiles="%(_ServiceWorkerIntermediateFile.ContentSourcePath)" DestinationFiles="%(_ServiceWorkerIntermediateFile.Identity)" />
    <WriteLinesToFile
      File="%(_ServiceWorkerIntermediateFile.Identity)"
      Lines="/* Manifest version: $(ServiceWorkerAssetsManifestVersion) */"
      Condition="'$(ServiceWorkerAssetsManifestVersion)' != ''" />
    <ItemGroup>
      <FileWrites Include="%(_ServiceWorkerIntermediateFile.Identity)" />
    </ItemGroup>
  </Target>

</Project>
