@page "/errormaker"

<h2>Event handlers</h2>
<p>These errors will be caught by the closest error boundary ancestor.</p>
<button @onclick="@EventHandlerErrorSync">Synchronous</button>
<button @onclick="@EventHandlerErrorAsync">Asynchronous</button>

<hr />
<h2>Lifecycle methods</h2>
<p>These errors will be caught by the closest error boundary ancestor.</p>
<div><label><input @bind="throwInOnParametersSet" type="checkbox" /> OnParametersSet (sync)</label></div>
<div><label><input @bind="throwInOnParametersSetAsync" type="checkbox" /> OnParametersSetAsync (async)</label></div>
<div><label><input @bind="throwInOnParametersSetViaCascading" type="checkbox" /> OnParametersSet via cascading parameter (sync)</label></div>
<div><label><input @bind="throwInOnParametersSetAsyncViaCascading" type="checkbox" /> OnParametersSetAsync via cascading parameter (async)</label></div>
<div><label><input @bind="throwInOnAfterRender" type="checkbox" /> OnAfterRender (sync)</label></div>
<div><label><input @bind="throwInOnAfterRenderAsync" type="checkbox" /> OnAfterRenderAsync (async)</label></div>

<CascadingValue Name="@nameof(ErrorCausingChild.ThrowOnCascadingParameterNotification)"
                Value="@throwInOnParametersSetViaCascading">
    <CascadingValue Name="@nameof(ErrorCausingChild.ThrowOnCascadingParameterNotificationAsync)"
                    Value="@throwInOnParametersSetAsyncViaCascading">
        <ErrorCausingChild ThrowOnParametersSet="@throwInOnParametersSet"
                           ThrowOnParametersSetAsync="@throwInOnParametersSetAsync"
                           ThrowOnAfterRender="@throwInOnAfterRender"
                           ThrowOnAfterRenderAsync="@throwInOnAfterRenderAsync" />
    </CascadingValue>
</CascadingValue>

<hr />
<h2>Rendering</h2>
<p>These errors will be caught by the closest error boundary ancestor.</p>
<label><input @bind="throwWhileRendering" type="checkbox" /> Throw during rendering</label>
@if (throwWhileRendering)
{
    throw new InvalidTimeZoneException($"Exception from {nameof(BuildRenderTree)}");
}

<hr />
<h2>Custom error boundary</h2>
<p>This shows how to create a common custom error UI by subclassing ErrorBoundary.</p>

<CustomErrorBoundary @ref="customErrorBoundary">
    <ErrorCausingCounter />
</CustomErrorBoundary>
<button @onclick="@(() => customErrorBoundary!.Recover())">Recover programmatically</button>

<hr />
<h2>Custom error boundary that tries to ignore errors</h2>
<p>This shows that, even if a custom error boundary tries to continue rendering in a non-error state after an error, the subtree will be forcibly rebuilt. If there's an error while already in an error state, it's fatal.</p>
<ErrorIgnorer>
    <ErrorCausingCounter />
</ErrorIgnorer>

<hr />
<h2>Exception inline in error boundary markup</h2>
<p>This shows that, if an ErrorBoundary itself fails while rendering its own ChildContent, then it can catch its own exception (except if it's already showing an exception, in which case it's fatal).</p>
<ErrorBoundary>
    <ChildContent>
        @if (throwInline) { throw new InvalidTimeZoneException("Inline exception"); }
        <p>Hello!</p>
    </ChildContent>
    <ErrorContent>
        @if (throwInErrorContent) { throw new InvalidTimeZoneException("Inline exception in error content"); }
        <p>There was an error: @context</p>
    </ErrorContent>
</ErrorBoundary>
<button @onclick="@(() => throwInline = true)">Throw in child content</button>
<button @onclick="@(() => throwInErrorContent = true)">Throw in error content</button>

@code {
    private bool throwInOnParametersSet;
    private bool throwInOnParametersSetAsync;
    private bool throwInOnParametersSetViaCascading;
    private bool throwInOnParametersSetAsyncViaCascading;
    private bool throwInOnAfterRender;
    private bool throwInOnAfterRenderAsync;
    private bool throwWhileRendering;
    private bool throwInline;
    private bool throwInErrorContent;
    private ErrorBoundaryBase? customErrorBoundary;

    void EventHandlerErrorSync()
        => throw new InvalidTimeZoneException("Synchronous error from event handler");

    async Task EventHandlerErrorAsync()
    {
        await Task.Yield();
        throw new InvalidTimeZoneException("Asynchronous error from event handler");
    }
}
