<Project>
  <PropertyGroup>
    <DotNetDarkOutputPath>$(IntermediateOutputPath)d\</DotNetDarkOutputPath>
    <DepsPath>$(BaseIntermediateOutputPath)</DepsPath>
    <DefineConstants>$(DefineConstants);DepsPath=$(DepsPath)</DefineConstants>
    <DefineConstants>$(DefineConstants);InstallersOutputPath=$(InstallersOutputPath)</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Platforms Include="x64;x86;arm64" />
    <RuntimeInstallers Include="$(DepsPath)dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.exe">
      <TargetPlatform>x64</TargetPlatform>
      <BundleNameProperty>DotNetRedistLtsInstallerx64</BundleNameProperty>
      <Version>$(MicrosoftNETCoreAppRuntimeVersion)</Version>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.exe">
      <TargetPlatform>x86</TargetPlatform>
      <BundleNameProperty>DotNetRedistLtsInstallerx86</BundleNameProperty>
      <Version>$(MicrosoftNETCoreAppRuntimeVersion)</Version>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.exe">
      <TargetPlatform>arm64</TargetPlatform>
      <BundleNameProperty>DotNetRedistLtsInstallerarm64</BundleNameProperty>
      <Version>$(MicrosoftNETCoreAppRuntimeVersion)</Version>
    </RuntimeInstallers>
  </ItemGroup>

  <Target Name="FetchDependencies" BeforeTargets="Restore;CollectPackageReferences">
    <!-- Use the BrowserDebugHost as a sentinel for the nonshipping version for NETCoreApp. -->
    <PropertyGroup>
      <x64RemoteAsset>Runtime/$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.exe</x64RemoteAsset>
      <x64RemoteAssetFileName>dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.exe</x64RemoteAssetFileName>
      <x86RemoteAsset>Runtime/$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.exe</x86RemoteAsset>
      <x86RemoteAssetFileName>dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.exe</x86RemoteAssetFileName>
      <arm64RemoteAsset>Runtime/$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.exe</arm64RemoteAsset>
      <arm64RemoteAssetFileName>dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.exe</arm64RemoteAssetFileName>
    </PropertyGroup>

    <MakeDir Directories="$(DepsPath)" />

    <!-- Try various places to find the installers. It's either released (use official version),
         public but un-released (use dotnetbuilds/public), or internal and unreleased (use dotnetbuilds/internal) -->
    <ItemGroup>
      <UrisToDownload Include="https://dotnetcli.azureedge.net/dotnet/Runtime/$(x64RemoteAsset)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/public/$(x64RemoteAsset)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/internal/$(x64RemoteAsset)">
        <token>$(DotnetRuntimeSourceFeedKey)</token>
      </UrisToDownload>
    </ItemGroup>

    <DownloadFile Condition=" ! Exists('$(DepsPath)$(x64RemoteAssetFileName)') "
                  Uris="@(UrisToDownload)"
                  DestinationPath="$(DepsPath)$(x64RemoteAssetFileName)" />

    <ItemGroup>
      <UrisToDownload Remove="@(UrisToDownload)" />
      <UrisToDownload Include="https://dotnetcli.azureedge.net/dotnet/Runtime/$(x86RemoteAsset)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/public/$(x86RemoteAsset)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/internal/$(x86RemoteAsset)">
        <token>$(DotnetRuntimeSourceFeedKey)</token>
      </UrisToDownload>
    </ItemGroup>

    <DownloadFile Condition=" ! Exists('$(DepsPath)$(x86RemoteAssetFileName)') "
                  Uris="@(UrisToDownload)"
                  DestinationPath="$(DepsPath)$(x86RemoteAssetFileName)" />

    <ItemGroup>
      <UrisToDownload Remove="@(UrisToDownload)" />
      <UrisToDownload Include="https://dotnetcli.azureedge.net/dotnet/Runtime/$(arm64RemoteAsset)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/public/$(arm64RemoteAsset)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/internal/$(arm64RemoteAsset)">
        <token>$(DotnetRuntimeSourceFeedKey)</token>
      </UrisToDownload>
    </ItemGroup>

    <DownloadFile Condition=" ! Exists('$(DepsPath)$(arm64RemoteAssetFileName)') "
                  Uris="@(UrisToDownload)"
                  DestinationPath="$(DepsPath)$(arm64RemoteAssetFileName)" />
  </Target>

  <Target Name="ExtractPropertiesFromDotNetMsi" DependsOnTargets="FetchDependencies" BeforeTargets="BeforeBuild">
    <!-- Create properties that holds the executable name. These are passed to the bundles so we can reference them as variables
             from inside the ExePackage authoring. -->
    <CreateProperty Value="%(RuntimeInstallers.Filename)%(Extension)">
      <Output TaskParameter="Value" PropertyName="%(RuntimeInstallers.BundleNameProperty)"/>
    </CreateProperty>

    <!-- Decompile the bundles so that we can extract the MSI and read their version information. We need this to author ExePackage@DetectCondition
          in the bundles that chain the runtime bundles -->
    <Exec Command="$(DarkToolPath) -x $(DotNetDarkOutputPath)\%(RuntimeInstallers.Version)\%(TargetPlatform) %(Identity)" />

    <ItemGroup>
      <DotNetPayload Include="$(DotNetDarkOutputPath)\$(MicrosoftNETCoreAppRuntimeVersion)\%(Platforms.Identity)\AttachedContainer\**\dotnet-host-*win-*.msi">
        <ProductVersionProperty>DotNetRedistLtsInstallerProductVersion%(Platforms.Identity)</ProductVersionProperty>
        <ProductCodeProperty>DotNetRedistLtsInstallerProductCode%(Platforms.Identity)</ProductCodeProperty>
        <UpgradeCodeProperty>DotNetRedistLtsInstallerUpgradeCode%(Platforms.Identity)</UpgradeCodeProperty>
      </DotNetPayload>
    </ItemGroup>

    <!-- Read MSI properties -->
    <GetMsiProperty InstallPackage="%(DotNetPayload.Identity)" Property="ProductVersion">
      <Output TaskParameter="Value" PropertyName="%(ProductVersionProperty)" />
    </GetMsiProperty>
    <GetMsiProperty InstallPackage="%(DotNetPayload.Identity)" Property="ProductCode">
      <Output TaskParameter="Value" PropertyName="%(ProductCodeProperty)" />
    </GetMsiProperty>
    <GetMsiProperty InstallPackage="%(DotNetPayload.Identity)" Property="UpgradeCode">
      <Output TaskParameter="Value" PropertyName="%(UpgradeCodeProperty)" />
    </GetMsiProperty>

    <PropertyGroup>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerx64=$(DotNetRedistLtsInstallerx64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerProductVersionx64=$(DotNetRedistLtsInstallerProductVersionx64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerProductCodex64=$(DotNetRedistLtsInstallerProductCodex64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerUpgradeCodex64=$(DotNetRedistLtsInstallerUpgradeCodex64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerx86=$(DotNetRedistLtsInstallerx86)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerProductVersionx86=$(DotNetRedistLtsInstallerProductVersionx86)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerProductCodex86=$(DotNetRedistLtsInstallerProductCodex86)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerUpgradeCodex86=$(DotNetRedistLtsInstallerUpgradeCodex86)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerarm64=$(DotNetRedistLtsInstallerarm64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerProductVersionarm64=$(DotNetRedistLtsInstallerProductVersionarm64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerProductCodearm64=$(DotNetRedistLtsInstallerProductCodearm64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerUpgradeCodearm64=$(DotNetRedistLtsInstallerUpgradeCodearm64)</DefineConstants>
    </PropertyGroup>
  </Target>
</Project>
